package client2server;


option java_package = "pb4client";
option java_outer_classname = "War2GamePkt";
option java_multiple_files = true;

option go_package = "c2g";

// msgType = 10000
// 后端 -> 网关
// （控制消息）断开网关和客户端的连接
message CtrlOffline {
}

// msgType = 10001
// 网关 -> 后端
// （控制消息）通知后端客户端连接已断开
message CtrlNoticeOffline {
}

// msgType = 1
// 客户端 -> 服务器
// 发送登录消息，包括账号和密码
message Login {
	required string account = 1;
	required string pwd = 2;
	required string sid = 3; // 服务器id
	required int32 loginType = 4; //登录类型 1-账号密码  2-令牌
	required string token = 5; //登录令牌
	required string device = 6; //设备号	设备号，PC、手游需要发送客户端设备ID，统一使用公司标准，页游可以根据需要发送相应值，比如浏览器信息
}

message LoginRt {
	required int32 rt = 1;
	optional string token = 2;
	optional int32 exist = 3; //0:没有角色 1：已结有角色 2：流浪账号
	optional int64 accountId = 4;
	optional int64 playerId = 5;
	optional int64 worldId = 6;
}

// msgType = 2
// 客户端 -> 服务器
// 创建城池
message MakeCity {
}

message MakeCityRt {
	required int32 rt = 1;
}

// msgType = 3
// 客户端 -> 服务器
// 获取随机名
message GetRandomName {
}

message GetRandomNameRt {
	required int32 rt = 1;
	optional string name = 2; // 随机名
}

// msgType = 4
// 客户端 -> 服务器
// 进入游戏
message EnterGame {
	required int64 playerId = 1;//玩家ID
}

message EnterGameRt {
	required int32 rt = 1;
	optional int64 time = 4;
	repeated CityInfo cityInfo = 7;                 //城池信息
	repeated HeroStateInFo heroStateInfo = 8;       //武将状态信息
	optional int64 playerId = 12;                   //玩家Id
	optional DecreeChange decreeChange = 14;        //当前政令数与时间与上限
	repeated Task tasks = 20;                       //我身上当前的任务
	repeated BagInfo bagInfo = 30;                  //背包物品信息
	optional ServerInfo serverInfo = 31;            //服务器相关信息
	repeated AllianceMarkInfo allianceMarks = 37;   //联盟标记列表
	repeated ChatInfo chatInfos = 48;               //聊天历史
	repeated int32 newMailNum = 53;                 //新邮件数量 数组数据依次是：系统邮件、联盟邮件、收藏邮件
	repeated RedPoint redPoints = 60;               //所有的小红点信息
	repeated BarracksInfo barracks = 70;            // 玩家的造兵信息(只有造兵数据)
	optional CaveInfo info = 92;                    // 当前藏兵信息
	repeated BuffVo buffs = 97;                     // 玩家的buff集合
	optional int64 totalPower = 105;                //总实力
	repeated FriendApply friendApplys = 119;        // 加我为好友的人信息
	optional int32 strength = 122;                  //体力值 
	optional int32 strengthTime = 123;              //玩家是当前体力值的时间
	optional int32 nowInstanceId = 128;             //当前推图关卡Id
	repeated int32 newItem = 137;                   // 图书馆新图鉴  新图鉴 1-装备 2-道具 3-卡片 4-魔物 5-怪物
	repeated FogInfo fogs = 140;                    //迷雾信息
	repeated ActivityEnterTimeInfo enterTimeInfo = 142;         // 活动开放时间
    optional int32 newPlayerActivity = 144;         // 新手挑战状态 0-新手挑战已完成 1-还未完成新手挑战
}

//活动开放时间
message ActivityEnterTimeInfo {
	required int32 activityType = 1; // 奇观战入口-1 奇观战活动-2 四天龙入口-3 死天龙活动-4
	required int32 startTime = 2; // 开始时间
	required int32 endTime = 3; // 结束时间
	repeated int32 monsterActivityId = 4;
}

//迷雾信息
message FogInfo {
	required int32 fogId = 1;//配置ID
	required int32 state = 2;//迷雾状态 1、未战胜 2、已战胜未领取奖励 3、已战胜且领取奖励
	optional int64 power = 3;//迷雾战斗力
}

message PlayerArenaInfo {
	required int32 rank = 1; // 玩家排名
	required int32 times = 2;// 挑战次数
	repeated int32 drawRewards = 3; //  奖励已经领取的东西
	required int64 rankGold = 4; // 每天排名钻石奖励
	required int64 rankJJCoin = 5; //  每天排名竞技b奖励
	repeated int32 achievementExchangeRewards = 6; // 已经兑换的奖励
	required int32 maxRank = 7; // 玩家max排名
}

message InstanceUnitInfo {
	required int32 unitId = 1; // 关卡信息
	repeated int32 starNumBox = 2;// 已领取宝箱星数
}

message InstanceStar {
	required int32 floorId = 1; // 层数
	repeated int32 starCondition = 2;// 星数条件
}

message FriendApply {
	required int64 applyPlayerId = 1; // 加我为好友的玩家ID
	required string applyPlayerName = 2; // 加我为好友的玩家名
	required int32 applyPlayerAreaNo = 3; // 加我为好友的玩家所在服务器编号
	required int32 applyPlayerVipLv = 4; // 加我为好友的玩家VIP等级
	required string applyPlayerAllianceShortName = 5; // 加我为好友的玩家联盟简称
	required int32 applyPlayerPhotoId = 6; // 加我为好友的玩家头像
	required int32 applyState = 7; // 消息状态  0-等待处理 1-已经接受 2-已经拒绝
	required int32 castleLv = 8; // 城堡等级
	required int32 skinType = 9; // 城堡皮肤类型
	required int32 applyTime = 10; // 申请时间
	required string shortName = 11; // 玩家昵称
}

message AllianceTreasure {
	required int64 id = 1; // 唯一ID  领奖的时候发这个
	required int32 protoId = 2; // 宝藏模版ID
	required int32 overTime = 3; // 到点时间 zeroTime 表示可挖掘  大于当前时间表示正在挖掘 小于等于当前时间表示可以领奖
	required string reward = 4; // 奖励
	required string extendReward = 5; // 额外奖励
	required int64 helperId = 6; // 帮助ID
}

message OnlineRewardInfo {
	required int32 todayOnlineNum = 1; // 本日领取次数
	required string nextOnlineReward = 2; // 当前档奖励
	required int32 overTime = 3; // 当前档可领奖时间
	required string bigOnlineReward = 4; // 本日大奖奖励
}

message BuildUpInfo {
	required int64 id = 1; // 唯一id
	required int32 buildType = 2; // 建筑类型
	required int32 lv = 3; // 等级
}

message PrisonInfo {
	required int64 playerId = 1; // 被关玩家ID
	required int32 heroProtoId = 2; // 被关武将模版ID
	required int32 heroLv = 3; // 被关武将等级
	required int32 heroState = 4; // 被关武将状态
	required int32 heroStateStartTime = 5; // 被关武将状态开始时间
	required int32 heroStateOverTime = 6; // 被关武将状态结束时间
	required int64 ransom = 7; // 设置的赎金
	required string playerName = 8; // 玩家名
	required string allianceShortName = 9; // 玩家帮派简称
	required int32 iconId = 10; // 玩家头像模板id
}


message PlayerActivity {
	required int32 activityId = 1; // 活动模版ID
	required int32 score = 2; // 积分
	required int32 rank = 3; // 我的排行
	required int32 isActivityOver = 4; // 是否是活动结束推送 0-否 1-是
}


message BankInfo {
	required int32 type = 1; // 方案类型
	required int32 userPlan = 2; // 选择的方案
	optional int64 useMoney = 3; // 投资的钱
	optional int32 rate = 4; // 利率
	required int32 overTime = 5; // 到期时间
}

message LandGridInfo {
	required int32 x = 1; // 坐标x
	required int32 y = 2; // 坐标y
	repeated LandFloorInfo lfi = 3; // 地块多层信息
}

message LandFloorInfo {
	required int32 landZ = 1; // 哪一层
	required int32 townFloorProtoId = 2; // 地表模板ID
}


message ExpandInfo {
	required int32 x = 1; // 坐标x
	required int32 y = 2; // 坐标y
	required int32 isOpen = 3; // 是否扩建好了  0- 否 1-是
	required int32 overTime = 4; // 扩建结束时间
}

message TalentPoint {
	required int32 talentType = 1; //天赋类别
	required int32 leftTalentPoint = 2; //天赋点数
}

message UnlockedTalent {
	required int32 talentId = 1; //天赋Id
	required int32 talentLevel = 2; //天赋等级
}

message TimeBoxInfo {
	required int32 index = 1; // 槽位ID
	required int32 timeBoxId = 2; // 当前放着的时光之盒ID
	required int32 studyTime = 3; //研究时间
	required int32 overTime = 4; // 研究到点时间   zeroTime的话表示放进去了时光之盒但是未开始研究,,<now的话表示研究结束未领取
}

message RelicRefreshInfo {
	required int32 relicLv = 1; // 遗迹等级
	required int32 lastRefTime = 2; // 普通国上次刷新时间
	required int32 centerLastRefTime = 3; // 中心国上次刷新时间
}

message ServerInfo {
	required int64 serverId = 1; //服务器唯一编号
	required string serverName = 2; //服务器名字
	required int32 areaNo = 3; // 服务器区号
}

message BagInfo {
	required int64 itemId = 1; // 物品唯一ID
	required int32 itemProtoId = 2; //物品模板
	required int32 num = 3; //数量
	required int64 itemType = 5; //装备状态  0-仓库内,非0表示武将ID,表示被此武将佩戴
	required int32 equipOnAddress = 8; 
	required int32 equipLv = 9; //装备强化等级
	repeated EquipProps props = 10; //装备属性
	required int32 equipExp = 11; //装备强化经验
	repeated KingEquipCardInfo kingEquipCardInfos = 12; //君主装备的卡片信息
}

message KingEquipCardInfo {
	required int32 address = 1; //卡片位置
	required int32 cardProtoId = 2; // 卡片模版ID
}

message PayInfo {
	required int32 payId = 1; //记录充值过的pay.xml模板ID
	required int32 payTime = 2; //充值的时间
}

message CaveInfo {
	required int32 startTime = 1; // 开始时间，单位秒
	required int32 endTime = 2; // 结束时间，单位秒
	required int64 holdKingId = 3; // 保存的君主ID，如果为0，表示君主没有保存
	repeated CaveSoldier soldiers = 4; // 要保存的士兵信息
}
message GiftBagInfo {
	required int32 giftBagId = 1; // 礼包模板ID
	required int64 endTime = 2; // 礼包的结束时间
	required int32 curLevel = 3; // 礼包当前档位
	required int32 curCount = 4; // 礼包当前档位充值次数
}

message MonthCardInfo {
	required int32 monthCardId = 1; // 月卡ID 对应礼包表唯一ID
	required int32 inDayRecv = 2; // 今天月卡是否领取过
	required int64 overdueTime = 3; // 月卡过期时间
}

message QuotaBagInfo {
	required int32 quotaBagId = 1; // 满额礼包ID
	optional int64 endTime = 2; // 满额礼包的结束时间
	optional int32 rewardId = 3; // 满额礼包奖励ID
	optional int32 degree = 4; // 满额礼包完成度
}

// msgType = 5
// 客户端 -> 服务器
// 部队武将上阵
//废弃
message UpdateForceConfigUp {
	required int64 forceId = 1; // 	要上的的部队ID
	required int32 forceAddress = 2; // 	要上的位置
	required int64 heroId = 3; // 	要上的武将
}

message UpdateForceConfigUpRt {
	required int32 rt = 1;
	optional int64 heroId = 2;
}

// msgType = 6
// 客户端 -> 服务器
// 部队武将下阵
//废弃
message UpdateForceConfigDown {
	required int64 heroId = 1; // 	要下的武将ID
}

message UpdateForceConfigDownRt {
	required int32 rt = 1;
	optional int64 heroId = 2;
}

// msgType = 7
// 客户端 -> 服务器
// 部队武将上阵
//废弃
message UpdateForceConfigExchange {
	required int64 forceId = 1; // 	要换到的的部队ID
	required int32 forceAddress = 2; // 	要换上的位置
	required int64 heroId = 3; // 	要换上的武将
}

message UpdateForceConfigExchangeRt {
	required int32 rt = 1;
}

// msgType = 11
// 客户端 -> 服务器
// 查询和修改个人介绍
message QueryAndAmendPersonal {
	required int32 operationType = 1; //  	操作类型  1.查询 2.修改
	optional string playerName = 2; //     玩家名    如果是修改自己的介绍，可以不传
	optional string amendInfo = 3; //     修改内容
}

message QueryAndAmendPersonalRt {
	required int32 rt = 1;
	optional string personalInfo = 2; // 个人介绍
}

// msgType = 13
// 客户端 -> 服务器
// 武将经验升级
message HeroLevelUp {
	required int64 heroId = 1;
	required int32 experience = 2;
}

message HeroLevelUpRt {
	required int32 rt = 1;
}

// msgType = 14
// 客户端 -> 服务器
// 运营登录
message WebLogin {
	required string token = 1; // 登录令牌，网页登录接口返回
	required int32 areaId = 2; // 目标区号
}

message WebLoginRt {
	required int32 rt = 1;
	optional int32 exist = 2;
}

// msgType = 15
// 客户端 -> 服务器
//新版出征消息
message Walk {
	required int32 runType = 1; //打人、打怪、占领地、占领城、运输资源、采集、驻扎、增援、参与集结
	required int32 runTargetType = 2; //行军目标类型  1-部队 2-军团
	required int32 aimsX = 3; //目的地X
	required int32 aimsY = 4; //目的地Y
	repeated int64 heros = 5; //英雄数据
	repeated BattleSolider soliders = 6; //士兵数据
	optional int64 targetId = 7; //目标玩家/集结Id
}

message BattleSolider {
	required int32 protoId = 1; //配置ID
	required int32 num = 2; //参战士兵人数
}

message WalkRt {
	required int32 rt = 1;
	optional int32 errorCode = 2;
	optional int32 limit = 3; // 新的增援上限
	optional int64 groupId = 4;
}

// msgType = 16
// 客户端 -> 服务器
// 运输资源
message TransportResource {
	required int64 tarPlayerId = 1;//目标玩家Id
	required string res = 2;//资源信息（只能是金、铁、石、木、粮）
}


message TransportResourceRt {
	required int32 rt = 1;
	optional int32 errorCode = 2;
	optional int64 groupId = 3;
}

// msgType = 18
// 客户端 -> 服务器
// 侦查
message WalkScout {
	required int32 aimsX = 1; //目的地X
	required int32 aimsY = 2; //目的地Y
}

message WalkScoutRt {
	required int32 rt = 1;
	optional int32 errorCode = 2;
	optional int64 groupId = 3;
}

// msgType = 17
// 客户端 -> 服务器
// 查看玩家的个人信息
message PersonalPower {
	required int64 playerId = 1;
}

message PersonalPowerRt {
	required int32 rt = 1;
	optional PlayerInFo playerInFo = 2;
	optional MyPrisonInfo myPrisonInfo = 3; // 被囚禁信息
	repeated BagInfo bagInfo = 4; //背包物品信息
}

message PlayerInFo {
	required string name = 1; // 玩家名称
	required string shortName = 2; // 玩家简称
	required int64 id = 3; // 玩家ID
	optional int64 allianceId = 4; // 联盟ID
	optional string allianceName = 5; // 联盟名称
	optional string allianceShortName = 6; // 联盟简称
	repeated int32 positions = 7; // 联盟职位
	required int32 photoProtoId = 8; // 头像
	required int64 fightValue = 9; // 战斗力
	required int32 kingLv = 10; // 君主等级
	required int32 kingExp = 11; // 君主经验
	required int32 vipLv = 12; // vip等级
	optional int32 currentPos = 13; // 当前官职
	required int32 mainHeroStarLv = 14; // 领主星级
	required int32 mainHeroAdvLv = 15; // 领主阶级
	required int64 killSoliderNum = 16; // 杀敌数
	required int32 isMyFriend = 17; // 是否是我的好友
	required int32 isMyBlackFriend = 18; // 是否是我的黑名单
	required int32 mainHeroProtoId = 19; // 领主模版
}

message MyPrisonInfo {
	required int64 playerId = 1; // 囚禁我的领主的玩家ID
	required int32 photoId = 2; // 囚禁我的领主的玩家头像
	required string allianceShortName = 3; // 囚禁我的领主的玩家联盟简称
	required string playerName = 4; // 囚禁我的领主的玩家名称
	required int32 x = 5; // 囚禁我的领主的玩家X
	required int32 y = 6; // 囚禁我的领主的玩家Y
	required int32 areaNo = 7; // 囚禁我的领主的玩家Z
	required int64 ransom = 8; // 赎金
	required int64 rewardGold = 9; // 赏金
}

// msgType = 19
// 客户端 -> 服务器
// 添加坐标
message AddMark {
	required int32 aimsX = 1;
	required int32 aimsY = 2;
	required int32 areaNo = 3; // 服务器区号
	required int32 group = 4; // 分组类型
	required string name = 5; // 名字
}

message AddMarkRt {
	required int32 rt = 1;
	optional MarkInfo markInfo = 2;
}

// msgType = 20
// 客户端 -> 服务器
// 删除坐标
message DelMark {
	required int64 id = 1; // 标记点唯一ID
}

message DelMarkRt {
	required int32 rt = 1;
	optional int64 id = 2; // 标记点唯一ID
}

// msgType = 21
// 客户端 -> 服务器
// 请求时间
message FetchServerTime {
	required int64 reqTime = 1;
}

message FetchServerTimeRt {
	required int32 rt = 1;
	optional int64 reqTime = 2;
	optional int64 time = 3;
	optional string timeZoneName = 4; //时区名字
	optional int32 timeZoneValue = 5; //时区偏移值
}

// msgType = 23
// 客户端 -> 服务器
// 钻石换取政令请求
message DiamondConvertDecree {

}

message DiamondConvertDecreeRt {
	required int32 rt = 1;
	optional int32 decreeBuyNum = 2; //今日已购买政令次数
	optional int32 decreeDayTime = 3; //最近购买时间
}

// msgType = 24
// 客户端 -> 服务器
// 预备兵请求
message PrepareConscription {
	required int64 cityId = 1;
}

// 服务器 -> 客户端
// 预备兵变化主推
message PrepareConscriptionRt {
	required int32 rt = 1;
	optional int32 readySoldier = 2; //当前预征兵数量
	optional int64 cityId = 3; // 哪个城池的预备兵数量发生了变化
}

// msgType = 25
// 客户端 -> 服务器
// 资源详情
message ResourceParticular {

}

message ResourceParticularRt {
	required int32 rt = 1;
	repeated ResourceParticularInfo ResourceParticularInfo = 2;
}

message ResourceParticularInfo {
	required int32 types = 1; // 1.领地产量  2.设施产量  3.同盟加成  5.维持消耗
	required YieldChange yieldChange = 2;
}

// msgType = 26
// 客户端 -> 服务器
// 实时检测改名
message CheckPlayerName {
	required string name = 1;
	required int32 nameType = 2; // 1-玩家名字  2-玩家昵称
}

message CheckPlayerNameRt {
	required int32 rt = 1;
	optional int32 errorType = 2;
}

// msgType = 27
// 客户端 -> 服务器
// 改名
message ChangePlayerName {
	required string name = 1;
}

message ChangePlayerNameRt {
	required int32 rt = 1;
	optional string name = 2;
}

// msgType = 30
// 客户端 -> 服务器
// 请求武将升阶
message UpHeroAdvLv {
	required int64 heroId = 1; // 武将编号
	required int32 toLv = 2; // 升到的进阶等级
}

message UpHeroAdvLvRt {
	required int32 rt = 1;
	optional int64 heroId = 2; // 武将编号
	optional int32 toLv = 3; // 升到的进阶等级
}

// msgType = 31
// 客户端 -> 服务器
// 请求武将升级技能
message UpHeroSkill {
	required int64 heroId = 1; // 武将编号
	required int32 pos = 2; // 第几个技能(1-4)
}

message UpHeroSkillRt {
	required int32 rt = 1;
	optional int64 heroId = 2; // 武将编号
	optional int32 pos = 3; // 第几个技能(1-4)
}

// msgType = 32
// 客户端 -> 服务器
// 商船查询
message MerchantShipQuery {

}

message MerchantShipQueryRt {
	required int32 rt = 1;
	optional int32 refreshTime = 2; // 下次刷新的时间点
	repeated MerchantShipRecord records = 3;
}

message MerchantShipRecord {
	required int32 exchangeId = 1; // 兑换项的记录ID
	required int32 srcType = 2; // 源物品类型  1-普通物品 2-惊喜物品
	required int32 srcProtoId = 3; // 根据不通的物品类型对应不同的配置表模版唯一ID
	required int32 exchanged = 4; // 是否以成功兑换 0-否 1-是
	required int32 locked = 5; // 是否已经锁定 0-否  1-是
}

// msgType = 33
// 客户端 -> 服务器
// 商船兑换
message MerchantShipExchange {
	required int32 exchangeId = 1; // 兑换项的记录ID
}

message MerchantShipExchangeRt {
	required int32 rt = 1;
	optional int32 srcProtoId = 2; // 如果本次兑换激活了惊喜 这个ID表示惊喜ID
}

// msgType = 34
// 客户端 -> 服务器
// 商船兑换锁定
message MerchantShipLock {
	required int32 exchangeId = 1; // 兑换项的记录ID
	required int32 lockType = 2; // 1-锁  2-解锁
}

message MerchantShipLockRt {
	required int32 rt = 1;
}

// msgType = 35
// 客户端 -> 服务器
// 藏兵设置
message CaveConfig {
	required int32 protoId = 1; // 藏兵配置的模板ID，主要是时间
	required int32 holdKing = 2; // 保存君主，0：不保存，1：保存
	repeated CaveSoldier soldiers = 3; // 要保存的士兵信息
}

message CaveSoldier {
	required int32 soldierType = 1; // 士兵类型
	required int32 soldierNum = 2; // 士兵数
}

message CaveConfigRt {
	required int32 rt = 1;
}

// msgType = 36
// 客户端 -> 服务器
// 藏兵召回
message CaveCancel {

}

message CaveCancelRt {
	required int32 rt = 1;
}

// msgType = 37
// 客户端 -> 服务器
// 银行投资
message Bank {
	required int32 userPlan = 1; // 选择的方案
	required int64 useMoney = 2; // 投资的钱
}

message BankRt {
	required int32 rt = 1;
	optional int32 userPlan = 2; // 选择的方案
	optional int64 useMoney = 3; // 投资的钱
}

// msgType = 38
// 客户端 -> 服务器
// 领取投资
message GetBank {
}

message GetBankRt {
	required int32 rt = 1;
}

// msgType = 39
// 客户端 -> 服务器
// 取消投资
message CancelBank {
}

message CancelBankRt {
	required int32 rt = 1;
}

// msgType = 40
// 客户端 -> 服务器
// 大地图外观显示
message ShowMap {
}

message ShowMapRt {
	required int32 rt = 1;
	repeated ShowMapInfo infos = 2; //显示信息
}

// msgType = 41
// 客户端 -> 服务器
// 打开换头像画面的查询
message PhotoQuery {
}

message PhotoQueryRt {
	required int32 rt = 1;
	optional int32 protoId = 2; //头像
	optional int32 freeCount = 3; //剩余免费次数
	optional int32 freeTime = 4; //免费换头像时间：【0】-当前可免费换头像；【!0】-可进行免费换头像的时间
}

// msgType = 42
// 客户端 -> 服务器
// 设置玩家的头像
message PhotoChange {
	required string protoId = 1; //武将模版ID
}

message PhotoChangeRt {
	required int32 rt = 1;
	optional string protoId = 2; //头像
}

// msgType = 43
// 客户端 -> 服务器
// 设置守城英雄
message SetDefHere {
	repeated HeroPos heroIds = 1; //武将IDS
}

message SetDefHereRt {
	required int32 rt = 1;
	repeated HeroPos heroIds = 2; //武将IDS
}

message SkinInfo {
	required int32 skinType = 1;
	required int32 star = 2;
	required int32 isUse = 3; //0 未使用 1 使用
}

// msgType = 44
// 客户端 -> 服务器
// 购买城堡皮肤
message BuySkin {
	required int32 skinType = 1;
}

message BuySkinRt {
	required int32 rt = 1;
	optional int32 skinType = 2;
}

// msgType = 45
// 客户端 -> 服务器
// 切换皮肤
message ChangeSkin {
	required int32 skinType = 1;
}

message ChangeSkinRt {
	required int32 rt = 1;
}

// msgType = 46
// 客户端 -> 服务器
// 强化皮肤
message StrengSkin {
	required int32 skinType = 1; //皮肤类型
	required int32 useNum = 2; //使用数量
}

message StrengSkinRt {
	required int32 rt = 1;
	optional int32 skintype = 2;
	optional int32 isSuccess = 3; //1 成功 2 失败
}

// 内政任务
message InteriorTaskInfo {
	required int32 id = 1; // 任务的模板id
	required int32 pos = 2; // 任务位置
	required string rewards = 3; // 奖励
	required int32 state = 4; // 任务状态 0 未完成 1 完成
	required int32 finishTime = 5; // 任务完成时间
}

// msgType = 47
// 客户端 -> 服务器
// 进行内政任务
message ExecuteInteriorTask {
	required int32 id = 1; // 内政任务的模板id
	required int32 op = 2; // 进行的操作 1 领取任务 2 领取奖励
	required int32 pos = 3; // 内政任务的位置
}

message ExecuteInteriorTaskRt {
	required int32 rt = 1;
	optional InteriorTaskInfo interiorTaskInfo = 2; // 内政任务
}

// msgType = 48
// 客户端 -> 服务器
// 查询内政任务
message QueryInteriorTask {
}

message QueryInteriorTaskRt {
	required int32 rt = 1;
	optional int32 nextFreshTime = 2; // 下次刷新时间
	repeated InteriorTaskInfo interiorTaskInfos = 3; // 内政任务
}

// msgType = 49
// 客户端 -> 服务器
// 查询内政任务
message ResetInteriorTask {

}

message ResetInteriorTaskRt {
	required int32 rt = 1;
	optional int32 nextFreshTime = 2; // 下次刷新时间
	repeated InteriorTaskInfo interiorTaskInfos = 3; // 内政任务
}

// msgType = 50
// 客户端 -> 服务器
// 建造建筑
message CreateInnerCity {
	required int64 cityId = 1; 		// 城池ID
	required int32 positionIndex  = 2; 	// 建筑的坑位索引
	required int32 innerCityType = 3; 	// 建筑类型
	required int32 createType = 4;      // 1正常 2秒建筑
}

message CreateInnerCityRt {
	required int32 rt = 1;
}

// msgType = 51
// 客户端 -> 服务器
// 建筑位置解锁
message UnlockInnerCity {
	required int64 cityId = 1; 		// 城池ID
	required int64 innerCityId = 2; 	// 建筑实例唯一ID
}

message UnlockInnerCityRt {
	required int32 rt = 1;
}

// msgType = 52
// 客户端 -> 服务器
// 建筑升级
message UpInnerCity {
	required int64 cityId = 1; 		// 城池ID
	required int64 innerCityId = 2; 	// 建筑实例唯一ID
	required int32 lvUpType = 3; 		// 升级类型 1-普通  2-秒
}

message UpInnerCityRt {
	required int32 rt = 1;
}

// msgType = 53
// 客户端 -> 服务器
// 建筑取消升级
message CancelUpInnerCity {
	required int64 cityId = 1; 		// 城池ID
	required int64 innerCityId = 2; 	// 建筑实例唯一ID
}

message CancelUpInnerCityRt {
	required int32 rt = 1;
}

// msgType = 54
// 客户端 -> 服务器
// 建筑拆除
message DestroyInnerCity {
	required int64 cityId = 1; 		// 城池ID
	required int64 innerCityId = 2; 	// 建筑实例唯一ID
	required int32 destoryType = 3; 	// 1-使用道具立即拆除 2-花费时间拆除
}

message DestroyInnerCityRt {
	required int32 rt = 1;
}

// msgType = 55
// 客户端 -> 服务器
// 建筑取消拆除
message CancelDestroyInnerCity {
	required int64 cityId = 1; 		// 城池ID
	required int64 innerCityId = 2; 	// 建筑实例唯一ID
}

message CancelDestroyInnerCityRt {
	required int32 rt = 1;
}

// msgType = 56
// 客户端 -> 服务器
// 移动建筑
message MoveInnerCity {
	required int64 cityId = 1; 		// 城池ID
	required int64 innerCityId = 2; 	// 建筑实例唯一ID
	required int32 newPositionIndex = 3;	// 新的坑位
}

message MoveInnerCityRt {
	required int32 rt = 1;
	optional int32 oldPositionIndex = 2;
	optional int32 newPositionIndex = 3;
}

// msgType = 57
// 客户端 -> 服务器
// 内城区域解锁
message UnlockInnerCityArea {
	required int64 cityId = 1; 		// 城池ID
	required int32 areaId = 2; // 区域ID
}

message UnlockInnerCityAreaRt {
	required int32 rt = 1;
	optional int32 areaId = 2; // 区域ID
}

// msgType = 99
// 客户端 -> 服务器
// 查询建造时间
//废弃
message QueryBuildCity {
	required int32 x = 1; // X
	required int32 y = 2; // Y
	repeated int32 cityType = 3; // 建筑类型
}

message QueryBuildCityRt {
	required int32 rt = 1;
	optional int32 x = 2; // X
	optional int32 y = 3; // Y
	repeated QueryBuildCityInfo queryBuildCityInfo = 4;
}

message QueryBuildCityInfo {
	required int32 cityType = 1; // 建筑类型
	required int32 costTime = 2; // 消耗的时间
}

message InnerCityInfo {
	required int32 innerCityType = 1; 	// 建筑类型
	required int64 innerCityId = 2;   	// 建筑唯一ID
	required int32 startTime = 3;	  	// 开始时间
	required int32 completeTime = 4;  	// 完成时间
	required int32 state = 5;	  	// 状态	1 正常 2 升级中 3 拆除中 4 锁定中
	required int32 positionIndex = 6; 	// 建筑的坑位索引
	required int32 lv = 7;		  	// 建筑等级
	required int64 helpId = 8;		// 帮助ID
}

// msgType = 100
// 客户端 -> 服务器
// 开始征兵
message Conscription {
	repeated ConscriptionInfo conscriptionInfo = 1; //格子ID_征兵数量 :格子ID_征兵数量 :格子ID_征兵数量 :格子ID_征兵数量
	required int32 conscriptionType = 2; //1-普通征兵 2-立即征兵
	required int64 playerId = 3; //要征兵的部队主人ID
}

message ConscriptionRt {
	required int32 rt = 1;
	repeated HeroEndTime heroEndTime = 2; //征兵信息
}

// msgType = 101
// 客户端 -> 服务器
// 取消征兵
message Cancelconscription {
	required int64 heroId = 1; //格子ID
}

message CancelconscriptionRt {
	required int32 rt = 1;
	optional int32 getQueue = 2; ////返还的队列数..1或者0 客户端拿当前队列数-这个值
	optional int64 heroId = 3; //格子ID
}

// msgType = 102
// 客户端 -> 服务器
// 新造建筑
//废弃
message BuildCity {
	required int32 x = 1; // X
	required int32 y = 2; // Y
	required int32 cityType = 3; //	要建造的建筑类型
	required string name = 4; // 玩家取得建筑名字
}

message BuildCityRt {
	required int32 rt = 1;
	optional int32 x = 2; //X
	optional int32 y = 3; //Y
	optional int32 cityType = 4; //建造的建筑类型
	optional int32 completeTime = 5; //建造的完成时间
	optional string name = 6; //玩家取得建筑名字
}

// msgType = 103
// 客户端 -> 服务器
// 简单战报请求
message GetEasyFightInfo {
	required int32 selectType = 1; //查看类型  1-普通战报  2-竞技场战报
	required int64 lastId = 2; //最新的那封的ID 如果第一次进游戏.传0
}

message GetEasyFightInfoRt {
	required int32 rt = 1;
	repeated BattleReportInfo reports = 2;
}

// msgType = 104
// 客户端 -> 服务器
// 详细战报请求
message GetDetailFightInfo {
	required int64 playerId = 1;
	required int64 reportId = 2;//战报ID
}

message GetDetailFightInfoRt {
	required int32 rt = 1;
	optional int64 reportId = 2;//战报ID
	optional int32 reportType = 3;
	optional string soliderFightReport = 4;
	repeated HeroFightReport heroFightReport = 5;
}

// msgType = 105
// 客户端 -> 服务器
// 获取英雄战战报记录（测试用）
message GetHeroFightReport {
	repeated HeroFightHeroInfo atkHeros = 1;//攻击方英雄信息
	repeated HeroInfoInOnceFight defHerosInOnceFight = 2;//攻击方英雄信息
}

//一场战斗中的英雄数据
message HeroInfoInOnceFight {
	repeated HeroFightHeroInfo heros = 1;
}

//英雄战英雄信息
message HeroFightHeroInfo {
	required int32 protoId = 1;//英雄Id
	required int32 lv = 2;//英雄等级
	required int32 rank = 3;//英雄爵位
	required int32 star = 4;//英雄星级
	required int32 pos = 5;//英雄位置 (限定1-9)
	repeated int32 uniqueSkillList = 6;//大招技能列表（最多一个技能生效）
	repeated int32 activeSkillList = 7;//主动技能列表（最多只有前两个技能生效）
	repeated int32 passiveSkillList = 8;//被动技能列表
}


message GetHeroFightReportRt {
	required int32 rt = 1;
	repeated HeroFightReport report = 2;//战报内容
}

//英雄战报结构
message HeroFightReport {
	repeated FightEntity entitys = 1;//所有战斗单位
	repeated FightRecord records = 2;//战斗请求记录
	required int32 fightResult = 3;//战斗结果
	repeated FightStatistics statistics = 4; //统计数据
	repeated OperateRecord operateRecords = 5;//操作记录
}

//操作记录
message OperateRecord {
	required int32 frame = 1;
	required int32 entityId = 2;
	required int32 launchUniqueSkill = 3;
	required int32 resetLaunchUniqueSkillFlag = 4;
}

//战斗统计
message FightStatistics {
    required int32 recordKey = 1;
    required int32 recordValue = 2;
}

//战斗实体对象
message FightEntity {
	required int64 id = 1;//唯一ID
	repeated IntProperty intPropertys = 2;//int属性值
	repeated FloatProperty floatPropertys = 3;//float属性值
}

//int属性值
message IntProperty {
	required int32 propertyType = 1;//属性类别
	required int64 propertyValue = 2;//属性值
}

//float属性值
message FloatProperty {
	required int32 propertyType = 1;//属性类别
	required double propertyValue = 2;//属性值
}

//array属性值
message ArrayProperty {
	required int32 propertyType = 1;//属性类别
	repeated IntProperty intPropertys = 2;//int属性值
	repeated FloatProperty floatPropertys = 3;//float属性值
}

//战斗记录
message FightRecord {
	required int32 frame = 1;//帧
	required int64 senderId = 2;//发送者Id
	required int64 receiverId = 3;//接受者Id
	required FightRequest request = 4;//请求内容
}

//战斗行为请求
message FightRequest {
	required int32 behaviorType = 1;//行为类别
	repeated IntProperty intPropertys = 2;//int属性值
	repeated FloatProperty floatPropertys = 3;//float属性值
	repeated ArrayProperty arrayPropertys = 4;//array属性值
	repeated FightEntity entitys = 5;//生成的战斗单位
}

// msgType = 106
// 客户端 -> 服务器
// 查看别人的分享战报
message GetShareBattle {
	required int64 battleInfoId = 1; // 战报ID
	required int64 worldId = 2;      // 战报所在的服务器id
	required int64 reportOwner = 3;  // 拥有这份战报的玩家id
}

message GetShareBattleRt {
	required int32 rt = 1;
	optional BattleReportInfo reports = 2; // 战报内容
}

// msgType = 107
// 客户端 -> 服务器
// 取消行军(废弃)
message CancelWalk {
	required int64 forceId = 1; //部队ID
}

message CancelWalkRt {
	required int32 rt = 1;
	optional int64 forceId = 2; //部队ID
}

// msgType = 108
// 客户端 -> 服务器
// 切换世界视野
message ChangeWorldWatch {
	optional int64 worldId = 1;//世界Id
	optional int32 areaId = 2; //区服Id
}

message ChangeWorldWatchRt {
	required int32 rt = 1;
	optional ServerInfo serverInfo = 2;
}

// msgType = 109
// 客户端 -> 服务器
// 获取所有服务器信息
message GetAllServerInfo {
}

message GetAllServerInfoRt {
	required int32 rt = 1;
	repeated ServerInfo allServerInfo = 2;
}

// msgType = 110
// 客户端 -> 服务器
// 鼠标拖动刷新周围格子信息
message NewShowNearMap {
	required int32 x = 1;
	required int32 y = 2;
	required int32 isForce = 3; //是否强制刷新(0-否 1-是)-客户端从战斗中切出来的时候会强制刷新,不然会因为坐标移动太小服务器不给刷
}

message NewShowNearMapRt {
	required int32 rt = 1;
	repeated NewEveryLandInfo lands = 2; //格子信息
	repeated RemoveXY removeXY = 3;
	repeated WalkRobot walkRobots = 4; //当前格子有行军小人存在
	repeated WalkRobot walkInfos = 5; // 以该点为起点或终点的行军线
}

message NewEveryLandInfo {
	required int32 x = 1;
	required int32 y = 2;
	required int32 gridX = 3;
	required int32 gridY = 4;
	optional int32 cellType = 5; // 土地上的元素类型 1-资源点 2-魔物 3-遗迹 4- 玩家城池 5-奇观 11-召唤boss 12-尸体资源地 13-活动boss 14-属地
	
	optional ResLandInfo resInfo = 6; // 资源地块信息
	optional BossLandInfo bossLandInfo = 7; //魔物地块信息
	optional RelicLandInfo relicInfo = 9; //遗迹地块信息
	optional CastleLandInfo castleInfo = 10; //城池地块信息
	optional WonderLandInfo wonderInfo = 11; //奇观地块信息
	optional BelongLandInfo belongInfo = 12; //归属地块信息
}

// 资源地块信息
message ResLandInfo {
	required int32 lv = 1; // 等级
	required int32 resType = 2; // 资源点类型
	required int32 resNum = 3; // 资源点值
	optional int32 forceState = 4; // 部队状态 0、无  2、驻扎 8、采集
	optional int64 playerId = 5; // 菜鸡的玩家ID
	optional int64 allianceId = 6; // 联盟ID
	optional int32 disappearTime = 7; //资源地消失时间
	optional int32 tileId = 100;	// (客户端使用)
}

// 魔物地块信息
message BossLandInfo {
	required int32 bossId = 1; // 如果类型是魔物的话,这个是monster表的id字段,模版与等级都可以取到
	required int32 bossHp = 2; // 血量	(合并allianceBossHp字段,根据BossId计算血量，再计算比例)
	required int32 disappearTime = 3; // 召唤类魔物消失时间（取代allianceOverTime）
	optional int32 unlockTime = 4;// 魔物解锁时间
	optional int64 playerId = 5; // 归属的玩家ID
	optional string playerName = 6; // 城池归属 玩家名
	optional int32 photoId = 7; //玩家头像id
	optional int64 allianceId = 8; // 联盟ID
	optional string allianceName = 9; // 联盟名称
	optional string allianceShortName = 10; // 联盟简称
	optional int32 helpMemberCount = 11;// 协助玩家数量
	optional int32 tileId = 100;	// (客户端使用)
}

// 遗迹地块信息
message RelicLandInfo {
	optional int32 relicId = 13; // 如果类型是遗迹的话,这个是relic表的id字段,模版与等级都可以取到
	optional int32 tileId = 14; // (客户端使用)
}

// 玩家城池地块信息
message CastleLandInfo {
	optional int64 playerId = 1; // 归属的玩家ID
	optional string playerName = 2; // 城池归属 玩家名
	optional int64 allianceId = 3; // 联盟ID
	optional string allianceName = 4; // 联盟名称
	optional string allianceShortName = 5; // 联盟简称
	optional int32 lv = 6; // 等级
	optional int32 currentPos = 7;//当前官职
	optional int32 castleStatus = 8;//城堡状态 1、和平  3、冒烟 4、冒火
	optional int32 coverOverTime = 9; //城堡保护罩结束时间
	repeated CellPrisonInfo prisonInfos = 10; //监狱信息
	optional int32 tileId = 100;	// (客户端使用)
}

// 奇观地块信息
message WonderLandInfo {
	optional int32 wonderStatus = 1;//奇观状态 1、和平 2、争夺 3、冒烟 4、冒火
	optional int32 statusOverTime = 2; //奇观冒烟冒火状态结束时间
	optional int64 playerId = 3; // 归属的玩家ID
	optional string playerName = 4; // 城池归属 玩家名
	optional int64 allianceId = 5; // 联盟ID
	optional string allianceName = 6; // 联盟名称
	optional string allianceShortName = 7; // 联盟简称
	optional int32 tileId = 100;	// (客户端使用)
}

// 归属地块信息
message BelongLandInfo {
	optional int64 playerId = 1; // 归属的玩家ID
	optional string playerName = 2; // 城池归属 玩家名
	optional int32 photoId = 3; //玩家头像id
	optional string allianceShortName = 4; // 联盟简称
	optional int32 belongOverTime = 5; //归属结束时间
	optional BattleSimpleRs battleSimpleRs = 6; //属地简单战果
	optional int32 tileId = 100;	// (客户端使用)
}

message BattleSimpleRs {
	required int32 atkerPhotoId = 1;
	required string atkerAllianceShortName = 2;
	required string atkerName = 3;
	required int32 atkerBattleRs = 4;
	required int32 deferPhotoId = 5;
	required string deferAllianceShortName = 6;
	required string deferName = 7;
	required int32 deferBattleRs = 8;
	required int64 atkerPlayerId = 9;
	required int64 deferPlayerId = 10;
}

message CellPrisonInfo {
	required int64 playerId = 1; // 被关玩家ID
	required int64 rewardGold = 2; // 设置的赏金
	required string playerName = 3; // 玩家名
	required string allianceShortName = 4; // 玩家帮派简称
}

message OnCellForce {
	required int32 forceAction = 1; //1、采集 2、驻扎
	required int64 groupId = 2; //行军组Id
	required int64 playerId = 3; //玩家ID
	required string playerName = 4; //玩家名称
	optional int64 allianceId = 5; //联盟ID
	optional string allianceName = 6; //联盟名称
	optional string allianceShortName = 7; //联盟简称
	optional int32 farmedNum = 8; //已采集量
	optional int32 canFarmNum = 9; //可采集量
	optional int32 endFarmTime = 10; //结束采集时间
}

// msgType = 111
// 客户端 -> 服务器
// 查询地块
message QueryCell {
	required int32 posX = 1;
	required int32 posY = 2;
}

message QueryCellRt {
	required int32 rt = 1; //返回值
	optional int32 cellType = 2; //地块类型 1、采集地 2-普通魔物 4、玩家城 5、奇观  6、占领地 9、据点 11-召唤魔物 12-尸体资源地（暂无）
	optional CastleCell castle = 3; //玩家城信息
	optional FarmCell farm = 4; //采集信息
	optional OccupyCell occupy = 5; //占领信息
	optional StrongholdCell stronghold = 6; //据点信息
	optional WonderCell wonderCell = 7; //奇观信息
	optional CommonBossCell commonBossCell = 8;//普通魔物信息
	optional CallBossCell callBossCell = 9;//召唤魔物信息
	optional ActivityBossCell activityBossCell = 10;//活动魔物信息
}

//玩家名称信息
message PlayerNameInfo {
	required int64 playerId = 1; //玩家ID
	required string playerName = 2; //玩家名称
	required int32 playerPhoto = 6; //玩家头像
	optional int64 allianceId = 3; //联盟ID
	optional string allianceName = 4; //联盟名称
	optional string allianceShortName = 5; //联盟简称
	optional int32 posX = 7; //城位置X
	optional int32 posY = 8; //城位置Y
	optional int32 flagColor = 9; //旗帜的颜色模版ID
	optional int32 flagStyle = 10; //旗帜的样式模版ID
	optional int32 flagEffect = 11; //旗帜的图案模版ID
	optional int32 mainHeroProtoId = 12; //领主武将模板Id
}

//普通魔物信息
message CommonBossCell {
	required int32 bossId = 8; // 如果类型是魔物的话,这个是monster表的id字段,模版与等级都可以取到
	required int32 bossHp = 9; // 血量	(合并allianceBossHp字段,根据BossId计算血量，再计算比例)
	required int32 disappearTime = 10; // 召唤类魔物消失时间（取代allianceOverTime）
}

//召唤魔物信息
message CallBossCell {
	optional string playerName = 1; // 玩家名
	optional string allianceShortName = 2; // 联盟简称 
	required int32 bossId = 8; // 如果类型是魔物的话,这个是monster表的id字段,模版与等级都可以取到
	required int32 bossHp = 9; // 血量	(合并allianceBossHp字段,根据BossId计算血量，再计算比例)
	required int32 disappearTime = 10; // 召唤类魔物消失时间（取代allianceOverTime）
	required int32 unlockTime = 11;// 魔物解锁时间
	required int32 helpMemberCount = 12;// 协助玩家数量
	optional int32 playerPhotoId = 13;// 玩家头像
}

//活动魔物信息
message ActivityBossCell {
	required int32 bossId = 8; // 如果类型是魔物的话,这个是monster表的id字段,模版与等级都可以取到
	required int32 bossHp = 9; // 血量	(合并allianceBossHp字段,根据BossId计算血量，再计算比例)
	required int32 disappearTime = 10; // 活动魔物消失时间（取代allianceOverTime）
	required int32 unlockTime = 11;// 魔物解锁时间
}

//玩家城信息
message CastleCell {
	required PlayerNameInfo info = 1; //玩家名称信息
	required int32 vipLv = 6; //vip等级
	required int32 photoId = 7; //头像ID
	required int64 power = 8; //实力值
	required int64 killer = 9; //击杀数
	optional int32 buildingLv = 10; //大使馆等级
	optional int32 alliancePos = 11; //联盟阶级
	optional int32 office = 12;//国家官职
}

//采集信息
message FarmCell {
	required PlayerNameInfo info = 1; //玩家名称信息
	required int64 groupId = 2; //行军组Id
	required int32 farmWeight = 3; //采集负重
	required int32 startFarmTime = 4; //开始采集时间
	required int32 endFarmTime = 5; //结束采集时间
}

//占领信息
message OccupyCell {
	required CastleCell castle = 1; //玩家城信息
	required int64 groupId = 2; //行军组Id
	repeated HeroForWalk heros = 3; //英雄信息
	repeated SoliderForWalk soliders = 4; //士兵信息
}

//据点信息
message StrongholdCell {
	optional PlayerNameInfo info = 1; //玩家名称信息
	optional int64 groupId = 2; //行军组Id
	required int32 totalGiveTributeCount = 3; //总上供次数
	required int32 leftGiveTributeCount = 4; //剩余上供次数
	required int32 giveTributeTime = 5; //上供时间
	required int32 waitTributeTime = 6; //已等待的上供时间
	required string randReward = 7; //随机奖励
	required int32 haveTreasure = 8; //据点是否有异宝 0- 木有 1-有
	optional string treasureReward = 9; //异宝奖励
	optional int32 lineupId = 10; //npc守军阵容Id
}

//奇观信息
message WonderCell {
	required int32 wonderId = 1; //奇观配置Id
	required int32 wonderStatus = 2; // 奇观状态 1、和平 2、争夺 3、冒烟 4、冒火
	required int32 warStartTime = 3; // 开始争夺时间，和平时期指示下次争夺时间
	optional int32 warOverTime = 4; // 结束争夺时间，跟随部队占领
	optional PlayerNameInfo belongInfo = 5; //奇观归属者信息
	optional int64 groupId = 6; //占领的奇观行军组Id
	optional int64 commandPlayerId = 7; //指挥官玩家Id
	optional int32 maxReinforceNum = 8; //最大集结数量
	repeated MassForce forces = 9; //同联盟玩家，可查询到集结部队信息
	optional int32 amnestyCount = 12;//剩余天下大赦次数
}

// msgType = 112
// 客户端 -> 服务器
// 立即撤退回城
message CancelWalkAtOnce {
	required int64 forceId = 1; //部队ID
	required int64 playerId = 2; //部队所属玩家ID
}

message CancelWalkAtOnceRt {
	required int32 rt = 1;
	optional int64 forceId = 2; //部队ID
	optional int64 playerId = 3; //部队所属玩家ID
}

// msgType = 113
// 客户端 -> 服务器
// 领取任务奖励
message GetTaskReward {
	required int64 taskId = 1; //任务ID
}

message GetTaskRewardRt {
	required int32 rt = 1;
	optional int64 taskId = 2; //任务ID
}

// msgType = 114
// 客户端 -> 服务器
// 战斗模拟器
message TestFight {
	required int32 fightType = 1;
	required TestFightData atkTestFightData = 2;
	required TestFightData defTestFightData = 3;
}

message TestFightRt {
	required int32 rt = 1;
	optional string detailFightInfo = 2; //战报
}

//测试战斗数据
message TestFightData {
	repeated TestFightHero heros = 1;
	repeated TestFightSolider soliders = 2;
}

//测试英雄数据
message TestFightHero {
	required int32 id = 1;
	required int32 lv = 2;
	required int32 star = 3;
	required int32 awake = 4;
}

//测试士兵数据
message TestFightSolider {
	required int32 id = 1;
	required int32 num = 2;
}

// msgType = 115
// 客户端 -> 服务器
// 请求天下大势
message WorldTaskInfo {
}

message WorldTaskInfoRt {
	required int32 rt = 1;
	repeated WtInfo wt = 2; //所有任务信息
	repeated MyRewardInfo rewards = 3; //玩家当前领奖信息
}
message WtInfo {
	required int32 taskProto_id = 1; //模板ID
	required int32 taskNowState = 2; //当前状态 0-进行中 1-结束并且成功完成 2-结束但是并没有成功完成
	required int32 taskFinish = 3; //当前完成度
	required int32 endTime = 4; //结束时间
	required int32 finishTime = 5; //完成时间
	repeated string nowFinishInfo = 6; //当前完成者帮派名字集合
}

message MyRewardInfo {
	required int32 taskProto_id = 1; //模板ID
	required int32 canGetNum = 2; //可获得元宝数
	required int32 rewardState = 3; //领取状态  0-未领取 1-已领取
}

// msgType = 116
// 客户端 -> 服务器
// 领取天下大势奖励
message GetWorldTaskReward {
	required int32 protoId = 1; //要领取的模板ID
}

message GetWorldTaskRewardRt {
	required int32 rt = 1;
	optional int32 protoId = 2; //要领取的模板ID
}

// msgType = 117
// 客户端 -> 服务器
// 查看每周刷新的几个值的排行
message WeekTarget {
	required int32 targetType = 1; //要领取排行类型 1-地块数 2-耐久数 3-新建要塞数
}

message WeekTargetRt {
	required int32 rt = 1;
	repeated Wtarget targets = 2;
}
message Wtarget {
	required int32 va = 1; //具体值
	required string name = 2; //玩家名字
}

// msgType = 118
// 客户端 -> 服务器
// 查询某野外要塞/军营的守军恢复时间
//废弃
message RestoreCityEndTime {
	required int32 cityX = 1;
	required int32 cityY = 2;
}

message RestoreCityEndTimeRt {
	required int32 rt = 1;
	optional int32 endTime = 2; //恢复到点时间,如果不在恢复期间就返回zeroTime
	optional int32 yubeibing = 3; //上次变化后的预备兵数量
	optional int32 yubeibingTime = 4; //上次变化预备兵的时间
}

// msgType = 119
// 客户端 -> 服务器
// 新手引导
message GuideFin {
	optional int32 type = 1; // 新手引导类型(0-强制引导  1-被动引导)
	optional int32 guideId = 2; // 被动触发的新手引导模板id
}

message GuideFinRt {
	required int32 rt = 1;
	optional int32 type = 2; // 新手引导类型(0-强制引导  1-被动引导)
	optional int32 guideId = 3; // 被动触发的新手引导模板id
}

// msgType = 120
// 客户端 -> 服务器
// 领取章节任务奖励
message GetUnitTaskReward {
	required int32 unitTaskId = 1; // 章节ID
}
message GetUnitTaskRewardRt {
	required int32 rt = 1;
	optional int32 unitTaskId = 2; // 章节ID
}

// msgType = 130
// 客户端 -> 服务器
// 删除战报
message DelBattleReport {
	repeated int64 reportIds = 1; // 战报ID
}

message DelBattleReportRt {
	required int32 rt = 1;
}

// msgType = 131
// 客户端 -> 服务器
// 收藏战报
message ArchiveBattleReport {
	repeated int64 reportIds = 1; // 战报ID
	required int32 action = 2; // 1：收藏，2：取消收藏
}

message ArchiveBattleReportRt {
	required int32 rt = 1;
}

// msgType = 132
// 客户端 -> 服务器
// 设置为已读
message ReadedBattleReport {
	repeated int64 reportIds = 1; // 战报ID
}

message ReadedBattleReportRt {
	required int32 rt = 1;
}

// msgType = 170
// 客户端 -> 服务器
// 打开装备商城
message OpenEquipShop {
}

message OpenEquipShopRt {
	required int32 rt = 1;
	optional int32 cdOverSec = 4; //下次自动刷新时间
	repeated EquipShopInfo equipInfo = 5; //装备信息
}

message EquipShopInfo {
	required int32 equipId = 1; //装备ID
	required int32 address = 2; //位置
	required int32 buyState = 3; //购买状态  0-未购买  1-已买
	repeated EquipProps props = 4; //装备属性
}
message EquipSkillInfo {
	required int32 skillId = 1; //技能ID
	required int32 skillLv = 2; //技能等级
}

// msgType = 171
// 客户端 -> 服务器
// 刷新装备商城
message RefreshEquipShop {
}

message RefreshEquipShopRt {
	required int32 rt = 1;
	optional int32 cdOverSec = 2; //下次自动刷新时间
	repeated EquipShopInfo equipInfo = 3; //装备信息
}

// msgType = 172
// 客户端 -> 服务器
// 清除刷新装备商城CD
message ClearEquipShopCd {
}

message ClearEquipShopCdRt {
	required int32 rt = 1;
}

// msgType = 174
// 客户端 -> 服务器
// 购买装备
message BuyEquip {
	required int32 shopAddress = 1; // 要购买的物品在商店中的位置
}

message BuyEquipRt {
	required int32 rt = 1;
	optional int32 shopAddress = 2; // 购买的物品在商店中的位置
}

// msgType = 175
// 客户端 -> 服务器
// 出售装备
message SellEquip {
	repeated SellVo sellVos = 1; // 要卖掉的
}

message SellVo {
	required int64 equipId = 1; // 要卖掉的ID
	required int64 equipNum = 2; // 要卖掉的数量
}

message SellEquipRt {
	required int32 rt = 1;
}

// msgType = 176
// 客户端 -> 服务器
// 回购装备
message RestoreEquip {
	required int64 equipId = 1; // 要回购的装备的ID
}

message RestoreEquipRt {
	required int32 rt = 1;
}

// msgType = 183
// 客户端 -> 服务器
// 合成道具
message ItemCompound {
	required int32 compoundPropId = 1; // 合成表ID
	repeated int64 propIds = 2; // 合成散件ID
	required int32 num = 3; // 合成个数
}

message ItemCompoundRt {
	required int32 rt = 1;
}

// msgType = 184
// 客户端 -> 服务器
// 拆分道具
message ItemSplit {
	required int32 compoundPropId = 1; // 拆分表的ID
	required int32 num = 2; // 拆分个数
}

message ItemSplitRt {
	required int32 rt = 1;
}

//================================================================================== 新的建筑相关 ==================================================================================

// msgType = 190
// 客户端 -> 服务器
// 建造建筑
message CreateBuilding {
	required int64 cityId = 1; // 城池ID
	required int32 x = 2; // 建筑X坐标
	required int32 y = 3; // 建筑坐标
	required int32 buildingType = 4; // 建筑类型
	required int32 direction = 5; // 建筑方向
	required int32 isUseAccept = 6; // 是否使用收纳物品  0-否 1-是
}

message CreateBuildingRt {
	required int32 rt = 1;
	optional int64 cityId = 2; // 城池ID
	optional int64 buildingId = 3; // 建筑实例唯一ID
	optional int32 buildingType = 4; // 建筑类型
	optional int32 completeTime = 5; // 完成时间
	optional int32 direction = 6; // 建筑方向
	optional int32 x = 7; // 建筑X坐标
	optional int32 y = 8; // 建筑坐标
}

// msgType = 191
// 客户端 -> 服务器
// 建筑位置解锁
message UnlockBuilding {
	required int64 cityId = 1; // 城池ID
	required int64 buildingId = 2; // 建筑实例唯一ID
}

message UnlockBuildingRt {
	required int32 rt = 1;
	optional int64 cityId = 2; // 城池ID
	optional int64 buildingId = 3; // 建筑实例唯一ID
}

// msgType = 192
// 客户端 -> 服务器
// 建筑升级
message UpBuilding {
	required int64 cityId = 1; // 城池ID
	required int64 buildingId = 2; // 建筑实例唯一ID
	required int32 lvUpType = 3; // 升级类型 1-普通  2-秒
}

message UpBuildingRt {
	required int32 rt = 1;
	optional int64 cityId = 2; // 城池ID
	optional int64 buildingId = 3; // 建筑实例唯一ID
	optional int32 completeTime = 4; // 完成时间
}

// msgType = 193
// 客户端 -> 服务器
// 建筑取消升级
message CancelUpBuilding {
	required int64 cityId = 1; // 城池ID
	required int64 buildingId = 2; // 建筑实例唯一ID
}

message CancelUpBuildingRt {
	required int32 rt = 1;
	optional int64 cityId = 2; // 城池ID
	optional int64 buildingId = 3; // 建筑实例唯一ID
}

// msgType = 195
// 客户端 -> 服务器
// 建筑拆除
message DestroyBuilding {
	required int64 cityId = 1; // 城池ID
	required int64 buildingId = 2; // 位置ID
	required int32 destoryType = 3; //1-使用道具立即拆除 2-花费时间拆除
}

message DestroyBuildingRt {
	required int32 rt = 1;
	optional int64 cityId = 2; // 城池ID
	optional int64 buildingId = 3; // 位置ID
	optional int32 destroyTime = 4; // 拆除时间
}

// msgType = 196
// 客户端 -> 服务器
// 建筑取消拆除
message CancelDestroyBuilding {
	required int64 cityId = 1; // 城池ID
	required int64 buildingId = 2; // 建筑实例唯一ID
}

message CancelDestroyBuildingRt {
	required int32 rt = 1;
	optional int64 cityId = 2; // 城池ID
	optional int64 buildingId = 3; // 建筑实例唯一ID
}

// msgType = 197
// 客户端 -> 服务器
// 内城区域解锁
message UnlockBuildArea {
	required int64 cityId = 1; // 城池ID
	required int32 areaId = 2; // 区域ID
}

message UnlockBuildAreaRt {
	required int32 rt = 1;
	optional int64 cityId = 2; // 城池ID
	optional int32 areaId = 3; // 区域ID
}

// msgType = 198
// 客户端 -> 服务器
// 秒拆建筑
message QuickDestroyBuild {
	required int64 cityId = 1; // 城池ID
	required int64 buildingId = 2; // 建筑实例唯一ID
}

message QuickDestroyBuildRt {
	required int32 rt = 1;
	optional int64 cityId = 2; // 城池ID
	optional int64 buildingId = 3; // 建筑实例唯一ID
}

// msgType = 199
// 客户端 -> 服务器
// 移动建筑
message MoveBuilding {
	required int64 cityId = 1; // 城池ID
	required int64 buildingId = 2; // 建筑实例唯一ID
	required int32 newX = 3; // 新的坐标X
	required int32 newY = 4; // 新的坐标Y
	required int32 direction = 5; // 建筑朝向
}

message MoveBuildingRt {
	required int32 rt = 1;
	optional int64 buildingId = 2; // 建筑实例唯一ID
	optional int32 newX = 3; // 原来坐标X
	optional int32 newY = 4; // 原来坐标Y
	optional int32 direction = 5; // 建筑朝向
}

//================================================================================== 新的建筑相关 ==================================================================================

// msgType = 200
// 客户端 -> 服务器
// 打开商城
message OpenShop {
}


message OpenShopRt {
	required int32 rt = 1;
	repeated ShopInfo sInfo = 2; //商品信息
}

message ShopInfo {
	required int32 shopAddress = 1; //在市场中的位置
	required int32 shopType = 2; //商品类型  1-propsId  2-unitBaseId
	required int32 shopProtoId = 3; //模板唯一ID
	required int32 shopNum = 4; //数量
	required int32 buyState = 5; //购买状态  0-未购买  1-已买
	required int32 costType = 6; //价格类型 1-元宝  2-铜币
	required int32 costValue = 7; //价格值
}

// msgType = 201
// 客户端 -> 服务器
// 查看本日刷新次数
message GetTodayRefreshTime {
}


message GetTodayRefreshTimeRt {
	required int32 rt = 1;
	optional int32 todayTime = 2; //本日刷新次数
}

// msgType = 202
// 客户端 -> 服务器
// 刷新物品
message RefreshShop {
}


message RefreshShopRt {
	required int32 rt = 1;
	repeated ShopInfo sInfo = 2; //商品信息
}

// msgType = 203
// 客户端 -> 服务器
// 购买装备
message BuyShop {
	required int32 shopAddress = 1; // 要购买的物品在商店中的位置
}

message BuyShopRt {
	required int32 rt = 1;
	optional int32 shopAddress = 2; // 购买的物品在商店中的位置
}

// msgType = 250
// 客户端 -> 服务器
// 打开帮派商城
message OpenAllianceShop {
}


message OpenAllianceShopRt {
	required int32 rt = 1;
	repeated AllianceShopInfo sInfo = 2; //商品信息
	optional int32 todayReNum = 3; //本日已刷新次数
	optional int32 honor = 4; //荣誉值
}

message AllianceShopInfo {
	required int32 shopAddress = 1; //在市场中的位置
	required int32 propsId = 2; //模板唯一ID
	required int32 shopNum = 3; //数量
	required int32 buyState = 4; //购买状态  0-未购买  1-已买
	required int32 costValue = 5; //价格值
}

// msgType = 251
// 客户端 -> 服务器
// 刷新帮派商城物品
message RefreshAllianceShop {
}


message RefreshAllianceShopRt {
	required int32 rt = 1;
	repeated AllianceShopInfo sInfo = 2; //商品信息
	optional int32 honor = 3; //荣誉值
}

// msgType = 252
// 客户端 -> 服务器
// 购买装备
message BuyAllianceShop {
	required int32 shopAddress = 1; // 要购买的物品在商店中的位置
}

message BuyAllianceShopRt {
	required int32 rt = 1;
	optional int32 shopAddress = 2; // 购买的物品在商店中的位置
	optional int32 honor = 3; //荣誉值
}

// msgType = 296
// 客户端 -> 服务器
// 删除陌生人的聊天窗口和聊天消息
message DelStrangerChat {
	required int64 playerId = 1; // id
}

message DelStrangerChatRt {
	required int32 rt = 1;
}

// msgType = 297
// 客户端 -> 服务器
// 打开陌生人的聊天窗口
message OpenNewChatWindow {
	required int64 playerId = 1; // id
}

message OpenNewChatWindowRt {
	required int32 rt = 1;
}

// msgType = 298
// 客户端 -> 服务器
// 切换聊天窗口
message ChangeChatWindow {
	required int64 playerIdNew = 1; // new私聊id
	required int64 roomIdNew = 2;   // new聊天室id
}

message ChangeChatWindowRt {
	required int32 rt = 1;
}


// msgType = 299
// 客户端 -> 服务器
// 修改聊天室信息
message ChangeRoomInfo {
	required int64 roomId = 1; // 聊天室id
	required string newName = 2; // 新名字
}

message ChangeRoomInfoRt {
	required int32 rt = 1;
	optional int64 roomId = 2; // 聊天室id
	optional string newName = 3; // 新名字
}


// msgType = 300
// 客户端 -> 服务器
// 发送GM命令
message SendChat {
	required int32 type = 1; // 聊天频道   0世界 1国家 2联盟 3跟好友聊天  4群聊
	required int64 playerId = 2; // 聊天对象 
	required string message = 3; // 聊天对象内容
	required int32 messageType = 4; // 消息类型  1-普通消息  2-红包消息（暂时被砍） 3-表情  4-战报分享  5-集结  6-喇叭 7-分享坐标
	optional RedBagInfo redBagInfo = 5; // 红包参数内容	
	optional EasyFightInfo easyFightInfoId = 6; //简单战报
	optional int64 massId = 7; // 集结Id
	optional string massName = 8; // 集结名字

}

message SendChatRt {
	required int32 rt = 1;
}



// msgType = 301
// 客户端 -> 服务器
// 发送聊天信息
message SendChatMsg {
	required int32 type = 1; // 聊天频道   0世界 1国家 2联盟 3跟好友聊天  4群聊
	required int64 playerId = 2; // 聊天对象 
	required string message = 3; // 聊天对象内容
	required int32 messageType = 4;             // 消息类型  1-普通消息  2-红包消息（暂时被砍） 3-表情  4-战报分享  5-集结  6-喇叭  7-分享坐标
	optional RedBagInfo redBagInfo = 5;         // 红包参数内容	
	optional int64 easyFightInfoId = 6; //简单战报id
	optional int64 massId = 7; // 集结Id
	optional string massName = 8; // 集结名字
	optional int64 roomId = 9; // 聊天室id
	optional int32 x = 10; // 分享坐标x
	optional int32 y = 11; // 分享坐标y
}

message SendChatMsgRt {
	required int32 rt = 1;
}


message RedBagInfo{
	required string redBagTitle = 1; //红包标题 
	required int32 redBagNum = 2; //红包个数 
	required int32 redBagMoney = 3; //红包总金额 
}



// msgType = 303
// 客户端 -> 服务器
// 关闭哪个聊天面板
message CloseChat {
	required int64 chatRoomId = 1;
	required int64 playerId = 2;
}

message CloseChatRt {
	required int32 rt = 1;
}


// msgType = 304
// 客户端 -> 服务器
// 生成聊天室
message GetChatRoom {
	required string name = 1;
}

message GetChatRoomRt {
	required int32 rt = 1;
}

// msgType = 305
// 客户端 -> 服务器
// 进入聊天室界面查询
message ChatRoomInfo {
}

message ChatRoomInfoRt {
	required int32 rt = 1;
	repeated ChatRoomGeneral chatRooms = 2;
}


message ChatRoomGeneral{
	required int64 roomId = 1;
	required int64 lastChatTime = 2; // 这个聊天室最新的聊天时间
}

// msgType = 306
// 客户端 -> 服务器
// 拉人进入聊天室
message InRoomInfo {
	repeated int64 tarPlayerId = 1; // 对象玩家Id，可以同时拉多个
	required int64 chatRoomId = 2; // 聊天室唯一Id
}

message InRoomInfoRt {
	required int32 rt = 1;
	repeated ChatRoomMessage chatRoomMessage = 2;  // 新版聊天暂时保留
}

// msgType = 307
// 客户端 -> 服务器
// 群组聊天
message GroupChat {
	required int64 playerId = 1; //聊天对象id
	required int64 chatRoomId = 2; // 聊天室唯一Id
	required string message = 3; //内容
	required int32 messageType = 4; // 消息类型  1-普通消息  2-红包消息
	optional RedBagInfo redBagInfo = 5; // 红包参数内容	
}

message GroupChatRt {
	required int32 rt = 1;
}

// msgType = 308
// 客户端 -> 服务器
// 查询同盟所有成员
message AllianceMembers {
}

message AllianceMembersRt {
	required int32 rt = 1;
	repeated PlayerIds players = 2; //人
}

// msgType = 309
// 客户端 -> 服务器
// 转让群主
message ChatRoomAppoint {
	required int64 roomId = 1; // 转让的群id
	required int64 playerId = 2; // 新群主id
}

message ChatRoomAppointRt {
	required int32 rt = 1;
}

// msgType = 311
// 客户端 -> 服务器
// 离开当前聊天室（只是不在这个聊天室频道）
message LeaveChatRoom {
	required int64 roomId = 1; //离开当前聊天室关注的房间(若无则为0)
}

message LeaveChatRoomRt {
	required int32 rt = 1;
}

// msgType = 312
// 客户端 -> 服务器
// 群员退出群组聊天（彻底的离开聊天室）
message QuitChatRoom {
	required int64 roomId = 1;
}

message QuitChatRoomRt {
	required int32 rt = 1;
}

// msgType = 313
// 客户端 -> 服务器
// 查询联盟频道的聊天内容信息 (弃用)
message AllianceMessage {
	required int64 messageId = 1; // id
}

message AllianceMessageRt {
	required int32 rt = 1;
	repeated AllianceChatMessage allianceChatMessage = 2;
}

// msgType = 314
// 客户端 -> 服务器
// 查询组内成员
message QueryGroupMembers {
	required int64 groupId = 1; // id
}

message QueryGroupMembersRt {
	required int32 rt = 1;
	repeated GroupMember groupMember = 2;
}

message GroupMember {
	required int64 playerId = 1; // 玩家id
	required string playerName = 2; // 玩家名字
	required int32 protoId = 3; // 头像ID
	required int32 vipLv = 4; // 
	required int32 areaNo = 5; // 
	required string allianceShortName = 6; // 
	optional int64 fightValue = 7; // 
	required int32 castleLv = 8; //
	optional string playerShortName = 9; // 玩家昵称
}

// msgType = 315
// 客户端 -> 服务器
// 新增讨论组人员（对服务器没有批量加，客户端模拟批量）
message AddGroupChatMember {
	required int64 roomId = 1;
	required int64 playerId = 2; // id
}

message AddGroupChatMemberRt {
	required int32 rt = 1;
	optional GroupMember newMember = 2;
}

// msgType = 316
// 客户端 -> 服务器
// 删除讨论组人员（对服务器没有批量，客户端模拟批量）
message DelGroupChatMember {
	required int64 groupId = 1;
	required int64 playerId = 2; // id
}

message DelGroupChatMemberRt {
	required int32 rt = 1;
	optional int64 playerId = 2; // id
}

// msgType = 317
// 客户端 -> 服务器
// 删除讨论组
message DelGroupChat {
	required int64 groupId = 1;
}

message DelGroupChatRt {
	required int32 rt = 1;
}

// msgType = 318
// 客户端 -> 服务器
// 移除最近联系人聊表
message DelRecentChat {
	required int64 roomId = 1;
}

message DelRecentChatRt {
	required int32 rt = 1;
	optional int64 roomId = 2;
}

// msgType = 319
// 客户端 -> 服务器
// 获取指定聊天内容
message GetChatInfo {
	required int32 chatType = 1;  // 0世界 1国家 2联盟 3跟好友聊天  4群聊
	required int64 lastEndId = 2; //上次请求的内容的最大下标
	optional int64 roomId = 3;    // 聊天频道是聊天室时候的id
	optional int64 playerId = 4;  // 私聊的时候的玩家id
}

message GetChatInfoRt {
	required int32 rt = 1;
	repeated ChatInfo chatInfos = 2;
	optional int32 chatType = 3; // 聊天频道   0世界 1国家 2联盟 3跟好友聊天  4群聊
}

message ChatInfo {
	required int32 type = 1; //  聊天频道   0世界 1国家 2联盟 3跟好友聊天  4群聊
	required int32 isSystem = 2; // 是否是系统发布:0-玩家发布  1-系统发布
	required int32 country = 3; // 真实国家
	required string allianceName = 5; // 联盟名称
	required string allianceShortName = 6; // 联盟简称
	required string alliancePositions = 7; // 所属联盟官位
	required string player = 8; // 说话者名字
	required string playerShortName = 9; // 玩家昵称
	required int32 playerIcon = 10; // 头像模板id
	required Notice message = 11; // 内容
	required int32 sendTime = 12; // 发送时间
	required int64 id = 13; // 唯一ID
	required int64 playerId = 14; // 玩家ID
	optional int32 messageType = 15; // 消息类型  1-普通消息  2-红包消息（暂时被砍） 3-表情  4-战报分享  5-集结  6-喇叭 7-坐标 8-系统通知
	optional RedBagInfo redBagInfo = 16; // 红包参数内容
	optional int32 redBagState = 17; // 红包类型 1-可领取 2-已领取 3-已过期 4- 已领完
	optional int32 office = 18; //官职Id
	required int32 vipLv = 19; // vip等级
	required int32 areaNo = 20; // 服务器编号
	optional SimpleFightReport easyFightInfo = 21; // 战报分享
	optional SimpleMassInfo massInfo = 22; // 集结信息
	optional int64 chatRoomId = 23; // 聊天室Id
	optional int64 talkToId = 24; // 我的聊天对象id
	optional int32 x = 25; // 坐标x
	optional int32 y = 26; // 坐标y
}

message SimpleMassInfo{
	required int64 massId = 1; // 集结id
	required string massName = 2; // 集结名字
}



message ChatRoom {
	required int64 chatRoomId = 1;
	required string chatRoomName = 2;
	repeated int32 memberIcons = 3;  //  聊天室4个成员的头像作为聊天室的头像
	required int32 memberNum = 4;    //  聊天室人数
	required int64 playerId = 5;     // 群主id
	required int64 lastTalkTime = 6;     // 最后一次消息时间
	optional int64 lastReadTime = 7;     // 最后一次读取时间 只有3188和新增聊天室时候有效
}

// msgType = 320
// 客户端 -> 服务器
// 查询黑名单列表
message QueryBlackList {
}

message QueryBlackListRt {
	required int32 rt = 1;
	repeated FriendInfo blackPlayerInfo = 2;

}

// msgType = 321
// 客户端 -> 服务器
// 拉入黑名单
message InBlack {
	required int64 blackPlayerId = 1;
}

message InBlackRt {
	required int32 rt = 1;
	optional FriendInfo blackPlayerInfo = 2; // 黑名单信息
}

// msgType = 322
// 客户端 -> 服务器
// 移除黑名单
message OffBlack {
	required int64 blackPlayerId = 1;
}

message OffBlackRt {
	required int32 rt = 1;
	optional int64 blackPlayerId = 2;
}

// msgType = 323
// 客户端 -> 服务器
// 客户端请求服务器发送广播
message ShareBroadcast {
	required int32 chatType = 1; // 聊天频道   //0世界 1国家 2联盟 6-白虎团 7-青龙团 8-玄武团 9 朱雀团 100-群组聊
	required string lanId = 2; //
	optional int64 playerId = 3; // 聊天对象 ,只有聊天类型是群组聊天的时候才需要用到
	optional int64 roomId = 4; //  聊天室ID  , 只有聊天类型是群组聊天的时候才需要用到
	repeated string params = 5; // 聊天参数
}

message ShareBroadcastRt {
	required int32 rt = 1;
}

// msgType = 324
// 客户端 -> 服务器
// 领取红包
message GetRedBag {
	required int32 type = 1; // 红包位置 1-除了联盟频道外的频道  2-群聊私聊 3-联盟频道聊天
	required int64 valueId = 2;// 如果第一个字段是频道 这个字段表示频道类型  如果是群聊私聊,这里是房间ID
	required int64 redBagId = 3; // 红包ID
}

message GetRedBagRt {
	required int32 rt = 1;
	optional int64 getMoney = 2; // 领到的钱
	optional int64 playerId = 3; // 红包主人ID
	optional string playerName = 4; // 红包主人名字
	optional int32 playerPhoto = 5; // 红包主人头像
	optional string playerAllianceShortName = 6; // 红包主人联盟简称
	repeated RedBagGetInfo redBagGetInfos = 7;// 领取红包的信息
	optional int32 overTime = 8;// 红包过期时间
}

message RedBagGetInfo {
	required int32 order    = 1;       // 第几个领取的
	required int32 getMoney = 2;       // 获取到的金额
	required int32 getTime  = 3; // 领取时间
	required int64 playerId   = 4;     // 玩家ID
	required string playerName   = 5;     // 玩家名字
	required int32 playerPhoto   = 6;     // 玩家头像
}

// msgType = 325
// 客户端 -> 服务器
// 查询玩家发出的红包数据
message SendRedBagInfo {
}

message SendRedBagInfoRt {
	required int32 rt = 1;
	optional int64 allSendMoney = 2; // 一共发出去的钱
	optional int32 allSendNum = 3; // 一共发出去的红包数量
	repeated SendRedBagInfoVo sendRedBagInfoVos = 4; // 发出的红包的数据
}

message SendRedBagInfoVo {
	required int32 redBagType = 1;  // 1-普通红包  2-现金红包
	required int64 redBagAllMoney = 2; // 一共塞了多少钱
	required int64 redBagNowMoney = 3; // 当前剩余多少钱
	required int32 redBagAllNum = 4; // 一共多少个红包
	required int32 redBagNowNum = 5; // 当前剩余多少个未领取
	required int32 sendTime = 6; // 发出去的时间
	required int32 overTime = 7; // 过期时间 
	required int32 isBack   = 8; // 是否已经过期退还过了  0-否  1-是 
}

// msgType = 326
// 客户端 -> 服务器
// 查询玩家抢到的红包数据
message GetRedBagInfo {
}

message GetRedBagInfoRt {
	required int32 rt = 1;
	optional int64 allGetMoney = 2; // 一共抢到的钱
	optional int32 allGetNum = 3; // 一共抢到的红包数量
	optional int32 getMaxNum = 4; // 手气最佳次数
	repeated GetRedBagInfoVo getRedBagInfoVos = 5; // 发出的红包的数据
}

message GetRedBagInfoVo {
	required int32 redBagType = 1;  // 1-普通红包  2-现金红包
	required int64 getMoney = 2; // 抢多少钱
	required string playerName = 3; // 红包主人名
	required string playerAllianceShortName = 4; // 红包主人联盟简称
	required int32 playerPhoto = 5; // 红包主人头像
	required int32 getTime = 6; // 抢到的时间
	required int32 isMaxNum = 7; // 是否是手气最佳  0-否  1-是
}

// msgType = 327
// 客户端 -> 服务器
// 领取已经过期并且没有领完的红包
message SelectTimeOverRedBag {
}

message SelectTimeOverRedBagRt {
	required int32 rt = 1;
}

// msgType = 329
// 客户端 -> 服务器
// 群主转让
message GroupChatGiveMaster {
	required int64 groupId = 1;
	required int64 playerId = 2; // id
}

message GroupChatGiveMasterRt {
	required int32 rt = 1;
}

// msgType = 340
// 客户端 -> 服务器
// 内城铺路
message UpdateLandInfo {
	repeated UpdateLandGridInfo landGridInfo = 1; // 铺路的信息
}

message UpdateLandInfoRt {
	required int32 rt = 1;
	repeated UpdateLandGridInfo landGridInfo = 2; // 铺路的信息
}

message UpdateLandGridInfo {
	required int32 x = 1; // 坐标x
	required int32 y = 2; // 坐标y
	required int32 z = 3; // 坐标z
	required int32 landProto = 4; // 要改成的模版
}

// msgType = 341
// 客户端 -> 服务器
// 内城删除铺路
message CancelLand {
	repeated CancelLandVo landGridInfo = 1; // 删除铺路的信息
}

message CancelLandRt {
	required int32 rt = 1;
	repeated CancelLandVo landGridInfo = 2; // 删除铺路的信息
}

message CancelLandVo {
	required int32 x = 1; // 坐标x
	required int32 y = 2; // 坐标y
	required int32 z = 3; // 坐标z
}

// msgType = 342
// 客户端 -> 服务器
// 扩建
message TownExpend {
	required int32 x = 1; // 坐标x
	required int32 y = 2; // 坐标y
}

message TownExpendRt {
	required int32 rt = 1;
	optional int32 x = 2; // 坐标x
	optional int32 y = 3; // 坐标y
	optional int32 overTime = 4; // 扩建结束时间
}

// msgType = 343
// 客户端 -> 服务器
// 种菜
message Plant {
	required int64 buildId = 1; // 田建筑的唯一ID
	required int32 propId = 2; // 要种植的东西的propsId
}

message PlantRt {
	required int32 rt = 1;
	optional PlantVo plantVo = 2;
}

message PlantVo {
	required int64 id = 1; // 本条种植信息的唯一ID
	required int32 seedId = 2; // 种植的植物ID
	required int64 buildId = 3; // 所在建筑的唯一ID
	required int32 overTime = 4; // 成熟秒数
	required int32 isBig = 5; // 是否是大丰收  0-否 1-是
}

// msgType = 344
// 客户端 -> 服务器
// 收菜
message GetPlant {
	repeated int64 plantId = 1; // 种植信息的唯一IDs
}

message GetPlantRt {
	required int32 rt = 1;
	repeated int64 buildingId = 2; // 被收菜的建筑ID
}

// msgType = 345
// 客户端 -> 服务器
// 买菜
message BuySeed {
	required int32 seedId = 1; // 购买种子的props表的ID
	required int32 num = 2; // 购买数量
}

message BuySeedRt {
	required int32 rt = 1;
}

// msgType = 346
// 客户端 -> 服务器
// 收获扩建
message GetTownExpend {
	required int32 x = 1; // 坐标x
	required int32 y = 2; // 坐标y
}

message GetTownExpendRt {
	required int32 rt = 1;
	optional int32 x = 2; // 坐标x
	optional int32 y = 3; // 坐标y
}

// msgType = 347
// 客户端 -> 服务器
// 收获新建筑
message GetNewBuild {
	required int64 buildId = 1; // 建筑唯一ID
}

message GetNewBuildRt {
	required int32 rt = 1;
	optional int64 buildId = 2; // 建筑唯一ID
}

// msgType = 348
// 客户端 -> 服务器
// 收纳建筑
message AcceptBuild {
	required int64 buildId = 1; // 建筑唯一ID
}

message AcceptBuildRt {
	required int32 rt = 1;
	optional int64 buildId = 2; // 建筑唯一ID
}

// msgType = 349
// 客户端 -> 服务器
// 批量设计小镇内容
message UpdateTownInfo {
	repeated UpdateLandGridInfo updateLandGridInfos = 1; // 铺路的信息
	repeated CancelLandVo cancelLandVos = 2; // 删除铺路的信息
	repeated MoveBuildVo moveBuildVos = 3; // 建筑变动的信息
}

message UpdateTownInfoRt {
	required int32 rt = 1;
	repeated UpdateLandGridInfo updateLandGridInfos = 2; // 铺路的信息
	repeated CancelLandVo cancelLandVos = 3; // 删除铺路的信息
	repeated MoveBuildVo moveBuildVos = 4; // 建筑变动的信息
}

message MoveBuildVo {
	required int64 buildingId = 1; // 唯一ID
	required int32 newX = 2; // x
	required int32 newY = 3; // y
	required int32 direction = 4; // 建筑朝向
}

// msgType = 360
// 客户端 -> 服务器
// 定点迁城
message MoveCity {
	required int32 x = 1; // 玩家选中 迁移地X（地基）
	required int32 y = 2; // 玩家选中 迁移地Y（地基）
	required int32 costType = 4; // 迁城花费费消耗类型（1：定点迁城令 2钻石）
}

message MoveCityRt {
	required int32 rt = 1;
	optional int32 x = 3; //迁移地址目标
	optional int32 y = 4;
}

// msgType = 361
// 客户端 -> 服务器
// 拆除建筑
//废弃
message RemoveGroundBuild {
	required int64 castleId = 1; // 拆除对象建筑ID
}

message RemoveGroundBuildRt {
	required int32 rt = 1;
	optional int32 giveUpTime = 2;
	optional int64 castleId = 3; // 拆除对象建筑ID
}

// msgType = 362
// 客户端 -> 服务器
// 取消拆除地基
//废弃
message cancelRemoveGroundBuild {
	required int64 castleId = 1; // 取消的拆除对象建筑ID
}

message cancelRemoveGroundBuildRt {
	required int32 rt = 1;
	optional int64 castleId = 2; // 取消的拆除对象建筑ID
}

// msgType = 363
// 客户端 -> 服务器
// 查询迁城协议
//废弃
message queryTime {
	required int32 x = 1; // 地基X
	required int32 y = 2; // 地基Y
}

message queryTimeRt {
	required int32 rt = 1;
	optional int32 removeEndTime = 2; //拆除地基倒计时
	optional int32 groundBuildErr = 3; //地基所在郡 是否被敌方占领（0：地基可迁城 1：已被敌方占领  2；地基状态不对 3.玩家沦陷中）
	repeated MoveCityInfo moveCityInfo = 4; // 迁城信息查询
}

message MoveCityInfo {
	required int64 cityId = 1;
	required int32 resultType = 2; //0:可迁城   1.建筑升级中 2.部队外出中 3：资源不足
}

// msgType = 371
// 客户端 -> 服务器
// 玩家流浪
//废弃
message Stray {
	required int32 state = 1; // 流浪目标国家ID
}

message StrayRt {
	required int32 rt = 1; //返回值：
}

// msgType = 372
// 客户端 -> 服务器
// 查询前一次流浪时间
//废弃
message PreStray {
}

message PreStrayRt {
	required int32 rt = 1; //返回值：
	optional int64 StrayTime = 2; //前一次进行流浪的时间
	optional int32 flag = 3; //新玩家标识：1-新手期玩家流浪；0-非新手期玩家
}

// msgType = 373
// 客户端 -> 服务器
// 玩家选择所属州
message StrayState {
	required int32 state = 1;
}

message StrayStateRt {
	required int32 rt = 1;
}

// msgType = 400
// 客户端 -> 服务器
// 使用礼包码
message UseCode {
	required string codeKey = 1; //礼包码
}

message UseCodeRt {
	required int32 rt = 1; //返回值
}


//====================================邮件=============================================
// msgType = 450
// 客户端 -> 服务器
// 查询所有邮件
message AllMails {
	required int32 mailType = 1;//邮件类型 1、系统邮件 2、联盟邮件 3、收藏邮件
	required int32 page = 2;//页数，从1开始
}

message AllMailsRt {
	required int32 rt = 1;
	repeated MailInfo mailInfo = 2; //邮件
}

// msgType = 451
// 客户端 -> 服务器
// 阅读邮件
message ReadMail {
	required int64 mailId = 1; // 邮件id
}

message ReadMailRt {
	required int32 rt = 1;
}

// msgType = 452
// 客户端 -> 服务器
// 邮件一键已读
message ReadAllMail {
	required int32 mailType = 1;//邮件类型 1、系统邮件 2、联盟邮件 3、收藏邮件
}

message ReadAllMailRt {
	required int32 rt = 1;
	repeated int32 newMailNum = 2;//新邮件数量 数组数据依次是：系统邮件、联盟邮件、收藏邮件
}

// msgType = 453
// 客户端 -> 服务器
// 领取附件
message DrawMail {
	required int64 mailId = 1; // 邮件id
}

message DrawMailRt {
	required int32 rt = 1;
}

// msgType = 454
// 客户端 -> 服务器
// 附件一键领取
message DrawAllMail {
	required int32 mailType = 1;//邮件类型 1、系统邮件 2、联盟邮件 3、收藏邮件
}

message DrawAllMailRt {
	required int32 rt = 1;
	repeated int32 newMailNum = 2;//新邮件数量 数组数据依次是：系统邮件、联盟邮件、收藏邮件
}

// msgType = 455
// 客户端 -> 服务器
// 删除邮件
message DelMail {
	required int64 mailId = 1; // 邮件id
}

message DelMailRt {
	required int32 rt = 1;
}

// msgType = 456
// 客户端 -> 服务器
// 批量删除邮件
message BatchDelMail {
	required int32 mailType = 1;//邮件类型 1、系统邮件 2、联盟邮件 3、收藏邮件
	required int32 selectAll = 2;//是否全选 0、否 1、是
	repeated int64 mailIds = 3;//排除的邮件Id
}

message BatchDelMailRt {
	required int32 rt = 1;
	repeated int32 newMailNum = 2;//新邮件数量 数组数据依次是：系统邮件、联盟邮件、收藏邮件
}

// msgType = 457
// 客户端 -> 服务器
// 邮件收藏（无取消收藏的功能）
message MailSign {
	required int64 mailId = 1;
}

message MailSignRt {
	required int32 rt = 1;
}

// msgType = 458
// 客户端 -> 服务器
// 发送联盟邮件
message SendAllianceMail {
	required MailTitleAndCon mailTitleAndCon = 1; 	//邮件信息
}

message SendAllianceMailRt {
	required int32 rt = 1;
}

//=================================================================================



// msgType = 500
// 客户端 -> 服务器
// 查询联盟排行首页
message QueryAllianceRankFirst {
}

message QueryAllianceRankFirstRt {
	required int32 rt = 1;
	repeated QueryAllianceRankFirstVo queryAllianceRankFirstVos = 2;
}

message QueryAllianceRankFirstVo {
	required int32 rankType = 1;
	required QueryAllianceRankVo queryAllianceRankVos  = 2; 	// 排行内容
}

// msgType = 501
// 客户端 -> 服务器
// 查询世界个人排行首页
message QueryRankFirst {
}

message QueryRankFirstRt {
	required int32 rt = 1;
	repeated QueryRankFirstVo queryRankFirstVos = 2;
}

message QueryRankFirstVo {
	required int32 rankType = 1;
	required QueryRankInfoRt rankInfo = 2;
}


// msgType = 502
// 客户端 -> 服务器
// 查询排行
message QueryRank {
	required int32 type = 1; //1-个人势力排行 2-杀敌排行榜 3-竞技场排行 4-魔物积分排行榜
	required int32 page = 2;
	required int32 num = 3;
}

message QueryRankRt {
	required int32 rt = 1;
	optional int32 myRank = 2;
	repeated QueryRankInfoRt rankInfo = 3;
	optional int32 page = 4;
	optional int32 type = 5;
	optional int64 myValue = 6; //我的成绩
}

// msgType = 660
// 客户端 -> 服务器
// 抽宝箱
message ExtractChest {
	required int32 chestId = 1; // 宝箱编号
}

message ExtractChestRt {
	required int32 rt = 1;
	optional int32 chestId = 2; // 宝箱编号
	repeated ChestPrize prize = 3; // 奖励
}

// msgType = 665
// 客户端 -> 服务器
// 领取宝箱奖励
message ChestGainPrize {
	required int32 chestType = 1; // 宝箱类型 1免费宝箱 2击杀宝箱
}

message ChestGainPrizeRt {
	required int32 rt = 1;
	optional int32 chestType = 2;
	optional int32 prizeTime = 3;
	repeated ChestPrize prize = 4; // 奖励
}

// msgType = 667
// 客户端 -> 服务器
// 使用经验卡
message UseExpCard {
	required int64 cardId = 1; // 卡牌唯一编号
	required int64 heroId = 2; // 武将唯一编号
}

message UseExpCardRt {
	required int32 rt = 1;
	optional int64 cardId = 2; // 卡牌唯一编号
	optional int64 heroId = 3; // 武将唯一编号
}

// msgType = 668
// 客户端 -> 服务器
// 升级武将
message UpHeroLevel {
	required int64 heroId = 1; // 武将编号
	required int32 toLv = 2; // 升至等级
}

message UpHeroLevelRt {
	required int32 rt = 1;
}

// msgType = 669
// 客户端 -> 服务器
// 新抽武将
message DrawHero {
	required int32 drawType = 1; // 入口ID  配置表中的drawId字段
	required int32 drawNum = 2; // 抽卡次数 要么1要么5
}

message DrawHeroRt {
	required int32 rt = 1;
	repeated Dhero heros = 2;
}

message Dhero {
	required int32 heroProtoId = 1; // 抽到的武将卡模板
	required int32 heroStarLv = 2; // 抽到的武将卡星级
}

// msgType = 670
// 客户端 -> 服务器
// 武将合成
message HeroCompound {
	required int32 heroId = 1; // 要合成的武将模板ID
}

message HeroCompoundRt {
	required int32 rt = 1;
}

// msgType = 701
// 客户端 -> 服务器
// 加好友
message MakeFriend {
	required int64 tarPlayerId = 1; // 好友ID
}

message MakeFriendRt {
	required int32 rt = 1;
}

// msgType = 702
// 客户端 -> 服务器
// 删除好友
message RemoveFriend {
	repeated int64 tarPlayerId = 1; // 好友id
}

message RemoveFriendRt {
	required int32 rt = 1;
}

// msgType = 703
// 客户端 -> 服务器
// 创建分组
message MakeFriendGroup {
	required string groupName = 1; // 分组名字
}

message MakeFriendGroupRt {
	required int32 rt = 1;
	optional GroupInfo groupInfo = 2;
}

// msgType = 704
// 客户端 -> 服务器
// 移动至分组
message MoveInGroup {
	repeated int64 playerId = 1; //
	required int64 groupId = 2;
}

message MoveInGroupRt {
	required int32 rt = 1;
	optional int64 groupId = 2;
}

// msgType = 706
// 客户端 -> 服务器
// 删除分组
message RemoveGroup {
	required int64 groupId = 1; //
}

message RemoveGroupRt {
	required int32 rt = 1;
	optional int64 groupId = 2; //
}

// msgType = 707
// 客户端 -> 服务器
// 修改分组
message ChangeGroup {
	required int64 groupId = 1; //
	required string newName = 2;
}

message ChangeGroupRt {
	required int32 rt = 1;
	optional int64 groupId = 2; //
	optional string newName = 3;
}

// msgType = 708
// 客户端 -> 服务器
// 陌生人信息
message GainStangerInfo {
	required int64 stangerId = 1; 
}

message GainStangerInfoRt {
	required int32 rt  = 1;
}

message FriendInfo {
	required int64 playerId = 1; // 玩家id
	required string name = 2; // 玩家名字
	required int32 photoId = 3; // 对应的头像id
	optional int32 townState = 4; // 预留的内城状态  分为 什么可浇水 可收获什么的
	optional int64 fightValue = 5; // 预留- 战斗力
	required int32 castleLv = 6; // 城堡等级
	optional int32 skinType = 7; // 城堡皮肤类型
	required int32 vipLv = 8;
	required int32 areaNo = 9;
	required string allianceShortName = 10;
	optional int64 groupId = 11; // 群组id 没有为0
	required int64 lastTalkTime = 12; // 和我最后一次的聊天时间
	required int64 lastReadTime = 13; // 和我最后一次的阅读时间
	optional int32 msgNum = 14;       // 未读消息数
	required string shortName = 15;       // 玩家昵称
}

message GroupInfo {
	required int64 groupId = 1; // 群id
	required string groupName = 2; // 群组名字

}

// msgType = 709
// 客户端 -> 服务器
// 查询玩家
message QueryPlayerByName {
	required string playerName = 1; // 查询玩家名字
}

message QueryPlayerByNameRt {
	required int32 rt = 1;
	repeated QueryPlayerByNameVo queryPlayerByNameVos = 2; // 查询的个人信息
}

message QueryPlayerByNameVo {
	required int64 playerId = 1; //好友信息
	required string playerName = 2; //群组信息
	required int32 photoId = 3; // 头像图标id
	required int32 vipLv = 4; // 
	required int32 areaNo = 5; // 
	required string allianceShortName = 6; //联盟简称
	required int32 castleLv = 7; // 
	required string shortName = 8; // 
}

// msgType = 710
// 客户端 -> 服务器
// 同意或拒绝别人的添加好友请求
message HandleFriendApply {
	required int64 tarPlayerId  = 1 ; // 玩家ID：个人， 0:一键
	required int32 type = 2; // 1：同意，0：拒绝
}

message HandleFriendApplyRt {
	required int32 rt = 1;
}

// msgType = 711
// 客户端 -> 服务器
// 竞技场信息查询
message JjcQueryInfo {
}

message JjcQueryInfoRt {
	required int32 rt = 1; // 返回值
	optional int32 rank = 2; // 自己的排名
	optional int64 power = 3; // 自己的实力值
	optional int32 times = 4; // 挑战剩余次数
	optional int32 coldEndTime = 5; // 挑战冷却结束时间
	optional int32 maxRank = 6; // 历史最高排名
	optional int32 score = 7; // 本日积分
	repeated int32 drawRewards = 8; // 已领取奖励的模版ID（最高排名）
	repeated int32 scoreRewards = 9; // 本日已领取奖励的模版ID（积分）
	optional JjcChallengeInfo challenge1 = 10; // 挑战对手排名1（低，数值大）
	optional JjcChallengeInfo challenge2 = 11; // 挑战对手排名2（中，数值中）
	optional JjcChallengeInfo challenge3 = 12; // 挑战对手排名3（高，数值小）
	repeated HeroPos heroInfo = 13; //英雄信息
	repeated int32 achievementExchangeRewards = 14; // 已领取成就奖励的模版ID
	repeated JjcChallengeInfo tenRank = 15; // 前十名
	optional int32 buyTimes = 16;// 挑战购买次数
	optional int64 nextRefreshTime = 17; // 下一次挑战刷新时间
}

// 竞技场挑战对手信息
message JjcChallengeInfo {
	required int32 rank = 1; // 名次
	optional int64 playerId = 2; // 玩家ID
	optional string playerName = 3; // 玩家名字
	optional int64 aid = 4; // 联盟ID
	optional string aName = 5; // 联盟名称
	optional string aShortName = 6; // 联盟简称
	optional int32 photoProtoId = 7; // 头像ID
	optional int64 power = 8; // 实力值
	optional int32 protoRobotId = 9; // 机器人模板id
	repeated JjcHeroGenral jjcHeros = 10; // 对方武将数据
	optional int32 mainHeroId = 11; // 主英雄模板id
}


// msgType = 712
// 客户端 -> 服务器
// 刷新竞技场挑战对手
message JjcRefreshChallenge {
}

message JjcRefreshChallengeRt {
	required int32 rt = 1; // 返回值
	optional JjcChallengeInfo challenge1 = 2; // 挑战对手排名1（低，数值大）
	optional JjcChallengeInfo challenge2 = 3; // 挑战对手排名2（中，数值中）
	optional JjcChallengeInfo challenge3 = 4; // 挑战对手排名3（高，数值小） 
}


// msgType = 714
// 客户端 -> 服务器
// 领取奖励
message JjcGetRewards {
	repeated int32 ids = 1; // 奖励模版ID
}

message JjcGetRewardsRt {
	required int32 rt = 1; // 返回值
	repeated int32 ids = 2; // 奖励模版ID
}

// msgType = 715
// 客户端 -> 服务器
// 打开竞技场商店
message JjcOpenShop {
}


message JjcOpenShopRt {
	required int32 rt = 1;
	repeated JjcShopInfo nowInfos = 2; // 本赛季商品信息
	repeated JjcShopInfo hisInfos = 3; // 历史赛季商品信息
}

message JjcShopInfo {
	required int32 id = 1; // 商品ID (arenaShop.xml.id)
	required int32 type = 2; // 类型：1-道具 2-武将卡
	required int32 protoId = 3; // 道具ID或模版ID
	required int32 num = 4; // 数量
	required int32 resType = 5; // 购买货币类型
	required int32 resCost = 6; // 购买货币价格
	required int32 isBuy = 7; // 是否已经购买 1-已购买 0-未购买
}

// msgType = 716
// 客户端 -> 服务器
// 本赛季刷新竞技场商店
message JjcRefreshShop {
}


message JjcRefreshShopRt {
	required int32 rt = 1;
	repeated JjcShopInfo nowInfos = 2; // 商品信息
}

// msgType = 717
// 客户端 -> 服务器
// 购买竞技场商店
message JjcBuyShop {
	required int32 id = 1; // 商品ID (arenaShop.xml.id)
}

message JjcBuyShopRt {
	required int32 rt = 1;
	optional int32 id = 2; // 商品ID (arenaShop.xml.id)
}

// msgType = 718
// 客户端 -> 服务器
// 删除预设布阵
message JjcDelPlanGrids {
	required int32 type = 1; // 布阵类型 1~5: 预设布阵
}

message JjcDelPlanGridsRt {
	required int32 rt = 1; // 返回值
	optional int32 type = 2; // 布阵类型 1~5: 预设布阵
}

// msgType = 720
// 客户端 -> 服务器
// 竞技场挑战对手
message JjcFight {
	required int32 defRank = 1; // 攻击的排名
	required int64 defPlayerId = 2; // 攻击的玩家id，机器人是0
}

message JjcFightRt {
	required int32 rt = 1; // 返回值
	optional int32 fightResult = 2; // 战斗结果,同大地图战斗结果常量
	optional int32 nowRank = 3; // 玩家战斗后排名
	optional int32 maxRank = 4; // 历史最高排名
	optional int32 score = 5; // 本日积分
	optional JjcChallengeInfo challenge1 = 7; // 挑战对手排名1（低，数值大）
	optional JjcChallengeInfo challenge2 = 8; // 挑战对手排名2（中，数值中）
	optional JjcChallengeInfo challenge3 = 9; // 挑战对手排名3（高，数值小）
	repeated HeroFightReport report = 10;//战报内容
	repeated HeroInfoForReport heroInfos = 11;//英雄信息
	optional int32 oldRank = 12; // 打架之前的排名
	optional int64 exp = 13; // 获得经验
	optional string coinArenaNum = 14; // 竞技场战斗获得竞技币
	repeated int32 star = 15;//达成的战斗星数条件
	
}

// msgType = 721
// 客户端 -> 服务器
// 获取竞技场战报
message GetJjcFightInfo {
}

message GetJjcFightInfoRt {
	required int32 rt = 1; // 返回值
	repeated JjcFightInfo jjcFightInfos = 2;
}

message JjcFightInfo {
	required	int32 rankChange = 1; // 变化名次,正数,往上还是往下通过下面的战斗结果字段来判断,胜利 ,就是上升,失败,就是下降
	required	int32 fightResult= 2;  // 1-失败  2-胜利
	required	string enemyFace= 3;  // 敌人头像
	required	string enemyAlliance= 4;   // 敌人帮派名
	required	string enemyName= 5;  // 敌人名字
	required	int32 readState= 6;  //阅读状态  0-未读 1-已读
	required	int32 fightTime= 7; //战斗时间
	required	int64 fightInfoId= 8; //战报ID
	required	int32 fightType= 9; // 1-进攻  2-防守
}

// msgType = 722
// 客户端 -> 服务器
// 购买竞技场挑战次数
message BuyJjcCount {
}

message BuyJjcCountRt {
	required int32 rt = 1; // 返回值
	optional int32 buyTimes = 2;// 挑战购买次数
	optional int64 nextRefreshTime = 3; // 下一次挑战刷新时间
}

// msgType = 723
// 客户端 -> 服务器
// 秒竞技场挑战CD
message ClearJjcCd {
}

message ClearJjcCdRt {
	required int32 rt = 1; // 返回值
}



message JjcHeroGenral {
	required int32 heroProto = 1; //武将模板
	required int32 heroLv = 2; //武将等级
	required int32 heroStarLv = 3; //武将进阶次数
	required int32 awake = 4; //觉醒等级
	required int32 skill1 = 5; //技能1
	required int32 skill2 = 6; //技能2
	required int32 skill3 = 7; //技能3
	required int32 skill4 = 8; //技能4
	repeated HeroEquipVo heroEquipVos = 9; // 武将装备信息
}

message JjcHero {
	required int32 heroAddress = 1; // 阵形中的位置
	required int32 heroProto = 2; //武将模板
	required int32 sudu = 3; //武将速度
	required int32 bingli = 4; //武将兵力
	required int32 heroLv = 5; //武将等级
	required int32 heroStarLv = 6; //武将进阶次数
	required int32 atkW = 7; //攻击资质
	required int32 defW = 8; //防御资质
	required int32 hpW = 9; //生命资质
	required int32 gongcheng = 10; //攻城
	required int32 skill1 = 11; //技能1
	required int32 skill2 = 12; //技能2
	required int32 skill3 = 13; //技能3
	required int32 intW = 14; //内政资质
	required int32 baoji = 15; //暴击
	required int32 baojilv = 16; //暴击率
}

// msgType = 724
// 客户端 -> 服务器
// 查询某玩家竞技场防守阵容
message SelectJjcDefForce {
	required int32 selectRank = 1; // 要查询的名次
}

message SelectJjcDefForceRt {
	required int32 rt = 1; // 返回值
	optional int32 jjcDefForceNpcTeamId = 3; //机器人的配置,unitTeam表ID
	repeated JjcHeroGenral jjcHeros = 4; // 对方武将数据
	optional int64 fightValue = 5; //战斗力
    optional int64 defPlayerId = 6; //玩家Id
}

// msgType = 725
// 客户端 -> 服务器
// 领取排名累计奖励
message GetRankGold {
}

message GetRankGoldRt {
	required int32 rt = 1; // 返回值
}


// 商品信息
message ShopItemInfo{
	required int32 id = 1; // 槽位id
	required int32 protoId = 2; // 模板id
	required int32 haveBought = 3; // 是否购买过 0 没买过  1买过
}

// msgType = 726
// 客户端 -> 服务器
// 查看竞技场商品信息
message GetJjcShopInfo {
}

message GetJjcShopInfoRt{
	required int32 rt  =1; // 返回值
	optional int64 refreshTime  =2; // 上次的刷新时间 毫秒时间戳
	optional int32 times = 3 ; // 刷新的次数
	repeated  ShopItemInfo items =4; // 商店各项商品信息
}




// msgType = 727
// 客户端 -> 服务器
// 购买竞技场商品信息
message BuyJjcItem{
	required int32 id =1; // 购买的槽位商品id
}


message BuyJjcItemRt{
	required int32 rt =1;
}


// msgType = 728
// 客户端 -> 服务器
// 刷新竞技场商品信息
message RefreshJjcShopItem{
	
}


message RefreshJjcShopItemRt{
	required int32 rt  =1; // 返回值
	optional int32 times = 2 ; // 刷新的次数
	repeated  ShopItemInfo items =3; // 商店各项商品信息
}

// msgType = 729
// 客户端 -> 服务器
// 兑换竞技场商品信息
message ExchangeJjcAchievementReward {
	repeated int32 ids = 1; // 奖励模版ID
}

message ExchangeJjcAchievementRewardRt {
	required int32 rt = 1; // 返回值
	repeated int32 ids = 2; // 奖励模版ID
}

// msgType = 730
// 客户端 -> 服务器
// 查看竞技场每日三次的奖励
message CheckDayArenaReward {
}

message CheckDayArenaRewardRt {
	required int32 rt = 1; // 返回值
}


// msgType = 740
// 客户端 -> 服务器
// 获取vip奖励
message GainVipReward {
}

message GainVipRewardRt {
	required int32 rt = 1; // 返回值
}


// msgType = 802
// 客户端 -> 服务器
// 联盟创建
message AllianceCreate {
	required string allianceName = 1; //联盟名称
	required string allianceShortName = 2; //联盟简称
	required int32 allianceLan = 3; //联盟语种
}

message AllianceCreateRt {
	required int32 rt = 1;
}

// msgType = 804
// 客户端 -> 服务器
// 根据联盟ID申请加入联盟
message AllianceJoinById {
	required int64 allianceId = 1; //联盟ID
}

message AllianceJoinByIdRt {
	required int32 rt = 1; //返回值：805-玩家处于惩罚时间；812-联盟所属州与玩家所属州不同；
	optional int64 allianceId = 2; //联盟ID
	optional int64 quitTime = 3; //如果返回805，该字段为玩家上次退出联盟的时间戳
}

// msgType = 805
// 客户端 -> 服务器
// 玩家取消加入联盟申请
message AllianceJoinCancel {
	required int64 allianceId = 1; //联盟ID
}

message AllianceJoinCancelRt {
	required int32 rt = 1; //返回值：821-加入联盟请求不存在
	optional int64 allianceId = 2; //联盟ID
}

// msgType = 806
// 客户端 -> 服务器
// 处理加入联盟申请
message AllianceDealJoinReq {
	required int64 reqPlayerId = 1; //待处理玩家ID
	required int32 reqType = 2; //1-同意加入；2-拒绝加入
}

message AllianceDealJoinReqRt {
	required int32 rt = 1;
	optional int64 reqPlayerId = 2; //处理后玩家ID；
	optional int32 reqType = 4; //1-同意加入；2-拒绝加入
}

// msgType = 807
// 客户端 -> 服务器
// 设置允许申请联盟的势力最低值
message AllianceSetPowerLimit {
	required int64 powerLimit = 1; //设置允许申请联盟的战力
	required int64 canAddPower = 2; //设置可自动加入的战力
}

message AllianceSetPowerLimitRt {
	required int32 rt = 1;
	optional int64 powerLimit = 2; //设置允许申请联盟的战力
	optional int64 canAddPower = 3; //设置可自动加入的战力
}

// msgType = 808
// 客户端 -> 服务器
// 查询可加入联盟列表
message AllianceQueryList {
	required string allianceName = 1; // 联盟名字或者简称
	required int32 allianceLan = 2; // 所选语言
}

message AllianceQueryListRt {
	required int32 rt = 1; //返回值
	repeated AllianceQueryListInfo alliances = 2; //联盟列表
}

message AllianceQueryListInfo {
	required int64 id = 1; //联盟ID
	required string name = 2; //联盟名称
	required string shortName = 3; //联盟简称
	required int32 reservePlayers = 7; //当前招收人数
	required int64 powerValue = 9; //联盟势力值
	required int32 operate = 11; //可进行操作：0-申请加入；1-取消申请
	required int32 allianceLan = 12; // 所选语言
	required int64 canAddPower = 13; // 可直接加入战斗力值
	required int64 canReqPower = 14; // 可申请的战斗力值
	required int32 flagColor = 15; //旗帜的颜色模版ID
	required int32 flagStyle = 16; //旗帜的样式模版ID
	required int32 flagEffect = 17; //旗帜的图案模版ID
	required int64 alliancePower = 18; // 帮派战斗力
	required int32 giftLv = 19; //礼物等级
	required int32 areaNo = 20; // 区号
}

// msgType = 809
// 客户端 -> 服务器
//
message AllianceQueryInfo {
	required int64 allianceId = 1; // 联盟ID
}

message AllianceQueryInfoRt {
	required int32 rt = 1; //没有查询到联盟
	optional int64 id = 2; //联盟ID
	optional string name = 3; //联盟名称
	optional string shortName = 4; //联盟简称
	optional int64 playerId = 5; //盟主ID
	optional string playerName = 6; //盟主名称
	optional int32 reservePlayers = 12; //当前招收人数
	optional int32 limitPlayers = 13; //招收人数上限
	optional int32 powerValue = 14; //当前势力值
	optional string description = 23; //联盟公告
	optional int32 relationShipId = 28; //联盟关系：1-友好；2-敌对；3-中立
	optional int32 rewards = 29; //奖池金额
	optional int64 powerLimit = 30; //允许加入联盟的最低战斗力
	optional int32 hasCountyCity = 33; //联盟是否有占领的郡城：0-没有；1-有
	optional int32 flagColor = 35; //旗帜的颜色模版ID
	optional int32 flagStyle = 36; //旗帜的样式模版ID
	optional int32 flagEffect = 37; //旗帜的图案模版ID
	optional int32 setRelationEndTime = 38; //联盟外交变更冷却结束时间
	optional int64 canAddLimit = 43; // 可以直接加入的战斗力 如果<0就表示没开启这个功能
	optional string biaoyu = 44; //联盟标语
	optional int32 allianceLan = 45; //联盟语种
	optional int32 allianceInAreaNo = 46; //联盟所属的服务器编号
	optional int32 occupyWonderCount = 47;//占领的奇观数量
	optional int32 isApply = 48;// 是否已经申请过这个帮了 0-否  1-是
	optional int32 giftLv = 49; //礼物等级
	optional int32 fightRank = 50; //实力排行
}

// msgType = 810
// 客户端 -> 服务器
// 查询申请加入联盟的玩家信息
message AllianceQueryReqList {
}

message AllianceQueryReqListRt {
	required int32 rt = 1; //返回值
	optional int64 canAddPower = 2; // 可以直接加入的战斗力
	optional int64 powerLimit = 3; // 可申请的最低战斗力
	repeated AllianceQueryReqListInfo players = 4; //申请加入联盟的玩家列表
}

// msgType = 811
// 客户端 -> 服务器
// 玩家主动退出联盟
message AllianceQuit {
}

message AllianceQuitRt {
	required int32 rt = 1; //返回值：841-盟主退出联盟前，需要先进行禅让
}

// msgType = 812
// 客户端 -> 服务器
// 从联盟中剔除玩家
message AllianceRemovePlayer {
	required int64 removePlayerId = 1; //待剔除玩家ID
}

message AllianceRemovePlayerRt {
	required int32 rt = 1; //返回值：831-不能移除其他联盟玩家；899899-没有操作权限
	optional int64 removePlayerId = 2; //剔除玩家ID
}

// msgType = 813
// 客户端 -> 服务器
// 修改联盟公告
message AllianceSetDescpt {
	required string description = 1; //公告/标语内容
	required int32 desType = 2; // 设置类型 1-公告  2-标语
}

message AllianceSetDescptRt {
	required int32 rt = 1;
	optional string description = 2; //公告/标语内容
	optional int32 desType = 3; // 设置类型 1-公告  2-标语
}

// msgType = 814
// 客户端 -> 服务器
// 任命玩家在联盟中职位/盟主转让
message AllianceSetPos {
	required int64 setPlayerId = 1; //任命玩家ID
	repeated int32 position = 2; //任命职位：1-盟主 2-副盟主 3-指挥官 4-外交官 5-团长 6-普通成员 7-白虎成员 8-青龙成员 9-玄武成员 10-朱雀成员 11-白虎团长 12-青龙团长 13-玄武团长 14-朱雀团长
}

message AllianceSetPosRt {
	required int32 rt = 1; //返回值：832-没有任命权限；833-该职位玩家已达上限；834-盟主转让失败：盟主只能转让给副盟主；899-没有操作权限
	optional int64 setPlayerId = 2; //任命玩家ID
	repeated int32 positions = 3; //任命后的职位：1-盟主 2-副盟主 3-指挥官 4-外交官 5-团长 6-普通成员 7-白虎成员 8-青龙成员 9-玄武成员 10-朱雀成员 11-白虎团长 12-青龙团长 13-玄武团长 14-朱雀团长
}

// msgType = 815
// 客户端 -> 服务器
// 资源捐献
message AllianceDonate {
	required int64 woodQty = 1; //捐献木料数量
	required int64 ironQty = 2; //捐献铁矿数量
	required int64 stoneQty = 3; //捐献石料数量
	required int64 foodstuffQty = 4; //捐献粮食数量
}

message AllianceDonateRt {
	required int32 rt = 1; //返回值：851-玩家拥有的资源数量不足
	optional int32 level = 2; //联盟等级
	optional int32 exp = 3; //当前经验
	optional int32 maxExp = 4; //经验上限
	optional int32 powerValue = 5; //当前势力值
	optional int64 contribution = 6; //捐献资源获得的贡献值
}

// msgType = 816
// 客户端 -> 服务器
// 查询联盟成员信息
message AllianceQueryPlayer {
	required int64 allianceId = 1; //要查询的帮派的ID
}

message AllianceQueryPlayerRt {
	required int32 rt = 1; //返回值
	optional int32 onlineQty = 2; //在线玩家数
	repeated AllianceQueryPlayerInfo players = 3; //联盟成员玩家列表
	optional int64 allianceId = 4; //要查询的帮派的ID
}

// msgType = 817
// 客户端 -> 服务器
// 联盟解散
message AllianceDismiss {
}

message AllianceDismissRt {
	required int32 rt = 1; //返回值：899-没有操作权限
}

// msgType = 818
// 客户端 -> 服务器
// 设置联盟外交关系
message AllianceSetRelation {
	required int64 allianceId = 1; //联盟ID
	required int32 relationShipId = 2; //联盟关系：1-友好；2-敌对；3-中立
}

message AllianceSetRelationRt {
	required int32 rt = 1; //返回值：//返回值：861-设置联盟外交被拒绝：外交关系只能是中立、友好、敌对中任一种；862-联盟ID不存在；899-没有操作权限
	optional int64 allianceId = 2; //联盟ID
	optional string allianceName = 3; //联盟名称
	optional string allianceShortName = 4; //联盟简称
	optional int32 relationShipId = 5; //联盟关系：1-友好；2-敌对；3-中立
	optional int32 setRelationEndTime = 6; //联盟外交变更冷却结束时间
}

// msgType = 819
// 客户端 -> 服务器
// 查询联盟外交关系
message AllianceQueryRelation {
}

message AllianceQueryRelationRt {
	required int32 rt = 1; //返回值
	repeated AllianceQueryRelationInfo relations = 2; //联盟外交关系列表
}

// msgType = 820
// 客户端 -> 服务器
// 查询联盟日志
message AllianceQueryLog {
}

message AllianceQueryLogRt {
	required int32 rt = 1; //返回值
	repeated AllianceQueryLogInfo logs = 2; //联盟日志列表
}

// msgType = 821
// 客户端 -> 服务器
// 玩家设置联盟标记/集结请求
message AllianceSetMark {
	required int32 type = 1; //类型：1-联盟标记；2-集结请求
	required int32 x = 2; //坐标X
	required int32 y = 3; //坐标Y
	required string title = 4; //标题
	required string desp = 5; //描述
	required int32 pltAreaNo = 6; //服务器编号
}

message AllianceSetMarkRt {
	required int32 rt = 1; //返回值
	optional int32 endTime = 7; //下次可再标记的结束时间戳
}

// msgType = 822
// 客户端 -> 服务器
// 玩家设置联盟标记/集结请求
message AllianceSetRead {
	required int32 type = 1; //类型：1-联盟标记
}

message AllianceSetReadRt {
	required int32 rt = 1; //返回值
}

// msgType = 823
// 客户端 -> 服务器
// 删除联盟标记/集结请求
message AllianceRemoveMark {
	required int64 markId = 1; //类型：1-联盟标记；2-集结请求
}

message AllianceRemoveMarkRt {
	required int32 rt = 1; //返回值
}

// msgType = 824
// 客户端 -> 服务器
// 玩家反叛（脱离沦陷的一种方式：上缴一定资源）
message AllianceRebelRes {
	required int64 woodQty = 1; //捐献木料数量
	required int64 ironQty = 2; //捐献铁矿数量
	required int64 stoneQty = 3; //捐献石料数量
	required int64 foodstuffQty = 4; //捐献粮食数量
}

message AllianceRebelResRt {
	required int32 rt = 1; //返回值：871-玩家没有被沦陷、不需要上缴资源；872-玩家拥有的资源不足；873-资源不能多缴也不能少缴
	optional int64 qty = 2; //已交资源数
	optional int64 need = 3; //需要交纳资源数
}

// msgType = 825
// 客户端 -> 服务器
// 检测联盟名是否可用
message CheckAllianceName {
	required string name = 1; // 检测名
	required int32 nameType = 2; // 名字类型  1-名称 2-简称
}

message CheckAllianceNameRt {
	required int32 rt = 1;
	optional int32 errorType = 2;
}

// msgType = 828
// 客户端 -> 服务器
// 查询当前已交反叛资源数量
message AllianceQueryRebel {
}

message AllianceQueryRebelRt {
	required int32 rt = 1; //返回值
	optional int64 qty = 2; //已交资源数
	optional int64 need = 3; //需要交纳资源数
}

// msgType = 829
// 客户端 -> 服务器
// 玩家缴纳资源足够后，执行反叛操作
message AllianceRebelExec {
}

message AllianceRebelExecRt {
	required int32 rt = 1; //返回值
}

// msgType = 830
// 客户端 -> 服务器
// 发布联盟目标前，需要先加载联盟及所属州列表，在选择类型是【2-联盟战争】的联盟目标中使用
message AllianceQueryWithState {
}

message AllianceQueryWithStateRt {
	required int32 rt = 1; //返回值
	repeated AllianceQueryWithStateInfo alliances = 2; //简要的联盟列表
}

// msgType = 831
// 客户端 -> 服务器
// 查询联盟成员土地完成进度信息
message AllianceQueryMemCell {
}

message AllianceQueryMemCellRt {
	required int32 rt = 1; //返回值
	optional int32 protoId = 2; //模版ID（当前已达成的ID）
	optional int32 wood = 3; //木料加成
	optional int32 iron = 4; //晶矿加成
	optional int32 stone = 5; //石料加成
	optional int32 food = 6; //粮食加成
	optional int32 cell3 = 7; //3级地数量
	optional int32 cell4 = 8; //4级地数量
	optional int32 cell5 = 9; //5级地数量
	optional int32 cell6 = 10; //6级地数量
	optional int32 cell7 = 11; //7级地数量
	optional int32 cell8 = 12; //8级地数量
	optional int32 cell9 = 13; //9级地数量
}

// msgType = 832
// 客户端 -> 服务器
// 发布联盟目标
message AlliancePublishMission {
	required int32 type = 1; //联盟目标类型：1-攻城掠地:攻打NPC城池；2-联盟战争:对某个联盟发动战争
	optional int32 x = 2; //【1-攻城掠地】的NPC城池坐标X
	optional int32 y = 3; //【1-攻城掠地】的NPC城池坐标Y
	optional int64 aid = 4; //【2-联盟战争】的联盟ID
	required int32 over = 5; //结束时间，单位:小时
}

message AlliancePublishMissionRt {
	required int32 rt = 1; //返回值：881-结束时间只能是非0且小于72的整数；882-排名格式不正确；883-至少设置一个奖励排名；884-排名必须是连续的；885-奖池中奖励不足；886-发布任务处于冷却中
	repeated AllianceMissionInfo missions = 2; //联盟目标信息
	optional int32 nextPublishTime = 3; //下次可发布联盟目标时间
}

// msgType = 833
// 客户端 -> 服务器
// 删除联盟目标
message AllianceCloseMission {
	required int64 id = 1; //待删除的联盟目标ID
}

message AllianceCloseMissionRt {
	required int32 rt = 1; //返回值
	repeated AllianceMissionInfo missions = 2; //联盟目标信息
}

// msgType = 834
// 客户端 -> 服务器
// 查询联盟目标统计
message AllianceQueryMissionPro {
	required int64 id = 1; //联盟目标ID
}

message AllianceQueryMissionProRt {
	required int32 rt = 1; //返回值
	repeated AllianceMissionProInfo pros = 2; //联盟目标统计
	optional AllianceMissionProInfo myPro = 3; //自己的统计
}

// msgType = 835
// 客户端 -> 服务器
// 罢免玩家帮派职位
message AllianceRecallPos {
	required int64 setPlayerId = 1; //罢免玩家ID
	required int32 position = 2; //罢免职位：1-盟主 2-副盟主 3-指挥官 4-外交官 5-团长 6-普通成员 7-白虎成员 8-青龙成员 9-玄武成员 10-朱雀成员 11-白虎团长 12-青龙团长 13-玄武团长 14-朱雀团长
}

message AllianceRecallPosRt {
	required int32 rt = 1; //返回值：832-没有任命权限；833-该职位玩家已达上限；834-盟主转让失败：盟主只能转让给副盟主；899-没有操作权限
	optional int64 setPlayerId = 2; //罢免玩家ID
	repeated int32 positions = 3; // 罢免之后的职位列表
}

// msgType = 837
// 客户端 -> 服务器
// 更改联盟旗帜
message AllianceSetFlag {
	required int32 color = 1; //旗帜的颜色模版ID
	required int32 style = 2; //旗帜的样式模版ID
	required int32 effect = 3; //旗帜的图案模版ID
}

message AllianceSetFlagRt {
	required int32 rt = 1; //返回值
}

// msgType = 838
// 客户端 -> 服务器
// 查询已申请联盟列表
message QueryApplyAllianceList {
}

message QueryApplyAllianceListRt {
	required int32 rt = 1; //返回值
	repeated AllianceQueryListInfo alliances = 2; //联盟列表
}

// msgType = 841
// 客户端 -> 服务器
// 联盟捐献/换卡的需求列表
message AllianceExchange {
}

message AllianceExchangeRt {
	required int32 rt = 1; //返回值
	optional int32 nextTime = 2; //下次可发布需求的时间戳
	repeated AllianceExchangeDemandInfo demandInfos = 3; //玩家的需求信息
	optional int32 todayGiveNum = 4; //玩家本日已捐赠次数
}

// msgType = 842
// 客户端 -> 服务器
// 联盟捐献/换卡的发布需求
message AllianceExchangeDemand {
	required int32 protoId = 1; //模板ID
}

message AllianceExchangeDemandRt {
	required int32 rt = 1; //返回值
	optional int32 nextDemandTime = 2; //下次可发布捐卡请求时间
}

// msgType = 843
// 客户端 -> 服务器
// 联盟捐献/换卡的玩家捐献
message AllianceExchangeDonate {
	required int64 demandId = 1; //需求ID
	required int32 protoId = 2; //模板ID
}

message AllianceExchangeDonateRt {
	required int32 rt = 1; //返回值
	optional int32 id = 2; //捐卡表的ID
}

// msgType = 844
// 客户端 -> 服务器
// 查询请求捐卡信息
message AllianceQueryDemand {
}

message AllianceQueryDemandRt {
	required int32 rt = 1; //返回值
	optional AllianceQueryDemandInfo demand = 2; //需求信息
	repeated AllianceExchangeDetailInfo details = 3; // 捐卡明细
}

// msgType = 850
// 客户端 -> 服务器
// 联盟成员统计
message AllianceCount {
}

message AllianceCountRt {
	required int32 rt = 1; //返回值
	repeated AllianceCountInfo infos = 2; //查询统计
}

// msgType = 890
// 客户端 -> 服务器
// 联盟邮件主题列表
message AllianceQueryTopic {
}

message AllianceQueryTopicRt {
	required int32 rt = 1; //返回值
	repeated AllianceTopicInfo topics = 2; //联盟邮件的主题及回复记录（部分回复记录）
}

// msgType = 891
// 客户端 -> 服务器
// 发布联盟邮件主题
message AlliancePublishTopic {
	required int32 type = 1; //主题类型：40-联盟全体成员 41-白虎团邮件 42-青龙团邮件 43-玄武团邮件 44-朱雀团邮件
	required string title = 2; //发布标题
	required string message = 3; //发布内容
}

message AlliancePublishTopicRt {
	required int32 rt = 1; //返回值
	optional AllianceTopicInfo topic = 2; //联盟邮件的主题及回复
}

// msgType = 892
// 客户端 -> 服务器
// 对联盟邮件主题进行回复
message AllianceTopicReply {
	required int64 topicId = 1; //主题ID
	required string message = 2; //回复内容
}

message AllianceTopicReplyRt {
	required int32 rt = 1; //返回值
	optional int64 topicId = 2; //主题ID
	optional AllianceReplyInfo reply = 3; //返回的回复消息
}

// msgType = 893
// 客户端 -> 服务器
// 玩家滚动回复列表时: 请求历史回复内容
message AllianceTopicGetReply {
	required int64 topicId = 1; //主题ID
	required int64 replyId = 2; //客户端拥有的离现在最久的回复ID
}

message AllianceTopicGetReplyRt {
	required int32 rt = 1; //返回值
	optional int64 topicId = 2; //主题ID
	repeated AllianceReplyInfo replys = 3; //返回的历史回复记录（也可能只是部分回复记录）
}

// msgType = 894
// 客户端 -> 服务器
// 联盟邮件主题删除
message AllianceTopicDelete {
	required int64 topicId = 1; //主题ID
}

message AllianceTopicDeleteRt {
	required int32 rt = 1; //返回值
	optional int64 topicId = 2; //主题ID
}

// msgType = 895
// 客户端 -> 服务器
// 打开联盟外交界面,收到返回是1之后.如果界面有小红点,自己去掉
message AllianceOpenWaijiao {
	required int64 allianceId = 1; //联盟ID
}

message AllianceOpenWaijiaoRt {
	required int32 rt = 1; //返回值
	repeated AllianceWaijiaoInfo allianceWaijiaoInfos = 2; //json
	optional int32 todayNum = 3; //玩家本日次数
}

message AllianceWaijiaoInfo {
	required int32 flagColor = 1; //联盟旗帜的颜色
	required int32 flagStyle = 2; //联盟旗帜的样式
	required int32 flagEffect = 3; //联盟旗帜图案
	required int64 aid = 4; //联盟名字
	required string name = 5; //联盟ID
	required string shortName = 6; //联盟简称
	required int64 playerId = 7; //玩家ID
	required string playerName = 8; //玩家名
	required string playerPositions = 9; //玩家职位
	required int32 createTime = 10; //发布时间
	required string waijiaoInfo = 11; //内容
	required int32 mapPltAreaNo = 12; //发表时所在区号
	required int32 photoProtoId = 13; //头像
	required string nickName = 14; //玩家昵称
	required int64 waijiaoId = 15; // 留言唯一ID
}

// msgType = 896
// 客户端 -> 服务器
// 联盟外交
message WriteAllianceWaijiao {
	required int64 allianceId = 1; //联盟ID
	required string waijiaoInfo = 2; // 文本
}

message WriteAllianceWaijiaoRt {
	required int32 rt = 1; //返回值
	optional AllianceWaijiaoInfo allianceWaijiaoInfos = 2; //json
}

// msgType = 897
// 客户端 -> 服务器
// 设置联盟昵称
message AllianceNickName {
	required string nickName = 1; // 昵称
}

message AllianceNickNameRt {
	required int32 rt = 1; //返回值
	optional string nickName = 2; // 昵称
}

// msgType = 898
// 客户端 -> 服务器
// 修改联盟名称/简称/语种
message SetAllianceName {
	required int32 setType = 1; // 修改类型 1-名称  2-简称 3-语种
	required string name = 2; // 要修改成的内容
}

message SetAllianceNameRt {
	required int32 rt = 1; //返回值
	optional int32 setType = 2; // 修改类型 1-名称  2-简称 3-语种
	optional string name = 3; // 要修改成的内容
}

// msgType = 899
// 客户端 -> 服务器
// 弹劾盟主
message AllianceImpeach {
}

message AllianceImpeachRt {
	required int32 rt = 1; //返回值
}

// msgType = 900
// 客户端 -> 服务器
// 邀请玩家加入联盟
message AllianceInvite {
	required int64 playerId = 1; //邀请的玩家ID
}

message AllianceInviteRt {
	required int32 rt = 1; //返回值
}

// msgType = 901
// 客户端 -> 服务器
// 联盟礼物主界面
message AllianceGiftOpen {
}

message AllianceGiftOpenRt {
	required int32 rt = 1; //返回值
	optional AllianceBigGiftVo allianceBigGiftVo = 2; // 大礼物信息
	repeated AllianceGiftVo allianceGiftVos = 6; // 礼物列表
}

message AllianceBigGiftVo {
	required int32 bigGiftId = 2; // 左侧大礼物ID
	required int32 bigGiftExp = 3; // 左侧大礼物钥匙值
	required int32 giftLv = 4; // 上侧的礼物等级
	required int32 giftExp = 5; // 上侧的礼物经验
}

message AllianceGiftVo {
	required int64 onlyId = 1; // 礼物唯一ID
	required int32 giftId = 2; // 礼物模版ID
	required int32 isGet = 3; // 是否已领取
	required string giftInfo = 4; // 礼物内奖励
	required int32 overTime = 5; // 过期秒数
}

// msgType = 902
// 客户端 -> 服务器
// 领取联盟礼物
message AllianceGiftGet {
	repeated int64 onlyId = 1; // 礼物唯一IDS
}

message AllianceGiftGetRt {
	required int32 rt = 1; //返回值
	repeated int64 onlyId = 2; // 礼物唯一IDS
}

// msgType = 903
// 客户端 -> 服务器
// 删除联盟礼物
message AllianceGiftRemove {
	repeated int64 onlyId = 1; // 礼物唯一IDS
}

message AllianceGiftRemoveRt {
	required int32 rt = 1; //返回值
	repeated int64 onlyId = 2; // 礼物唯一IDS
}

// msgType = 904
// 客户端 -> 服务器
// 领取联盟活跃度礼物
message GetAllianceMissionGift {
}

message GetAllianceMissionGiftRt {
	required int32 rt = 1; //返回值
	optional string res = 2; //获得奖励
}

// msgType = 905
// 客户端 -> 服务器
// 赠送礼物给联盟成员
message GiftToAllianceMemeber {
	required int64 targetPlayerId = 1; //目标玩家Id
	required int32 giftId = 2; //礼物Id
	required int32 giftNum = 3; //礼物数量
}

message GiftToAllianceMemeberRt {
	required int32 rt = 1;
}

// msgType = 906
// 客户端 -> 服务器
// 打开联盟总动员主界面
message OpenAllianceCompetitionMain {
}

message OpenAllianceCompetitionMainRt {
	required int32 rt = 1;
	optional int32 overTime = 2;// 活动结束时间
	optional int32 nowScore = 3;//当前积分
	optional int32 joinPlayerNum = 4; // 参与的玩家数量
	optional AllianceCompetitionInfo myQuest = 5; // 我的总动员信息
	repeated AllianceCompetitionQuest quests = 6; // 联盟总动员任务信息
}

message AllianceCompetitionInfo {
	required int64 allianceCompetitionId             = 1; 	// 本次联盟总动员为哪个帮派效力
	required int32 allianceCompetitionTicket         = 2; 	//当前是否拥有联盟总动员门票 0-无 1-有
	required int32 allianceCompetitionGetTaskNum       = 6;         // 可领任务次数
	required int32 allianceCompetitionBuyTaskNum      = 7;           // 已购买任务次数
	required int32 allianceCompetitionRankLv             = 8; 	// 本次联盟总动员效力帮派的段位
}

message AllianceCompetitionQuest {
	required int32 index             = 1; 	// 任务排序
	required int32 questId         = 2; 	// 被领取之后就是0
	required int32 refTime       = 3;       // 任务刷新倒计时,只有任务ID是0的时候这个才不为zeroTime
}

// msgType = 907
// 客户端 -> 服务器
// 打开联盟总动员领取奖励界面
message OpenAllianceCompetitionReward {
}

message OpenAllianceCompetitionRewardRt {
	required int32 rt = 1;
	repeated AllianceCompetitionRewardsVo rewards = 2; // 玩家奖励信息
}

message AllianceCompetitionRewardsVo {
	required int32 score = 1; // 积分档
	required int32 isGet = 2; // 本阶段是否已经领过了 0-否 1-是
	repeated AllianceCompetitionRewardVo rs = 3; // 具体奖励
}

message AllianceCompetitionRewardVo {
	required int32 index = 1; // 位置
	required string reward = 2; // 奖励字符串
}

// msgType = 908
// 客户端 -> 服务器
// 领取联盟总动员任务
message GetAllianceCompetitionQuest {
	required int32 index             = 1; 	// 任务排序
}

message GetAllianceCompetitionQuestRt {
	required int32 rt = 1;
	optional int32 index             = 2; 	// 任务排序
}

// msgType = 909
// 客户端 -> 服务器
// 放弃联盟总动员任务
message RemoveAllianceCompetitionQuest {
}

message RemoveAllianceCompetitionQuestRt {
	required int32 rt = 1;
}

// msgType = 910
// 客户端 -> 服务器
// 购买联盟总动员任务
message BuyAllianceCompetitionQuest {
}

message BuyAllianceCompetitionQuestRt {
	required int32 rt = 1;
}

// msgType = 911
// 客户端 -> 服务器
// 领取任务奖励
message RewardAllianceCompetitionQuest {
}

message RewardAllianceCompetitionQuestRt {
	required int32 rt = 1;
}

// msgType = 912
// 客户端 -> 服务器
// 有权限的人取消掉任务
message CancelAllianceCompetitionQuest {
	required int32 index             = 1; 	// 任务排序
}

message CancelAllianceCompetitionQuestRt {
	required int32 rt = 1;
	optional int32 index             = 2; 	// 任务排序
}

// msgType = 913
// 客户端 -> 服务器
// 领取联盟总动员阶段奖励
message GetAllianceCompetitionReward {
	repeated GetAllianceCompetitionRewardVo getAllianceCompetitionRewardVos             = 1; 	// 任务排序
}

message GetAllianceCompetitionRewardVo {
	required int32 score             = 1; 	// 奖励积分档
	required int32 index             = 2; 	// 奖励位置
}

message GetAllianceCompetitionRewardRt {
	required int32 rt = 1;
}

// msgType = 914
// 客户端 -> 服务器
// 活动结束打开界面
message OpenAfterAllianceCompetition {
}

message OpenAfterAllianceCompetitionRt {
	required int32 rt = 1;
	optional int32 beforeRankLv             = 2; 	// 联盟参赛之前的段位
	optional int32 afterRankLv             = 3; 	// 联盟参赛之后的段位
	optional int32 score             = 4; 	// 本次参赛获取到的积分
}

// msgType = 915
// 客户端 -> 服务器
// 查询联盟内部数据排行榜
message QueryInAllianceRank {
	required int32 rankType = 1; // 排行榜类型
}

message QueryInAllianceRankRt {
	required int32 rt = 1;
	repeated QueryInAllianceRankVo queryInAllianceRankVos             = 2; 	// 排行内容
}

message QueryInAllianceRankVo {
	required int64 playerId = 1; // 玩家ID
	required string playerName = 2; // 玩家名字
	required string playerNickName = 3; // 玩家昵称
	required int64 areaNo = 4; // 玩家所处服务器
	required int32 photo = 5; // 玩家头像
	repeated int64 value = 6; // 内容
	repeated int32 pos = 7; // 职位
	required int64 power = 8; // 战斗力
	required int32 curentPos = 9; // 官职	
}

// msgType = 916
// 客户端 -> 服务器
// 查询联盟数据排行榜
message QueryAllianceRank {
	required int32 rankType = 1; // 排行榜类型  1-联盟战斗力  2-联盟杀敌数 3-联盟总动员帮派排行榜 4-联盟魔物积分排行
	required int32 page = 2;
	required int32 num = 3;
}

message QueryAllianceRankRt {
	required int32 rt = 1;
	repeated QueryAllianceRankVo queryAllianceRankVos             = 2; 	// 排行内容
	optional int32 page = 3;
	optional int32 myAllianceRank = 4; // 我帮派的排行  0表示不再前100
	optional int64 myAllianceScore = 5; // 我帮派的成绩
}

message QueryAllianceRankVo {
	required int64 allianceId = 1; //联盟ID
	required int32 flagColor = 2; //旗帜的颜色模版ID
	required int32 flagStyle = 3; //旗帜的样式模版ID
	required int32 flagEffect = 4; //旗帜的图案模版ID
	required string allianceName = 5; //联盟名称
	required string allianceShortName = 6; //联盟简称
	required int64 value = 7; //内容
	
}

// msgType = 917
// 客户端 -> 服务器
// 收藏/取消收藏联盟主题
message AllianceTopicSign {
	required int64 topicId = 1;
}

message AllianceTopicSignRt {
	required int32 rt = 1;
	optional int64 topicId = 2;
}

// msgType = 918
// 客户端 -> 服务器
// 查询占领的奇观信息
message QueryOccupyWonder {
}

message QueryOccupyWonderRt {
	required int32 rt = 1;
	repeated OccupyWonder occupyWonderInfo = 2;//奇观信息
}

message OccupyWonder {
	required int64 worldId = 1; //世界Id
	repeated int32 wonderIds = 2; //奇观配置Id
}

// msgType = 919
// 客户端 -> 服务器
// 删除联盟外交留言
message RemoveAllianceWaijiao {
	repeated int64 removeIds = 1;// 要删除的留言IDS
}

message RemoveAllianceWaijiaoRt {
	required int32 rt = 1;
	repeated int64 removeIds = 2;// 真正删除掉的留言IDS
}


// msgType = 950
// 客户端 -> 服务器
// 打开爬塔主界面
message OpenTower {
}

message OpenTowerRt {
	required int32 rt = 1; // 返回值
	optional int32 newPlayerStep = 2; // 新手级别层数
	optional int32 commonStep = 3; // 普通级别层数
	optional int32 eliteStep = 4; // 精英级别层数
	optional int32 towerNum = 5; // 巴别塔券数量
	optional int32 towerNumLastTime = 6; // 巴别塔券数量上次刷新时间
}

// msgType = 951
// 客户端 -> 服务器
// 打开购买爬塔券
message OpenBuyTowerNum {
}

message OpenBuyTowerNumRt {
	required int32 rt = 1; // 返回值
	optional int32 todayBuyNum = 2; // 今日购买次数
}

// msgType = 952
// 客户端 -> 服务器
// 购买爬塔券
message BuyTowerNum {
	required int32 buyNum = 1; // 购买次数
}

message BuyTowerNumRt {
	required int32 rt = 1; // 返回值
	optional int32 nowNum = 2; // 购买后券次数
	optional int32 todayBuyNum = 3; // 购买后今日购买次数
}

// msgType = 953
// 客户端 -> 服务器
// 爬塔战斗
message FightTower {
	required int64 qianfeng = 1; // 配置的前锋ID
	required int64 zhongjun = 2; // 配置的中军ID
	required int64 daying = 3; // 配置的大营ID
	required int32 difficulty = 4; // 要打的难度
	required int32 floor = 5; // 要打的层数
}

message FightTowerRt {
	required int32 rt = 1; // 返回值
	repeated int64 fightInfoIds = 2; //本次挑战的所有简单战报ID集合
}

// msgType = 971
// 客户端 -> 服务器
// 战报分享
message ShareFightInfo {
	repeated int64 eaysFightInfoId = 1; // 简单战报ID
}

message ShareFightInfoRt {
	required int32 rt = 1; // 返回值
	repeated OneFightInfo fightInfos = 2; //一批战报信息
}

message OneFightInfo {
	required EasyFightInfo easyFightInfo = 2; //简单战报
	required string detailFightInfo = 3; //详细战报
}

// msgType = 1000
// 客户端 -> 服务器
// 武将升级
message HeroLvUp {
	required int64 heroId = 1; // 升级武将ID
	repeated int64 materialIds = 2; // 被吃掉的卡ID
}

message HeroLvUpRt {
	required int32 rt = 1; // 返回值
	optional int64 heroId = 2; // 升级武将ID
}

// msgType = 1001
// 客户端 -> 服务器
// 武将升星
message HeroStarLvUp {
	required int64 heroId = 1; // 升星武将ID
	repeated int64 materialIds = 2; // 被吃掉的卡ID
}

message HeroStarLvUpRt {
	required int32 rt = 1; // 返回值
	optional int64 heroId = 2; // 升星武将ID
}

// msgType = 1002
// 客户端 -> 服务器
// 武将觉醒
message HeroAwake {
	required int64 heroId = 1; // 觉醒武将ID
}

message HeroAwakeRt {
	required int32 rt = 1; // 返回值
	optional int64 heroId = 2; // 觉醒武将ID
}

// msgType = 1003
// 客户端 -> 服务器
// 武将上锁
message HeroLock {
	required int64 heroId = 1; // 上锁武将ID
}

message HeroLockRt {
	required int32 rt = 1; // 返回值
	optional int64 heroId = 2; // 上锁武将ID
}

// msgType = 1004
// 客户端 -> 服务器
// 武将解锁
message HeroUnlock {
	required int64 heroId = 1; // 解锁武将ID
}

message HeroUnlockRt {
	required int32 rt = 1; // 返回值
	optional int64 heroId = 2; // 解锁武将ID
}

// msgType = 1005
// 客户端 -> 服务器
// 武将秒重伤
message HeroHurtOverAtOnce {
	repeated int64 heroId = 1; // 要秒的武将ID
}

message HeroHurtOverAtOnceRt {
	required int32 rt = 1; // 返回值
	repeated int64 heroId = 2; // 要秒的武将ID
}

// msgType = 1006
// 客户端 -> 服务器
// 更换领主
message UpdateMainHero {
	required int64 heroId = 1; // 要换成的武将ID
}

message UpdateMainHeroRt {
	required int32 rt = 1; // 返回值
	optional int64 heroId = 2; // 要换成的武将ID 就是新领主ID
}

// 英雄无敌版武将养成消息 1011 - 1020
// msgType = 1011
// 客户端 -> 服务器
// 武将升级
message InvincibleHeroLvUp {
	required int64 heroId = 1; // 要升级的武将ID
	required int32 lvNum = 2; // 要升级的数量
}

message InvincibleHeroLvUpRt {
	required int32 rt = 1; // 返回值
	optional int64 heroId = 2; // 要升级的武将ID
	optional int32 lvNum = 3; // 要升级的数量
}

// msgType = 1012
// 客户端 -> 服务器
// 武将升星
message InvincibleHeroStarLvUp {
	required int64 heroId = 1; // 要升级的武将ID
}

message InvincibleHeroStarLvUpRt {
	required int32 rt = 1; // 返回值
	optional int64 heroId = 2; // 要升级的武将ID
	optional int32 endTime = 3; // 升级完成时间 , 如果不需要时间,就传0
}

// msgType = 1013
// 客户端 -> 服务器
// 武将进阶
message InvincibleHeroSuperUp {
	required int64 heroId = 1; // 要升级的武将ID
}

message InvincibleHeroSuperUpRt {
	required int32 rt = 1; // 返回值
	optional int64 heroId = 2; // 要升级的武将ID
	optional int32 endTime = 3; // 升级完成时间 , 如果不需要时间,就传0
}

// msgType = 1014
// 客户端 -> 服务器
// 武将装备进阶
message InvincibleHeroEquipUp {
	required int64 heroId = 1; // 要升级的武将ID
	required int32 heroTrophiesId = 2; // 战利品包ID
}

message InvincibleHeroEquipUpRt {
	required int32 rt = 1; // 返回值
	optional int64 heroId = 2; // 要升级的武将ID
	optional int32 heroTrophiesId = 3; // 战利品包ID
	repeated HeroEquipVo heroEquipVos = 4; // 武将装备信息
}

// msgType = 1015
// 客户端 -> 服务器
// 武将技能升级
message InvincibleHeroSkillLvUp {
	required int64 heroId = 1; // 要升级的武将ID
	required int32 skillIndex = 2; // 要升级的技能位置(1-4)
}

message InvincibleHeroSkillLvUpRt {
	required int32 rt = 1; // 返回值
	optional int64 heroId = 2; // 要升级的武将ID
	optional int32 skillIndex = 3; // 要升级的技能位置(1-4)
}

// msgType = 1016
// 客户端 -> 服务器
// 取消武将升星
message InvincibleHeroCancelStarLvUp {
	required int64 heroId = 1; // 要取消的武将ID
}

message InvincibleHeroCancelStarLvUpRt {
	required int32 rt = 1; // 返回值
	optional int64 heroId = 2; // 要取消的武将ID
}

// msgType = 1019
// 客户端 -> 服务器
// 领取武将升星
message InvincibleHeroGetStarLvUp {
	required int64 heroId = 1; // 武将ID
}

message InvincibleHeroGetStarLvUpRt {
	required int32 rt = 1; // 返回值
}

// msgType = 1017
// 客户端 -> 服务器
// 取消武将进阶
message InvincibleHeroCancelSuperUp {
	required int64 heroId = 1; // 要取消的武将ID
}

message InvincibleHeroCancelSuperUpRt {
	required int32 rt = 1; // 返回值
	optional int64 heroId = 2; // 要取消的武将ID
}

// msgType = 1018
// 客户端 -> 服务器
// 武将兵团升级
message InvincibleHeroArmyLvUp {
	required int64 heroId = 1; // 要升级兵团的武将ID
	required int32 toLv = 2; // 要升级到的目标等级
}

message InvincibleHeroArmyLvUpRt {
	required int32 rt = 1; // 返回值
	optional int64 heroId = 2; // 要升级兵团的武将ID
}

// msgType = 1021
// 客户端 -> 服务器
// 穿装备
message OnEquip {
	required int64 equipId = 1; // 要穿的装备ID
	required int32 equipPart = 2; // 要穿的装备部位
	required int64 heroId = 3; // 穿戴的武将ID
}

message OnEquipRt {
	required int32 rt = 1; // 返回值
	optional int64 equipId = 2; // 要穿的装备ID
	optional int64 heroId = 3; // 穿戴的武将ID
}

// msgType = 1022
// 客户端 -> 服务器
// 脱装备
message OffEquip {
	required int64 equipId = 1; // 要脱的装备ID
	required int64 heroId = 2; // 脱装备的武将ID
}

message OffEquipRt {
	required int32 rt = 1; // 返回值
	optional int64 equipId = 2; // 要脱的装备ID
	optional int64 heroId = 3; // 脱装备的武将ID
}

// msgType = 1023
// 客户端 -> 服务器
// 装备强化
message LvUpEquip {
	required int64 equipId = 1; // 要强化的装备
	repeated int64 equipIds = 2; // 强化材料ID
}

message LvUpEquipRt {
	required int32 rt = 1; // 返回值
	optional int64 equipId = 2; // 要强化的装备
	optional int32 lv = 3; // 强化后等级
	repeated EquipProps props = 4; //装备属性
	optional int32 exp = 5; //强化后经验
}

// msgType = 1041
// 客户端 -> 服务器
// 推图战斗
message MissionFight {
	repeated MissionFightForceInfo missionFightForceInfos = 1; // 配置的前锋ID
}
message MissionFightForceInfo {
	required int64 qianfeng = 1; // 配置的前锋ID
	required int64 zhongjun = 2; // 配置的中军ID
	required int64 daying = 3; // 配置的大营ID
}

message MissionFightRt {
	required int32 rt = 1; // 返回值
	repeated int64 fightInfoIds = 2; //本次挑战的所有简单战报ID集合
}

// msgType = 1051
// 客户端 -> 服务器
// 升级科技
message ResearchLvUp {
	required int32 researchId = 1; // 要升级科技的ID 配置表的id字段
	required int32 researchType = 2; // 研发类型  1-普通研发  2-元宝补齐资源研发
}


message ResearchLvUpRt {
	required int32 rt = 1; // 返回值
	optional int32 researchId = 2; // 要升级科技的ID 配置表的id字段
	optional int32 researchType = 3; // 研发类型  1-普通研发  2-元宝补齐资源研发
}

// msgType = 1052
// 客户端 -> 服务器
// 取消科技
message CancelResearchLvUp {
	required int32 researchId = 1; // 要取消升级科技的ID  发的是科技的ID,与1051是不同的
}


message CancelResearchLvUpRt {
	required int32 rt = 1; // 返回值
}

// msgType = 1061
// 客户端 -> 服务器
// 秒加速
message ClearTime {
	required int32 clearType = 1; // 要加速的功能  1-科技 2-造兵 3-秒治疗兵 4-秒建筑 5- 秒锻造  6- 秒武将升星  7-秒武将升阶  8 -秒晋升  9-秒联盟宝藏  12-秒治疗兵(活动)
	required int32 clearPropsId = 2; // 加速的道具ID 如果这个跟下面的字段都传0的话,就认为是元宝秒所有CD
	required int32 clearPropsNum = 3; // 使用的加速道具的数量
	required int64 extend1 = 4; //扩展字段
}


message ClearTimeRt {
	required int32 rt = 1; // 返回值
	optional int32 clearType = 2; // 要加速的功能  1-科技 2-造兵 3-秒治疗兵 4-秒建筑 5- 秒锻造  6- 秒武将升星  7-秒武将升阶  8 -秒晋升  9-秒联盟宝藏
}

// msgType = 1062
// 客户端 -> 服务器
// 购买resShop表里的东西,资源包与时间加速道具
message BuyResShop {
	required int32 buyId = 1; // 要购买的物品,resShop表中的goodsId
	required int32 buyNum = 2; // 要购买的数量
}


message BuyResShopRt {
	required int32 rt = 1; // 返回值
}

// msgType = 1063
// 客户端 -> 服务器
// 使用道具
message UseProp {
	required int64 usePropId = 1; // 使用的物品唯一ID
	required int32 usePropNum = 2; // 使用的物品数量
	optional string extendVal = 3; // 扩展字段
}

message UsePropRt {
	required int32 rt = 1; // 返回值
	optional string resString = 2; //获得的奖励
}

// msgType = 1064
// 客户端 -> 服务器
// 购买并使用道具
message BuyAndUseProp {
	required int64 usePropId = 1; // 使用物品的配置ID
	required int32 usePropNum = 2; // 使用的物品数量
	optional string extendVal = 3; // 扩展字段
}

message BuyAndUsePropRt {
	required int32 rt = 1; // 返回值
	optional string resString = 2; //获得的奖励
}

// msgType = 1071
// 客户端 -> 服务器
// 打开联盟帮助界面
message OpenAllianceHelp {
}


message OpenAllianceHelpRt {
	required int32 rt = 1; // 返回值
	repeated MyHelpVo myHelpVo = 2; // 我的研发信息
	repeated AllianceHelpVo allianceHelpVos = 3; //帮助信息列表
	optional int64 todayGetAllianceCoin = 4; // 今日已获得的联盟币值
}

message MyHelpVo {
	required int64 helpId = 1; // 帮助信息的唯一ID
	required int32 helpType = 2; // 帮助类型  1-研发帮助
	required int32 maxHelpNum = 3; // 上限帮助次数
	required int32 nowHelpNum = 4; // 当前帮助次数
	optional int64 helpValue1 = 5; // 信息1  对于不同的帮助类型有不同的意义,如 研发帮助 这个字段表示科技ID
	optional int64 helpValue2 = 6; // 信息2  对于不同的帮助类型有不同的意义,如 研发帮助 这个字段表示科技等级
	optional int64 helpValue3 = 7; // 信息3  对于不同的帮助类型有不同的意义,如 研发帮助 这个字段暂无意义,预留
	optional int64 helpValue4 = 8; // 信息4  对于不同的帮助类型有不同的意义,如 研发帮助 这个字段暂无意义,预留
}

message AllianceHelpVo {
	required int64 helpId = 1; // 帮助信息的唯一ID
	required int32 helpType = 2; // 帮助类型  1-研发帮助
	required int32 maxHelpNum = 3; // 上限帮助次数
	required int32 nowHelpNum = 4; // 当前帮助次数
	required int64 helpPlayerId = 5; // 需要帮助的玩家ID
	required string helpPlayerName = 6; // 需要帮助的玩家名
	required int64 helpValue1 = 7; // 信息1  对于不同的帮助类型有不同的意义,如 研发帮助 这个字段表示科技ID
	required int64 helpValue2 = 8; // 信息2  对于不同的帮助类型有不同的意义,如 研发帮助 这个字段表示科技等级
	required int64 helpValue3 = 9; // 信息3  对于不同的帮助类型有不同的意义,如 研发帮助 这个字段暂无意义,预留
	required int64 helpValue4 = 10; // 信息4  对于不同的帮助类型有不同的意义,如 研发帮助 这个字段暂无意义,预留
	required int32 photoId = 11; // 玩家头像
}

// msgType = 1072
// 客户端 -> 服务器
// 登记帮助信息
message SendAllianceHelp {
	required int32 helpType = 1; // 帮助类型
	required int64 helpValue1 = 2; // 信息1  对于不同的帮助类型有不同的意义,如 研发帮助 这个字段表示科技ID
	required int64 helpValue2 = 3; // 信息2  对于不同的帮助类型有不同的意义,如 研发帮助 这个字段表示科技等级
	required int64 helpValue3 = 4; // 信息3  对于不同的帮助类型有不同的意义,如 研发帮助 这个字段暂无意义,预留
	required int64 helpValue4 = 5; // 信息4  对于不同的帮助类型有不同的意义,如 研发帮助 这个字段暂无意义,预留
}


message SendAllianceHelpRt {
	required int32 rt = 1; // 返回值
	optional int32 helpType = 2; // 帮助类型
}

// msgType = 1073
// 客户端 -> 服务器
// 进行帮助
message GoAllianceHelp {
	repeated AllianceHelpVo allianceHelpVos = 1; //要帮助的集合
}


message GoAllianceHelpRt {
	required int32 rt = 1; // 返回值
}

// msgType = 1081
// 客户端 -> 服务器
// 造兵
message MakeSolider {
	required int32 soliderId = 1; // 要造的ID
	required int32 makeType = 2; // 造兵类型  1-普通研发  2-元宝补齐资源研发
	required int32 makeNum = 3; // 造兵数量
}


message MakeSoliderRt {
	required int32 rt = 1; // 返回值
}

// msgType = 1082
// 客户端 -> 服务器
// 取消造兵
message CancelMakeSolider {
	required int32 soliderId = 1; // 要取消的ID
}


message CancelMakeSoliderRt {
	required int32 rt = 1; // 返回值
}

// msgType = 1083
// 客户端 -> 服务器
// 配兵
message ConfigSolider {
	repeated ConfigSoliderReq req = 1;
}

message ConfigSoliderReq {
	required int64 heroId = 1; // 配兵武将ID
	required int32 soliderId = 2; // 配兵ID
	required int32 soliderNum = 3; // 配兵数量
}


message ConfigSoliderRt {
	required int32 rt = 1; // 返回值
}

// msgType = 1084
// 客户端 -> 服务器
// 治疗兵
message CureSolider {
	required int32 cureType = 1; // 治疗类型  1-普通治疗  2-元宝补齐资源治疗
	repeated CureSoliderInfo cureSoliderInfo = 2;
	required int32 trapOrSolider = 3; // 类型  1-士兵  2-陷阱
	optional int32 eventCure = 4; // 活动治疗 1-活动治疗 其他-默认普通治疗
}

message CureSoliderInfo {
	required int32 soliderId = 1; // 要治疗的ID
	required int32 cureNum = 2; // 治疗数量
}


message CureSoliderRt {
	required int32 rt = 1; // 返回值
	optional int32 cureType = 2; // 治疗类型  1-普通治疗  2-元宝补齐资源治疗
}

// msgType = 1085
// 客户端 -> 服务器
// 取消治疗兵
message CancelCureSolider {
	optional int32 eventCure = 1;
}

message CancelCureSoliderRt {
	required int32 rt = 1; // 返回值
}

// msgType = 1086
// 客户端 -> 服务器
// 兵种晋升
message SoliderUp {
	required int32 soliderId = 1; // 要造的ID
	required int32 upype = 2; // 晋升类型  1-普通晋升  2-元宝补齐资源晋升
	required int32 upNum = 3; // 晋升数量
}

message SoliderUpRt {
	required int32 rt = 1; // 返回值
}

// msgType = 1087
// 客户端 -> 服务器
// 取消晋升
message CancelSoliderUp {
	required int32 soliderId = 1; // 要取消的ID
}

message CancelSoliderUpRt {
	required int32 rt = 1; // 返回值
}

// msgType = 1091
// 客户端 -> 服务器
// 上阵内政武将
message OnIntHero {
	required int64 heroId = 1; // 执政武将Id
	required int32 address = 2; // 执政槽位
}

message OnIntHeroRt {
	required int32 rt = 1; // 返回值
	optional int64 heroId = 2; // 执政武将Id
	optional int32 address = 3; // 执政槽位
}

// msgType = 1092
// 客户端 -> 服务器
// 下阵内政武将
message OffIntHero {
	required int64 heroId = 1; // 取消执政武将Id
}

message OffIntHeroRt {
	required int32 rt = 1; // 返回值
	optional int64 heroId = 2; // 执政武将Id
}

// msgType = 1101
// 客户端 -> 服务器
// 打开钻石商店
message OpenDiamondShop {
}

message OpenDiamondShopRt {
	required int32 rt = 1; // 返回值
	repeated OpenDiamondShopInfo shopInfo = 2;
}

message OpenDiamondShopInfo {
	required int32 bigType = 1; // 购买的物品所在页签
	required int32 smallType = 2; // 购买的物品所在位置
	required int32 buyNum = 3; // 已购买个数
}

// msgType = 1102
// 客户端 -> 服务器
// 购买钻石商店物品
message BuyDiamondShop {
	required int32 bigType = 1; // 购买的物品所在页签
	required int32 smallType = 2; // 购买的物品所在位置
	required int32 buyNum = 3; // 购买的物品数量
}

message BuyDiamondShopRt {
	required int32 rt = 1; // 返回值
	optional int32 bigType = 2; // 购买的物品所在页签
	optional int32 smallType = 3; // 购买的物品所在位置
	optional int32 buyNum = 4; // 购买的物品数量
}


message OpenAllianceResearchInfo {
	required int32 allianceResearchId = 1; // 联盟科技ID
	required int32 allianceResearchLv = 2; // 联盟科技等级
	required int32 allianceResearchExp = 3; // 联盟科技经验
	required int32 isFirst = 4; // 是否优先研发  0-否 1-是
}

// msgType = 1111
// 客户端 -> 服务器
// 设置帮派科技研发优先级
message SetAllianceResearchFirst {
	required int32 allianceResearchId = 1; // 联盟科技ID
}

message SetAllianceResearchFirstRt {
	required int32 rt = 1; // 返回值
	optional int32 allianceResearchId = 2; // 联盟科技ID
}

// msgType = 1112
// 客户端 -> 服务器
// 进行帮派科技研发
message GoAllianceResearch {
	required int32 allianceResearchId = 1; // 联盟科技ID
	required int32 goType = 2; // 研发类型  1-普通研发  2-钻石研发
	required int32 num = 3; // 研究次数
}

message GoAllianceResearchRt {
	required int32 rt = 1; // 返回值
	optional int32 allianceResearchId = 2; // 联盟科技ID
	optional int32 goType = 3; // 研发类型  1-普通研发  2-钻石研发
	optional int32 nowLv = 4; // 研发后等级
	optional int32 nowExp = 5; // 研发后经验
	optional int32 num = 6; // 研究次数
}

// msgType = 1113
// 客户端 -> 服务器
// 打开帮派科技界面
message OpenAllianceResearch {
}

message OpenAllianceResearchRt {
	required int32 rt = 1; // 返回值
	repeated AllianceResearchEasyInfo srInfo = 2;
}

message AllianceResearchEasyInfo {
	required int32 allianceResearchId = 1; // 联盟科技ID
	required int32 exp = 2; // 联盟科技经验
}

// msgType = 1151
// 客户端 -> 服务器
// 查询一块遗迹信息
message SetRelicCell {
	required int32 x = 1; // x
	required int32 y = 2; // y
}

message SetRelicCellRt {
	required int32 rt = 1; // 返回值
	optional int32 x = 2; // x
	optional int32 y = 3; // y
	optional string lastAllianceName = 4; // 上次被哪个联盟击杀
}

// msgType = 1152
// 客户端 -> 服务器
// 打开遗迹列表
message OpenRelic {
}

message OpenRelicRt {
	required int32 rt = 1; // 返回值
	repeated RelicBus relicBuss = 2;
}

message RelicBus {
	required int32 relicX = 2; // 前往的遗迹XY坐标
	required int32 relicY = 3; // 前往的遗迹XY坐标
	required int32 playerBuildLv = 4; // 团长炼金者协会建筑等级
	required int32 startX = 5; // 团长集合的XY坐标
	required int32 startY = 6; // 团长集合的XY坐标
	required int32 goTime = 7; // 开车时间
	required string membereInfos = 8; // 战斗成员信息
	required int64 relicBusId = 9; // 本车的ID
	required int64 mainPlayerId = 10; // 团长玩家ID
	required int32 relicLv = 11; // 遗迹等级
}

// msgType = 1154
// 客户端 -> 服务器
// 团长解散遗迹团
message DissolveRelicBus {
	required int64 relicBusId = 1; //解散团ID
}

message DissolveRelicBusRt {
	required int32 rt = 1; // 返回值
	optional int64 relicBusId = 2; //解散团ID
}

// msgType = 1155
// 客户端 -> 服务器
// 团长踢人
message KickMember {
	required int64 relicBusId = 1; //团ID
	required int64 kickPlayerId = 2; //被踢玩家ID
}

message KickMemberRt {
	required int32 rt = 1; // 返回值
}

// msgType = 1156
// 客户端 -> 服务器
// 打开联盟遗迹战报列表
message OpenAllianceRelicFightInfos {
	required int64 allianceId = 1; // 联盟ID
}

message OpenAllianceRelicFightInfosRt {
	required int32 rt = 1; // 返回值
	repeated RelicFightInfo relicFightInfos = 2;
}

message RelicFightInfo {
	required int64 relicFightInfoId = 1; // 遗迹战斗信息ID
	required string allianceName = 2; // 帮派名
	required string playerName = 3; // 团长名
	required int32 playerBuildLv = 4; // 团长炼金者协会建筑等级
	required int32 relicLv = 5; // 遗迹等级
	required int32 x = 6; // 遗迹坐标
	required int32 y = 7; // 遗迹坐标
	required int32 fightResult = 8; // 战斗结果
	required int32 joinPlayerNum = 9; // 参与人数
	required int32 fightTime = 10; // 战斗时间
}

// msgType = 1160
// 客户端 -> 服务器
// 研究时光之盒
message StudyTimeBox {
	required int32 timeBoxIndex = 1; // 槽位ID
}

message StudyTimeBoxRt {
	required int32 rt = 1; // 返回值
	optional int32 timeBoxIndex = 2; // 槽位ID
}

// msgType = 1161
// 客户端 -> 服务器
// 取消研究时光之盒
message CancelStudyTimeBox {
	required int32 timeBoxIndex = 1; // 槽位ID
}

message CancelStudyTimeBoxRt {
	required int32 rt = 1; // 返回值
	optional int32 timeBoxIndex = 2; // 槽位ID
}

// msgType = 1162
// 客户端 -> 服务器
// 领取研究时光之盒奖励
message GetStudyTimeBoxReward {
	required int32 timeBoxIndex = 1; // 槽位ID
}

message GetStudyTimeBoxRewardRt {
	required int32 rt = 1; // 返回值
	optional int32 timeBoxIndex = 2; // 槽位ID
	optional string timeBoxReward = 3; // 奖励
}

// msgType = 1163
// 客户端 -> 服务器
// 放弃时光之盒奖励
message RemoveStudyTimeBoxReward {
	required int32 timeBoxIndex = 1; // 槽位ID
}

message RemoveStudyTimeBoxRewardRt {
	required int32 rt = 1; // 返回值
	optional int32 timeBoxIndex = 2; // 槽位ID
}

// msgType = 1211
// 客户端 -> 服务器
// 升级天赋
message UpgradeTalent {
	required int32 talentId = 1; //天赋Id
	required int32 targetTalentLevel = 2; //天赋目标等级
}

message UpgradeTalentRt {
	required int32 rt = 1; // 返回值
	optional int32 talentId = 2; //天赋Id
	optional int32 targetTalentLevel = 3; //天赋目标等级
}

// msgType = 1212
// 客户端 -> 服务器
// 重置天赋
message ResetTalentPoint {
	required int32 talentType = 1; //天赋类别
	required int32 forceUse = 2; //该值不为0时，若包内无重置卡，则使用钻石强制使用
}

message ResetTalentPointRt {
	required int32 rt = 1; // 返回值
	optional int32 talentType = 2; //天赋类别
}

// msgType = 1216
// 客户端 -> 服务器
// 查询君主信息
message QueryKingInfo {
	required int64 playerId = 1; // 玩家ID
}

message QueryKingInfoRt {
	required int32 rt = 1; // 返回值
	repeated KingInfo kingInfos = 2; //信息
	optional int64 playerId = 3; // 玩家ID
}

message KingInfo {
	required int32 infoType = 1; //信息类别
	required int64 value = 2; //信息值
}

// msgType = 1217
// 客户端 -> 服务器
// 设置一个君主天赋预设
message SetTalentPlan {
	required int32 planId = 1; // 排序ID
	required string planName = 2; // 名字
	repeated UnlockedTalent plan = 3; // 预设内容

}

message SetTalentPlanRt {
	required int32 rt = 1; // 返回值
	optional int32 planId = 2; // 排序ID
	optional string planName = 3; // 名字
	repeated UnlockedTalent plan = 4; // 预设内容
}

// msgType = 1218
// 客户端 -> 服务器
// 删除一个君主天赋预设
message DelTalentPlan {
	required int32 planId = 1; // 排序ID
}

message DelTalentPlanRt {
	required int32 rt = 1; // 返回值
}

// msgType = 1219
// 客户端 -> 服务器
// 查询一个君主所有的天赋预设
message QueryTalentPlans {
}

message QueryTalentPlanVo {
	required int32 planId = 1; // 排序ID
	required string planName = 2; // 名字
	repeated UnlockedTalent plan = 3; // 预设内容
}

message QueryTalentPlansRt {
	required int32 rt = 1; // 返回值
	repeated QueryTalentPlanVo queryTalentPlanVo = 2;
}

// msgType = 1220
// 客户端 -> 服务器
// 套用一个君主天赋预设
message UseTalentPlan {
	required int32 planId = 1; // 排序ID
}

message UseTalentPlanRt {
	required int32 rt = 1; // 返回值
}

// msgType = 1221
// 客户端 -> 服务器
// 锻造/升级君主装备
message MakeKingEquip {
	required int32 makeProto = 1; // 制作表的ID
	required int64 equipId = 2; // 使用的材料装备唯一ID,首次制作的时候传0
	required int64 heiyaoshiId = 3; // 放入的黑曜石ID
	required int64 makeType = 4; // 制作类型 1-普通制造 2-花钻秒造
}

message MakeKingEquipRt {
	required int32 rt = 1; // 返回值
	optional int32 equipProto = 2; // 做出来的装备模版,用于立即制造
}

// msgType = 1222
// 客户端 -> 服务器
// 领取君主装备
message GetKingEquip {
	required int64 getId = 1; // 锻造队列里的ID,来源是进游戏与锻造时的推送
}

message GetKingEquipRt {
	required int32 rt = 1; // 返回值
	optional int32 equipProtoId = 2; 
	optional int64 equipId = 3; 
}

// msgType = 1223
// 客户端 -> 服务器
// 对顶级装备使用黑曜石
message UseHeiyaoshi {
	required int64 heiyaoshiId = 1; // 使用的黑曜石ID
	required int64 kingEquipId = 2; // 被使用的装备ID
}

message UseHeiyaoshiRt {
	required int32 rt = 1; // 返回值
	optional int64 kingEquipId = 2; // 被使用的装备ID
	optional int32 isSuccess = 3; // 是否黑曜石成功 0-失败  1-成功
	optional int32 nextUseTime = 4; // 下次使用黑曜石时间
	optional int32 nowEeuipProto = 5; // 使用后的装备模版 成功了的话是会变的
}

// msgType = 1224
// 客户端 -> 服务器
// 穿君主装备
message OnKingEquip {
	required int64 equipId = 1; // 穿的装备ID
	required int32 position = 2; // 穿的部位
}

message OnKingEquipRt {
	required int32 rt = 1; // 返回值
	optional int64 equipId = 2; // 穿的装备ID
	optional int32 position = 3; // 穿的部位
}

// msgType = 1225
// 客户端 -> 服务器
// 脱君主装备
message OffKingEquip {
	required int64 equipId = 1; // 穿的装备ID
}

message OffKingEquipRt {
	required int32 rt = 1; // 返回值
	optional int64 equipId = 2; // 穿的装备ID
}

// msgType = 1226
// 客户端 -> 服务器
// 拆解君主装备
message SplitKingEquip {
	required int64 equipId = 1; // 要分解的装备ID
}

message SplitKingEquipRt {
	required int32 rt = 1; // 返回值
	optional int64 equipId = 2; // 要分解的装备ID
	optional string res = 3; // 奖励
}

// msgType = 1227
// 客户端 -> 服务器
// 设置一个君主装备预设
message SetKingEquipPlan {
	required int32 planId = 1; // 排序ID
	required string planName = 2; // 名字
	repeated PlanVo plan = 3; // 预设内容
}

message PlanVo {
	required int64 equipId = 1; // 装备ID
	required int32 kingPort = 2; // 装备君主槽位
}

message SetKingEquipPlanRt {
	required int32 rt = 1; // 返回值
	optional int32 planId = 2; // 排序ID
	optional string planName = 3; // 名字
	repeated PlanVo plan = 4; // 预设内容
}

// msgType = 1228
// 客户端 -> 服务器
// 删除一个君主装备预设
message DelKingEquipPlan {
	required int32 planId = 1; // 排序ID
}

message DelKingEquipPlanRt {
	required int32 rt = 1; // 返回值
}

// msgType = 1229
// 客户端 -> 服务器
// 查询一个君主所有的装备预设
message QueryKingEquipPlans {
}

message QueryKingEquipPlanVo {
	required int32 planId = 1; // 排序ID
	required string planName = 2; // 名字
	repeated PlanVo plan = 3; // 预设内容
}

message QueryKingEquipPlansRt {
	required int32 rt = 1; // 返回值
	repeated QueryKingEquipPlanVo queryKingEquipPlanVos = 2;
}

// msgType = 1230
// 客户端 -> 服务器
// 套用一个君主装备预设
message UseKingEquipPlan {
	required int32 planId = 1; // 排序ID
}

message UseKingEquipPlanRt {
	required int32 rt = 1; // 返回值
	repeated KingEquip kingEquips = 2;// 装备信息
}

message KingEquip {
	required int64 equipId = 1; // 装备唯一ID
	required int32 equipProt = 2; // 穿戴在的部位
}

// msgType = 1231
// 客户端 -> 服务器
// 取消一个君主装备锻造的队列
message CancelMakeKingEquip {
	required int64 makeId = 1; // 锻造唯一ID
}

message CancelMakeKingEquipRt {
	required int32 rt = 1; // 返回值
	optional int64 makeId = 2; // 锻造唯一ID
}

// msgType = 1232
// 客户端 -> 服务器
// 给一个君主装备打卡片
message KingEquipAddCard {
	required int64 equipId = 1; // 操作的装备ID
	required int64 cardId = 2; // 要打上去的卡片唯一ID
	required int32 address = 3; // 要打在的位置
}

message KingEquipAddCardRt {
	required int32 rt = 1; // 返回值
}

// msgType = 1233
// 客户端 -> 服务器
// 取下君主装备上的卡片
message KingEquipOffCard {
	required int64 equipId = 1; // 操作的装备ID
	required int32 address = 2; // 要取下的位置
}

message KingEquipOffCardRt {
	required int32 rt = 1; // 返回值
}

// msgType = 1234
// 客户端 -> 服务器
// 卡片合成
message KingEquipCompoundCard {
	required int32 compound = 1; // 合成类型  1-背包内合  2-装备上的合
	required int64 id = 2; // 被操作对象的唯一ID  如果是背包内合 给任意一个宝石的唯一ID就可以  如果是装备上的合 就个装备ID
	required int32 address = 3; // 如果是装备上的合  给槽位序号,否则给0
	required int32 num = 4; // 合成的个数
}

message KingEquipCompoundCardRt {
	required int32 rt = 1; // 返回值
}

// msgType = 1251
// 客户端 -> 服务器
// 查询魔物信息
message QueryMonsterInfo {
	required int32 posX = 1; //坐标x
	required int32 posY = 2; //坐标y
}

message QueryMonsterInfoRt {
	required int32 rt = 1; // 返回值
	optional int32 atkCount = 2; //攻击次数
	optional int32 addedDamage = 3; //伤害加成
	optional int32 expireTime = 4; //过期时间
}

// msgType = 1252
// 客户端 -> 服务器
// 查询行军线详细信息
message QueryWalkLineDetailInfo {
	required int64 walkId = 1;
}

message QueryWalkLineDetailInfoRt {
	required int32 rt = 1;
	repeated ForceInWalk forces = 2;
}

message ForceInWalk {
	required int64 playerId = 1;
	required string playerName = 2;
	optional string allianceName = 3;
	optional string allianceShortName = 4;
	repeated HeroForWalk heros = 6;
	repeated SoliderForWalk soliders = 7;
}

message HeroForWalk {
	required int32 protoId = 1; //配置ID
	required int32 lv = 2; //等级
	required int32 starLv = 3; //星级
	required int32 awake = 4; //军阶
	optional int32 isLord = 5;//是否是领主
}

message SoliderForWalk {
	required int32 propId = 1;
	required int32 num = 2;
}

// msgType = 1253
// 客户端 -> 服务器
// 回城
message GoBackHome {
	required int64 groupId = 1;
}

message GoBackHomeRt {
	required int32 rt = 1;
}

// msgType = 1254
// 客户端 -> 服务器
// 发起集结
message StartMass {
	required int32 joinMassTime = 1; //加入集结时间
	required int32 runType = 2; //打人、占领城、打遗迹
	required int32 aimsX = 3; //目的地X
	required int32 aimsY = 4; //目的地Y
	required string massName = 5; //集结军名称
	repeated int64 heroIds = 6;
	repeated BattleSolider soliders = 7;
}

message StartMassRt {
	required int32 rt = 1;
}

// msgType = 1255
// 客户端 -> 服务器
// 取消集结
message CancelMass {
	required int64 massId = 1; //集结Id
}

message CancelMassRt {
	required int32 rt = 1;
}

// msgType = 1256
// 客户端 -> 服务器
// 查询增援
message QueryReinfore {
	required int64 playerId = 1;
}

message QueryReinforeRt {
	required int32 rt = 1;
	optional int32 canReinforceNum = 2; //可增援部队数量
	optional int32 nowReinforceNum = 3; //当前已增援数量
}

// msgType = 1257
// 客户端 -> 服务器
// 查询增援详细信息
message QueryDetailReinforce {
	required int64 playerId = 1;
}

message QueryDetailReinforceRt {
	required int32 rt = 1;
	repeated MassForce forces = 2; //增援
	repeated MassForce stationedForces = 3; //驻扎
}

// msgType = 1258
// 客户端 -> 服务器
// 查询联盟成员坐标
message QueryAllianceMemberPos {
	required int64 targetPlayerId = 1;
}

message QueryAllianceMemberPosRt {
	required int32 rt = 1;
	optional int32 posX = 2;
	optional int32 posY = 3;
}

// msgType = 1259
// 客户端 -> 服务器
// 集结成员遣返回家
message SendMassMemberHome {
	required int64 massId = 1;
	repeated int64 tarPlayerIds = 2;
}

message SendMassMemberHomeRt {
	required int32 rt = 1;
}

// msgType = 1260
// 客户端 -> 服务器
// 增援成员遣返回家
message SendReinforcePlayerHome {
	repeated int64 groupIds = 1;
}

message SendReinforcePlayerHomeRt {
	required int32 rt = 1;
}

// msgType = 1261
// 客户端 -> 服务器
// 遣散士兵
message DismissSolider {
	required int32 soliderId = 1;
	required int32 soliderNum = 2;
	required int32 dismissType = 3;//遣散类型 1、士兵 2、伤兵
	optional int32 eventCure = 4;
}

message DismissSoliderRt {
	required int32 rt = 1;
}

// msgType = 1262
// 客户端 -> 服务器
// 发布运输请求
message PublishTransportRequest {
	required string res = 1;
}

message PublishTransportRequestRt {
	required int32 rt = 1;
}

// msgType = 1263
// 客户端 -> 服务器
// 删除运输请求
message DeleteTransportRequest {
	required int64 transportReqId = 1; //运输请求Id
}

message DeleteTransportRequestRt {
	required int32 rt = 1;
}

// msgType = 1264
// 客户端 -> 服务器
// 奇观参战成员遣返回家
message SendWonderWarPlayerHome {
	required int32 wonderId = 1;
	repeated int64 playerIds = 2;
}

message SendWonderWarPlayerHomeRt {
	required int32 rt = 1;
}

// msgType = 1265
// 客户端 -> 服务器
// 设置玩家的出征预设部队
message SetForcePlan {
	required ForcePlanVo forcePlanVo = 1;
}

message ForcePlanVo {
	required int32 planId = 1; // 方案的物理顺序
	required string planName = 2;// 方案名字
	optional ForcePlanInfo forcePlanInfo = 3;// 方案内容
}

message ForcePlanInfo {
	repeated int64 heroId = 1; // 武将IDS
	repeated ForcePlanSolider forcePlanSoliders = 2; // 士兵信息
}

message ForcePlanSolider {
	required int32 soliderProtoId = 1; // 士兵模版ID
	required int32 soliderNum = 2;// 士兵数量
}

message SetForcePlanRt {
	required int32 rt = 1;
}

// msgType = 1266
// 客户端 -> 服务器
// 设置英雄战预设部队
message SetArmyPlan {
	required int32 bigTarget = 1; //大目标 1、竞技场 2、推图 3、魔物 
	required int32 smallTarget = 2; //小目标 竞技场进攻/防守 魔物1...N
	repeated HeroPos heroInfo = 3; //英雄信息
}

message SetArmyPlanRt {
	required int32 rt = 1;
}

message HeroPos {
	required int32 pos = 1;//位置
	required int64 heroId = 2;//英雄Id
}

// msgType = 1267
// 客户端 -> 服务器
// 查找英雄战预设部队
message GetArmyPlan {
	required int32 bigTarget = 1; //大目标 1、竞技场 2、推图 3、魔物
	required int32 smallTarget = 2; //小目标 竞技场进攻/防守 魔物1...N
}

message GetArmyPlanRt {
	required int32 rt = 1;
	repeated HeroPos heroInfo = 2; //英雄信息
}

// // msgType = 1300
// 客户端 -> 服务器
// 迁服
message MoveServer {
	required int64 worldId = 1; // 目标地图服的唯一ID
	required int32 x = 2; //目标地图服的目标坐标X
	required int32 y = 3; //目标地图服的目标坐标Y
}

message MoveServerRt {
	required int32 rt = 1; // 返回值
}

// // msgType = 1301
// 客户端 -> 服务器
// 迁服结束 创建新的playerSession并且初始化一些操作
message InitPlayerSessionAfterMoveServer {
	required int64 playerId = 1; // 玩家ID
}

message InitPlayerSessionAfterMoveServerRt {
	required int32 rt = 1; // 返回值
}

// // msgType = 1302
// 客户端 -> 服务器
// 迁服列表
message AllServerInfo {
}

message AllServerInfoRt {
	required int32 rt = 1; // 返回值
	repeated MoveServerInfoVo moveServerInfoVos = 2; // 服务器列表
}

// // msgType = 1302
// 客户端 -> 服务器
// 迁服列表
message MoveServerInfoVo {
	required int64 worldId = 1; // 服务器id
	required int32 areaId = 2; // 服务器区号
	required string areaName = 3; // 服务器名字
	required string kingName = 4;// 服务器国王名
	required int32 allianceAreaId = 5;// 王国所属联盟所在服
	required string allianceName = 6;// 王国所属联盟名字
	required string allianceShortName = 7;// 王国所属联盟简称
	required int32 serverOpenTime = 8;// 服务器开服时间
	required int32 wonderState = 9;// 奇观显示状态 1、和平 2、争夺 3、争夺失败状态(冒烟) 4、争夺胜利状态(冒火)
}

// // msgType = 1303
// 客户端 -> 服务器
// 请求我的战斗力在即将迁往的目标服务器上的排名
message MoveServerCost {
	required int64 worldId = 1; // 目标服务器id
}

message MoveServerCostRt {
	required int32 rt = 1; // 返回值
	required int32 rank = 2; // 排名 如果值为0表示100开外
}

// // msgType = 1311
// 客户端 -> 服务器
// 商店购买物品
message BuyShopTotal {
	required int32 id = 1; // shopTotal表ID
	required int32 num = 2; // 购买的数量
}

message BuyShopTotalRt {
	required int32 rt = 1; // 返回值
}

// // msgType = 1312
// 客户端 -> 服务器
// 挑战商品
message BuyLimitShopTotal {
}

message BuyLimitShopTotalRt {
	required int32 rt = 1; // 返回值
	repeated LimitGoodsVo LimitGoodsVos = 2; //
}

message LimitGoodsVo {
	required int32 shopId = 1;
	required int32 limitNumb = 2; // 限购数量
}


// // msgType = 1316
// 客户端 -> 服务器
// 召唤联盟BOSS
message SummonAllianceBoss {
	required int32 bossId = 1; // bossId
	required int32 x = 2; // 要召唤的坐标
	required int32 y = 3; // 要召唤的坐标
	required int32 score = 4; // 积分段
}

message SummonAllianceBossRt {
	required int32 rt = 1; // 返回值
	optional int32 bossId = 2; // bossId
	optional int32 score = 3; // 积分段
}

// // msgType = 1317
// 客户端 -> 服务器
// 查看联盟boss活跃度进度
message QueryAllianceBossLiveness {
}

message QueryAllianceBossLivenessRt {
	required int32 rt = 1; // 返回值
	optional int32 value = 2; // 活跃度
	repeated AllianceBossLiveness allianceBossLiveness = 3; // 召唤状态
}

message AllianceBossLiveness {
	required int32 score = 1; // 活跃度档
	repeated AllianceBossSummonInfo allianceBossSummonInfo = 2; // 该挡内的召唤情况
}

message AllianceBossSummonInfo {
	required int32 bossId = 1; //
	required int32 state = 2; // 0- 未召唤 1-已召唤
}

// // msgType = 1318
// 客户端 -> 服务器
// 查看所有被召唤的联盟boss
message QueryAllianceBoss {
}

message QueryAllianceBossRt {
	required int32 rt = 1; // 返回值
	repeated AllianceBossVo allianceBossVos = 2; //
}

message AllianceBossVo {
	required int32 bossId = 1;
	required int32 areaNo = 2; // 服务器编号
	required int32 x = 3;
	required int32 y = 4;
	required int32 overTime = 5; // 结束时间
}

// // msgType = 1319
// 客户端 -> 服务器
// 查看世界boss面板
message QueryWorldBoss {
}

message QueryWorldBossRt {
	required int32 rt = 1; // 返回值
	optional int32 bossId = 2;
	optional int32 x = 3;
	optional int32 y = 4;
	optional int32 nowHp = 5;
	optional int32 overTime = 6;
	optional int32 refTime = 7;
	repeated WorldBossRank ranks = 8; //
}

message WorldBossRank {
	required int64 playerId = 1;
	required string playerName = 2;
	required string allianceName = 3;
	required string allianceShortName = 4;
	required int64 hurt = 5;
}

// // msgType = 1320
// 客户端 -> 服务器
// 查看世界boss面板
message QueryWorldBossRank {
}

message QueryWorldBossRankRt {
	required int32 rt = 1; // 返回值
	repeated WorldBossRank ranks = 2; //
}

// // msgType = 1331
// 客户端 -> 服务器
// 领取玩家领奖背包物品
message GetPlayerRewardBag {
	required int64 id = 1; // 唯一ID
}

message GetPlayerRewardBagRt {
	required int32 rt = 1; // 返回值
}

// // msgType = 1332
// 客户端 -> 服务器
// 查询我参与过的活动历史记录
message SelectActivityHistory {
	required int32 activityType = 1; // 同策划配置的活动类型   1-个人 2-地狱 3-联盟
}

message SelectActivityHistoryRt {
	required int32 rt = 1; // 返回值
	repeated ActivityHistoryVo activityHistoryVos = 2; // 活动排名详细信息
}

message ActivityHistoryVo {
	required int32 activityProtoId = 1;// 参与过的活动模版ID
    required int32 overTime = 2;  // 活动结束时间
    required int64 myScore= 3; // 我的积分
    required int32 myRank= 4; // 我的排名
    required int64 rankId= 5; // 对应的排行榜记录行ID
}

// // msgType = 1333
// 客户端 -> 服务器
// 请求活动界面
message OpenActivity {
}

message OpenActivityRt {
	required int32 rt = 1; // 返回值
	repeated OpenActivityVo openActivityVos = 2;
}

message OpenActivityVo {
	required int32 activityId = 2; // 活动ID
	required int32 myRank = 3; // 我的排名
	required int32 castleLv = 4; // 我参与这个活动时的主堡等级
	optional int32 score = 6; // 只有联盟活动的时候会给,个人活动会刷的
}

// // msgType = 1334
// 客户端 -> 服务器
// 打开活动总界面,只请求联盟活动的数据
message SeleteAllianceActivityInfos {
}

message SeleteAllianceActivityInfosRt {
	required int32 rt = 1; // 返回值
	repeated AllianceActivityInfo allianceActivityInfoss = 2; // 活动ID
}

message AllianceActivityInfo {
	required int32 activityId = 1; // 活动模版ID
	required int32 score = 2; // 积分
	required int32 rank = 3; // 我帮的排行
}

// // msgType = 1335
// 客户端 -> 服务器
// 查询我参与过的活动的历史排行榜
message SelectActivityRank {
	required int32 activityType = 1; // 同策划配置的活动类型   1-个人 2-地狱 3-联盟
	required int64 rankId= 2; // 对应的排行榜记录行ID
}

message SelectActivityRankRt {
	required int32 rt = 1; // 返回值
	repeated PlayerActivityRankVo pActivityRankVos = 2; // 不是联盟排行的就读这个
	repeated AllianceActivityRankVo aActivityRankVos = 3; // 联盟排行的就读这个
}

message PlayerActivityRankVo {
	required int64 playerId = 1;// 玩家ID
    required string playerName = 2;  // 玩家名
    required string nickName= 3; // 玩家昵称
    required string allianceShortName= 4; // 联盟简称
    required int32 score= 5; // 积分记录
	required int32 photoId= 6; // 头像
}

message AllianceActivityRankVo {
	required int64 allianceId = 1;// 联盟Id
	required string allianceName = 2;// 联盟名
    required string shortName = 3;  // 联盟简称
    required int32 myScore= 4; // 积分记录
	required int32 flagColor = 5;//旗帜颜色
	required int32 flagStyle = 6;//旗帜样式
	required int32 flagEffect = 7;//旗帜图案
}

// // msgType = 1336
// 客户端 -> 服务器
// 查询正在进行中的活动的排行榜
message SelectNowRank {
	required int32 activityId = 1; // 活动模版ID
}

message SelectNowRankRt {
	required int32 rt = 1; // 返回值
	repeated PlayerActivityRankVo pActivityRankVos = 2; // 不是联盟排行的就读这个
	repeated AllianceActivityRankVo aActivityRankVos = 3; // 联盟排行的就读这个
}

// // msgType = 1351
// 客户端 -> 服务器
// 释放玩家
message PrisonFree {
	required int64 prisonPlayerId = 1; // 要释放的玩家ID
}

message PrisonFreeRt {
	required int32 rt = 1; // 返回值
	optional int64 prisonPlayerId = 2; // 要释放的玩家ID
}

// // msgType = 1352
// 客户端 -> 服务器
// 杀玩家
message KillPrison {
	required int64 prisonPlayerId = 1; // 要杀的玩家ID
	required int32 costOrNot = 2; // 是否消耗资源 0 不消耗(领主在可处决状态) 1消耗(领主在等待处决状态或者服毒状态)
}

message KillPrisonRt {
	required int32 rt = 1; // 返回值
	optional int64 prisonPlayerId = 2; // 要杀的玩家ID
}

// // msgType = 1353
// 客户端 -> 服务器
// 服毒自杀
message EatPoison {
	required int32 num = 1; // 要吃的蘑菇数量
}

message EatPoisonRt {
	required int32 rt = 1; // 返回值
}

// // msgType = 1354
// 客户端 -> 服务器
// 设置赎金
message SetRansom {
	required int64 prisonPlayerId = 1; // 要设置的玩家ID
	required int64 setNum = 2; // 设置的值
}

message SetRansomRt {
	required int32 rt = 1; // 返回值
	optional int64 prisonPlayerId = 2; // 要设置的玩家ID
	optional int64 setNum = 3; // 设置的值
}

// // msgType = 1355
// 客户端 -> 服务器
// 设置赏金
message SetRewardGold {
	required int64 setNum = 1; // 增加的值
}

message SetRewardGoldRt {
	required int32 rt = 1; // 返回值
	optional int64 setNum = 2; // 设置的值
}

// // msgType = 1356
// 客户端 -> 服务器
// 交钱赎人
message GoRansom {
	required int64 num = 1; // 赎金值
}

message GoRansomRt {
	required int32 rt = 1; // 返回值
}

// // msgType = 1357
// 客户端 -> 服务器
// 买活
message ResurgenceAtOnce {
}

message ResurgenceAtOnceRt {
	required int32 rt = 1; // 返回值
}

// // msgType = 1358
// 客户端 -> 服务器
// 领取复活
message GetResurgence {
}

message GetResurgenceRt {
	required int32 rt = 1; // 返回值
}

// // msgType = 1359
// 客户端 -> 服务器
// 查询所需吃的毒蘑菇数量
message CheckEatPoisonNum {
}

message CheckEatPoisonNumRt {
	required int32 rt = 1; // 返回值
	optional int32 num = 2; // 要吃的数量
}

// // msgType = 1360
// 客户端 -> 服务器
// 获得最大等级的监禁buff
message GainMaxPrisonLvBuff {
}

message GainMaxPrisonLvBuffRt {
	required int32 rt = 1; // 返回值
}


// // msgType = 1401
// 客户端 -> 服务器
// 领取在线礼包
message GetOnlineReward {
}

message GetOnlineRewardRt {
	required int32 rt = 1; // 返回值
	optional string nextReward = 2; // 下一档可领取的奖励
	optional int32 nextRewardOverTime = 3; // 下一档可领取的时间
	optional string getReward = 4; // 领取到的奖励
}

// // msgType = 1402
// 客户端 -> 服务器
// 打开在线礼包面板
message OpenOnlineReward {
}

message OpenOnlineRewardRt {
	required int32 rt = 1; // 返回值
	optional OnlineRewardInfo onlineRewardInfo = 2; // 玩家在线礼包信息
}

// // msgType = 1411
// 客户端 -> 服务器
// 打开联盟宝藏信息
message OpenAllianceTreasure {
}

message OpenAllianceTreasureRt {
	required int32 rt = 1; // 返回值
	optional int32 allianceTreasureNextRefTime = 2; // 联盟宝藏下次刷新时间
	repeated AllianceTreasure nowAllianceTreasures = 3; // 本次打开要删除的联盟宝藏数据
}

// // msgType = 1412
// 客户端 -> 服务器
// 领取联盟宝藏
message GetAllianceTreasureReward {
	required int64 treasureId = 1; // 宝藏唯一ID
}

message GetAllianceTreasureRewardRt {
	required int32 rt = 1; // 返回值
	optional int64 treasureId = 2; // 宝藏唯一ID
}

// // msgType = 1413
// 客户端 -> 服务器
// 刷新联盟宝藏
message RefreshAllianceTreasure {
}

message RefreshAllianceTreasureRt {
	required int32 rt = 1; // 返回值
	optional int32 allianceTreasureNextRefTime = 2; // 联盟宝藏下次刷新时间
	repeated AllianceTreasure nowAllianceTreasures = 3; // 本次打开要删除的联盟宝藏数据
}

// // msgType = 1414
// 客户端 -> 服务器
// 挖掘联盟宝藏
message GoAllianceTreasure {
	required int64 treasureId = 1; // 挖掘的宝藏唯一ID
}

message GoAllianceTreasureRt {
	required int32 rt = 1; // 返回值
	optional int64 treasureId = 2; // 挖掘的宝藏唯一ID
	optional int32 overTime = 3; // 完成时间
}



// msgType = 1451
// 客户端 -> 服务器
// 领取成就奖励
message ReceiveAchievementReward {
	required int64 id = 1;//成就唯一ID
}

message ReceiveAchievementRewardRt {
	required int32 rt = 1;
	repeated Achievement achieveInfo = 2; //下一阶成就
}

// msgType = 1452
// 客户端 -> 服务器
// 领取成就分享奖励
message ReceiveAchievementShareReward {
	required int32 protoId = 1;//成就模板ID
}

message ReceiveAchievementShareRewardRt {
	required int32 rt = 1;
	optional int32 protoId = 2;//成就模板ID
}

// msgType = 1453
// 客户端 -> 服务器
// 奖励界面
message GetAchievementInfo {
	required int32 type = 1;//类型
}

message GetAchievementInfoRt {
	required int32 rt = 1;
	repeated AchievementInfo achieveInfo = 2;
}

message AchievementInfo {
	required int64 id = 1; // 成就唯一ID
	required int32 protoId = 2; // 成就模板ID
	required int32 state = 3; // 成就状态 0-进行中 1-已完成 2-已领取奖励
	required int32 progress = 4; // 成就当前进度
}


// msgType = 1455
// 客户端 -> 服务器
// 设置国家官职
message SetCountryPosition {
	required int32 posId = 1;//官职Id
	required int64 targetPlayerId = 2;//册封玩家ID
}

message SetCountryPositionRt {
	required int32 rt = 1;
}

// msgType = 1456
// 客户端 -> 服务器
// 赏赐
message AwardAlliance {
	required int32 awardId = 1;//赏赐Id
	required int64 targetPlayerId = 2;//赏赐的玩家ID，可跨服
}

message AwardAllianceRt {
	required int32 rt = 1;
}

// msgType = 1457
// 客户端 -> 服务器
// 开启全国Buff
message OpenWholeCountryBuff {
	required int32 buffId = 1;//buff效果Id
}

message OpenWholeCountryBuffRt {
	required int32 rt = 1;
	optional int32 coolEndTime = 2;//冷却结束时间
}

// msgType = 1458
// 客户端 -> 服务器
// 天下大赦
message AmnestyWholeCountry {
}

message AmnestyWholeCountryRt {
	required int32 rt = 1;
}

// msgType = 1459
// 客户端 -> 服务器
// 修改国家公告
message EditorCountryNotice {
	required string notice = 1;//公告内容
}

message EditorCountryNoticeRt {
	required int32 rt = 1;
	optional string notice = 2;//公告内容
}

// msgType = 1460
// 客户端 -> 服务器
// 发送公告给盟主
message SendNoticeToLeaderOfAlliance {
}

message SendNoticeToLeaderOfAllianceRt {
	required int32 rt = 1;
}

// msgType = 1461
// 客户端 -> 服务器
// 查询官职信息
message QueryCountryPosition {
}

message QueryCountryPositionRt {
	required int32 rt = 1;
	repeated CountryPosition positionInfos = 2;//官职信息
}

message CountryPosition {
	required int32 posId = 1;//官职Id
	required PlayerNameInfo playerInfo = 2;//玩家信息
}

// msgType = 1462
// 客户端 -> 服务器
// 查询国家公告
message QueryCountryNotice {
}

message QueryCountryNoticeRt {
	required int32 rt = 1;
	optional string notice = 2;//公告内容
	optional int32 noticeCdTime = 3;//公告冷却时间
}

// msgType = 1463
// 客户端 -> 服务器
// 查询赏赐信息
message QueryAllianceAward {
}

message QueryAllianceAwardRt {
	required int32 rt = 1;
	repeated AllianceAwardInfo awardInfos = 2;
}

message AllianceAwardInfo {
	required int32 awardId = 1;//奖励模版ID
	repeated PlayerNameInfo awardPlayers = 2;//奖励的玩家
}

// msgType = 1464
// 客户端 -> 服务器
// 查询名人堂信息
message QueryFameHall {
}

message QueryFameHallRt {
	required int32 rt = 1;
	repeated FameHallInfo fameHallItems = 2;
}

message FameHallInfo {
	required PlayerNameInfo playerNameInfo = 1;
    required int32 occupyTime = 2;           // 占领奇观时长
    required int32 createTime = 3;           // 占领时间
}

// msgType = 1470
// 客户端 -> 服务器
// 开始推图战斗
message BeginInstanceFight {
	required int32 floorId = 1; // 要挑战的层数
}

message BeginInstanceFightRt {
	required int32 rt = 1;
}

// msgType = 1471
// 客户端 -> 服务器
// 推图战斗,战斗佩戴的武将等车神放结构
message InstanceFight {
	required int32 floorId = 1; // 要挑战的层数
	required int32 randSeed = 2; //随机种子
	required int32 fightResult = 3; // 挑战结果
	repeated HeroFightReport report = 5;//战报内容
}

message InstanceFightRt {
	required int32 rt = 1;
	optional int32 floorId = 2; // 要挑战的层数
	optional int32 fightResult = 3; // 挑战结果
	repeated int32 meetCondition = 4; // 满足的条件
	optional string reward = 6;//奖励信息
	repeated HeroInfoForReport heroInfos = 7;//英雄信息
}

// msgType = 1472
// 客户端 -> 服务器
// 推图扫荡
message InstanceWipe {
	required int32 floorId = 1; // 要扫荡的层数
	required int32 wipeNum = 2; // 要扫荡的次数
}

message InstanceWipeRt {
	required int32 rt = 1;
	optional int32 floorId = 2; // 要扫荡的层数
	optional int32 wipeNum = 3; // 要扫荡的次数
	repeated string instanceWipeRewards = 4; // 扫荡奖励
}

// msgType = 1473
// 客户端 -> 服务器
// 领取每章宝箱
message InstanceGetStarReward {
	required int32 chapterId = 1; // 要领取的章节ID
	required int32 starNum = 2; // 要领取的星数
}

message InstanceGetStarRewardRt {
	required int32 rt = 1;
	optional int32 chapterId = 2; // 要领取的章节ID
	optional int32 starNum = 3; // 要领取的星数
}

// msgType = 1474
// 客户端 -> 服务器
// 领取每章宝箱
message InstanceGetChapterReward {
	required int32 chapterId = 1; // 要领取的章节ID
}

message InstanceGetChapterRewardRt {
	required int32 rt = 1;
	optional int32 chapterId = 2; // 要领取的章节ID
}


// msgType = 1475
// 客户端 -> 服务器
// 购买推图体力
message BuyInstanceStrength {
}

message BuyInstanceStrengthRt {
	required int32 rt = 1;
}

// msgType = 1491
// 客户端 -> 服务器
// 设置攻打魔物配置
message SetHunterConfig {
	required int32 autoHunter = 1;//自动狩猎 0、否 1、是 
	required int32 autoUseEnergy = 2;//自动使用行动力 0、否 1、是
	required int32 bossType = 3; // 普通魔物 1  活动魔物 2
}

message SetHunterConfigRt {
	required int32 rt = 1;
	optional int32 autoHunter = 2;//自动狩猎 0、否 1、是 
	optional int32 autoUseEnergy = 3;//自动使用行动力 0、否 1、是
}

// msgType = 1492
// 客户端 -> 服务器
// 查询魔物伤害排行
message QueryHunterRank {
	required int32 posX = 1;//魔物坐标X
	required int32 posY = 2;//魔物坐标Y
}

message QueryHunterRankRt {
	required int32 rt = 1;
	repeated PersonalHunterRankInfo personalRankInfos = 2;//个人排行信息
	repeated AllianceHunterRankInfo allianceRankInfos = 3;//联盟排行信息
}

//个人击杀排行信息
message PersonalHunterRankInfo {
	required int32 rank = 1; //排行名次
	required string allianceShortName = 2;//联盟简称
	required int64 playerId = 3;//玩家ID
	required string playerName = 4;//玩家名称
	required int32 photoId = 5;//头像ID
	required int32 damageRate = 6;//伤害比例（万分比）
}

//联盟击杀排行信息
message AllianceHunterRankInfo {
	required int32 rank = 1; //排行名次
	required int64 allianceId = 2;//联盟ID
	required string allianceShortName = 3;//联盟简称
	required string allianceName = 4;//联盟名称
	required int32 damageRate = 5;//伤害比例（万分比）
	required int32 flagColor = 6;//旗帜颜色
	required int32 flagStyle = 7;//旗帜样式
	required int32 flagEffect = 8;//旗帜图案
}

// msgType = 1493
// 客户端 -> 服务器
// 邀请共同猎杀
message InviteTogetherHunter {
	required int32 posX = 1;//魔物坐标X
	required int32 posY = 2;//魔物坐标Y
}

message InviteTogetherHunterRt {
	required int32 rt = 1;
}

// msgType = 1494
// 客户端 -> 服务器
// 补充行动力
message SupplyEnergy {
}

message SupplyEnergyRt {
	required int32 rt = 1;
}

// msgType = 1495
// 客户端 -> 服务器
// 查询活动boss信息
message QueryActivityBossInfo {
}

message QueryActivityBossInfoRt {
    required int32 rt = 1;
    repeated ActivityBossInfo bossInfo = 2;
}

message ActivityBossInfo {
    required int32 monsterActivityId = 1; //这个是monsterActivity表的id字段
	required int32 bossHp = 2; // 血量	(合并allianceBossHp字段,根据BossId计算血量，再计算比例)
	required int32 unlockTime = 3;// 魔物解锁时间
}

// msgType = 1511
// 客户端 -> 服务器
// 换头像
message ChangeIcon {
	required int32 iconId = 1; // 要更换的头像id
}

message ChangeIconRt {
	required int32 rt = 1;  // 返回结果成功或者其他
	optional int32 iconId = 2; // 更换头像的id
}

// msgType = 1512
// 客户端 -> 服务器
// 查询全部头像
message QueryAllIcon {
}

message QueryAllIconRt {
	required int32 rt = 1;  // 返回结果成功或者其他
	repeated int32 iconIds = 2; // 全部拥有的头像的id表
}

// msgType = 1521
// 客户端 -> 服务器
// 进入后宅
message EnterGuildHouse {
	required int64 playerId = 1;  // 玩家id
}

message EnterGuildHouseRt {
	required int32 rt = 1;
	optional string name = 2;  // 后宅名称
	optional int32 comfort = 3;  // 舒适度
	optional int32 thumbedUpNew = 4;  // 新增被赞数
	repeated FurnitureInfo furnitures = 5;  // 当前后宅家具
}

message FurnitureInfo {
	required int64 id = 1;  // 家具唯一Id
	required int32 protoId = 2;  // 家具模板Id
	required int32 floorIdx = 3;  // 家具所在层 1-1F 2-2F
	required int32 x = 4;  // 家具x坐标
	required int32 y = 5;  // 家具y坐标
	required int32 direction = 6;  // 家具朝向
	required int32 startTime = 7; // 收集开始时间
	required int32 endTime = 8;  // 收集满时间
}

// msgType = 1522
// 客户端 -> 服务器
// 查看家具背包
message QueryFurnitureBag {
}

message QueryFurnitureBagRt {
	required int32 rt = 1;
	repeated FurnitureBagInfo furnitures = 2;  //家具背包中的家具
	repeated HouseThemeInfo themes = 3; // 所有主题
	repeated int32 subjectId = 4;  //已经拥有商店主题Id
}

message FurnitureBagInfo {
	required int32 protoId = 1;  // 家具模板Id
	required int32 remain = 2;  //剩余数量
}

message HouseThemeInfo {
	required int64 themeId = 1; // 主题唯一Id
	required string name = 2; // 主题名称
	optional int32 protoId = 3;  // 商店主题模板Id
}

// msgType = 1523
// 客户端 -> 服务器
// 摆放家具
message PutFurniture {
	required int32 protoId = 1;  //家具模板Id
	required int32 floorIdx = 2;  //家具所在层 1-1F 2-2F
	required int32 x = 3;  // 家具x坐标
	required int32 y = 4;  // 家具y坐标
	required int32 direction = 5;  // 家具朝向
	optional int32 buyNum = 6; // 购买数量
}

message PutFurnitureRt {
	required int32 rt = 1;
	optional FurnitureInfo furniture = 2; // 摆放的家具
}

// msgType = 1524
// 客户端 -> 服务器
// 移动家具
message MoveFurniture {
	required int64 furnitureId = 1;  //家具唯一Id
	required int32 x = 2;  // 家具x坐标
	required int32 y = 3;  // 家具y坐标
	required int32 direction = 4;  // 家具朝向
}

message MoveFurnitureRt {
	required int32 rt = 1;
}

// msgType = 1525
// 客户端 -> 服务器
// 移除家具
message RemoveFurniture {
	required int64 furnitureId = 1;  // 家具唯一Id
}

message RemoveFurnitureRt {
	required int32 rt = 1;
}

// msgType = 1526
// 客户端 -> 服务器
// 购买家具
message BuyFurniture {
	required int32 protoId = 1;  //家具模板Id
	required int32 buyNum = 2;  //购买数量
}

message BuyFurnitureRt {
	required int32 rt = 1;
}

// msgType = 1527
// 客户端 -> 服务器
// 使用主题
message UseHouseTheme {
	required int64 themeId = 1;  //主题唯一Id
	required int32 floorIdx = 2; //使用主题的楼层
}

message UseHouseThemeRt {
	required int32 rt = 1;
	repeated FurnitureInfo furnitures = 2; // 家具集合
}

// msgType = 1528
// 客户端 -> 服务器
// 保存/修改 当前为新主题
message SaveHouseTheme {
	optional int64 themeId = 1;  //主题唯一Id
	optional string name = 2;  //主题名
}

message SaveHouseThemeRt {
	required int32 rt = 1;
	optional int64 themeId = 2; // 保存主题返回主题Id
}

message FurnitureThemeInfo {
	required int32 protoId = 1;  // 家具模板Id
	required int32 x = 2;  // 家具x坐标
	required int32 y = 3;  // 家具y坐标
	required int32 direction = 4;  // 家具朝向
}

// msgType = 1529
// 客户端 -> 服务器
// 收取家具产出
message FurnitureProduce {
	repeated int64 furnitureId = 1;  // 家具id
}

message FurnitureProduceRt {
	required int32 rt = 1;
	repeated FurnitureTimeInfo furnitures = 2;
	optional string resVo = 3;
}

message FurnitureTimeInfo {
	required int64 id = 1;  // 家具唯一Id
	required int32 startTime = 2;  // 收集开始时间
	required int32 endTime = 3;  // 收集满时间
}

// msgType = 1530
// 客户端 -> 服务器
// 放置/回收英雄到后宅
message PutHeroIntoGuildHouse {
	required int64 heroId = 1;  // 英雄Id
	required int32 floorIdx = 2;  // 所在楼层 0-回收
}

message PutHeroIntoGuildHouseRt {
	required int32 rt = 1;
}

// msgType = 1531
// 客户端 -> 服务器
// 点赞
message ThumbUp {
	required int64 toPlayerId = 1;  // 目标玩家id
}

message ThumbUpRt {
	required int32 rt = 1;
}

// msgType = 1532
// 客户端 -> 服务器
// 获取点赞信息
message QueryThumbInfo {
}

message QueryThumbInfoRt {
	required int32 rt = 1;
	optional int32 thumbOut = 2;  //今日点赞数
	optional int32 thumbIn = 3;  //今日被赞数
	optional int32 thumbInTotal = 4; //被赞总数
	repeated Thumb thumbOutInfo = 5; //点赞详情
	repeated Thumb thumbInInfo = 6; //被赞详情
	repeated Thumb thumbInAlliance = 7; //同联盟被赞详情
}

message Thumb {
	required int64 playerId = 1; // 玩家Id
	required string name = 2;  // 玩家名
	required int32 lv = 3; // 玩家君主等级
	required string intro = 4;  //玩家介绍
	required int32 thumbTime = 5;  // 点赞时间 秒
}

// msgType = 1533
// 客户端 -> 服务器
// 购买主题
message BuyHouseTheme {
	required int32 protoId = 1;  //主题模板Id
}

message BuyHouseThemeRt {
	required int32 rt = 1;
	optional HouseThemeInfo theme = 2;
}

// msgType = 1534
// 客户端 -> 服务器
// 删除主题
message RemoveHouseTheme {
	required int64 themeId = 1;
}

message RemoveHouseThemeRt {
	required int32 rt = 1;
}

// msgType = 1535
// 客户端 -> 服务器
// 批量移除家具
message RemoveTypeFurniture {
	repeated int32 protoType = 1;  // 家具模板类型
	required int32 floorIdx = 2;  // 所在楼层
}

message RemoveTypeFurnitureRt {
	required int32 rt = 1;
	repeated FurnitureBagInfo furnitures = 2;  //家具背包中的家具
	repeated int64 furnitureId = 3;
}

// msgType = 1536
// 客户端 -> 服务器
// 修改后宅属性
message ChangeGuildHouse {
	required string name = 1;  // 后宅名称
}

message ChangeGuildHouseRt {
	required int32 rt = 1;
}

// msgType = 1537
// 客户端 -> 服务器
// 修改主题名
message ChangeThemeName {
	required int64 themeId = 1;  //主题唯一Id
	required string name = 2;  //主题名
}

message ChangeThemeNameRt {
	required int32 rt = 1;
}

// msgType = 1540
// 客户端 -> 服务器
// 查询城墙界面信息
message QueryWallInfo {
}

message QueryWallInfoRt {
	required int32 rt = 1;
	optional int32 fireEndTime = 2; // 自动灭火的时间，单位秒
}

// msgType = 1541
// 客户端 -> 服务器
// 查询城墙陷阱工厂界面信息
message QueryWallTrapFactoryInfo {
}

message QueryWallTrapFactoryInfoRt {
	required int32 rt = 1;
}


// msgType = 1542
// 客户端 -> 服务器
// 城墙灭火
message WallFireFight{

}

message WallFireFightRt {
	required int32 rt = 1;
}

// 1545~1555 抽卡
// msgType = 1545
// 客户端 -> 服务器
// 查询抽卡信息
message QueryLottery{

}

message QueryLotteryRt {
	required int32 rt = 1;
	repeated LotteryInfo infos =2;
}

// msgType = 1546
// 客户端 -> 服务器
// 抽卡
message PlayLottery{
	required int32 protoId = 1;   // 要抽哪一个的模板id，普通的/高级/活动的抽卡模板id
	required int32 drawTimes = 2; // 抽多少次 ：1 - 单次抽  10- 十连抽
}

message PlayLotteryRt {
	required int32 rt = 1;
	repeated DrawResInfo rewards = 2; // 获得的武将/武将碎片/道具模板id 数量
}

// 1556 ~ 1560 图书馆
// msgType = 1556
// 客户端 -> 服务器
// 切换图书馆标签
message SwitchLibTag {
	required int32 type = 1;  // 1-装备 2-道具 3-卡片 4-魔物 5-怪物
}

message SwitchLibTagRt {
	required int32 rt = 1;
	repeated LibInfo libItems = 2;
	repeated MonsterLibInfo monsterLibItems = 3;
	repeated BossLibInfo bossLibItems = 4;
}

// 通用图鉴
message LibInfo {
	required int32 protoId = 1;
	repeated int32 protoIds = 2;
}

// 怪物图鉴
message MonsterLibInfo {
	required int32 libraryType = 1;
	required int32 protoId = 2;
	required int32 killNum = 3;
}

// 魔物图鉴
message BossLibInfo {
	required int32 libraryType = 1;
	repeated BossInfo bossInfo = 2;
}

message BossInfo {
	required int32 protoId = 1;
	required int32 attackNum = 2;
	required int32 killNum = 3;
}

// msgType = 1561
// 客户端 -> 服务器
// 银行加速投资
message BankAccelerate {
	required int32 userPlan = 1; // 选择的方案
	repeated propVo useProps = 2; // 投资的加速道具
}

message BankAccelerateRt {
	required int32 rt = 1;
}

// msgType = 1562
// 客户端 -> 服务器
// 取消银行加速投资
message CancleBankAccelerate {
}

message CancleBankAccelerateRt {
	required int32 rt = 1;
}

// msgType = 1563
// 客户端 -> 服务器
// 领取银行加速投资
message GetBankAccelerate {
}

message GetBankAccelerateRt {
	required int32 rt = 1;
}

// msgType = 1571
// 客户端 -> 服务器
// 查询奇观信息
message QueryWonderInfo {
}

message QueryWonderInfoRt {
	required int32 rt = 1;
	repeated WonderInfo wonder = 2;
}

message WonderInfo {
	required int32 protoId = 1;
	required int32 status = 2; // 1-和平 2-战争
	required int64 allianceId = 3; //占领联盟Id(未占领-0)
	required int32 startTime = 4;  // 争夺中 未占领 活动开始时间/争夺中 已占领 防守开始时间/和平 下次活动开始时间
	required int32 endTime = 5;  // 争夺中 未占领 活动结束时间/争夺中 已占领 防守成功时间/和平 下次活动结束时间
	optional PlayerNameInfo player = 6;
}

// msgType = 1572
// 客户端 -> 服务器
// 奇观排行榜
message QueryWonderRank {
	required int32 protoId = 1; //奇观模板Id
	required int64 allianceId = 2; //联盟Id
}

message QueryWonderRankRt {
	required int32 rt = 1;
	repeated AllianceActivityRankVo topRankVos = 2;
	optional int32 selfRank = 3;
	optional AllianceActivityRankVo selfRankVo = 4; // 自己联盟的排名
}

// msgType = 1573
// 客户端 -> 服务器
// 攻打迷雾
message FightWithFogArmy {
	required int32 fogId = 1; //迷雾Id
	repeated int64 heros = 2; //英雄数据
	repeated BattleSolider soliders = 3; //士兵数据
}

message FightWithFogArmyRt {
	required int32 rt = 1;
	optional int32 state = 2;
	optional string fightDetail = 3;
	optional int64 power = 4;
}

// msgType = 1574
// 客户端 -> 服务器
// 领取迷雾奖励
message GetFogReward {
	required int32 fogId = 1; //迷雾Id
}

message GetFogRewardRt {
	required int32 rt = 1;
}

// msgType = 1575
// 客户端 -> 服务器
// 查询迷雾部队
message QueryFogArmy {
	required int32 fogId = 1; //迷雾Id
}

message QueryFogArmyRt {
	required int32 rt = 1;
	repeated BattleSolider soldiers = 2;
}

// msgType = 1576
// 客户端 -> 服务器
// 查询其他玩家信息
message OtherPersonalPower {
	required int64 playerId = 1;
	optional int64 chatRoomId = 2; // 如果是聊天室进入的，刷新聊天室界面，此处填聊天室id
}

message OtherPersonalPowerRt {
	required int32 rt = 1;
	optional PlayerInFo playerInFo = 2;
	optional MyPrisonInfo myPrisonInfo = 3; // 被囚禁信息
	repeated BagInfo bagInfo = 4; //背包物品信息
}

// msgType = 1577
// 客户端 -> 服务器
// 查询赌场信息
message GetCasinosInfo {
}

message GetCasinosInfoRt {
	required int32 rt = 1;
	optional int32 blessCount = 2; // 祝福次数
	optional int32 blessType = 3; // 祝福的标签（0：没祝福 1普通 2精英)
	optional int32 casinosId = 4; // 该奖池id
	optional int32 atkNormalBossCount = 5; // 攻击普通小怪次数
	optional int32 atkHighBossCount = 6; // 攻击精英小怪次数
	optional int32 isAtkNormalBoss = 7; // 是否在攻击普通boss， 0: 小怪，1：boss
	optional int32 isAtkHighBoss = 8; // 是否在攻击精英boss， 0: 小怪，1：boss,2:未解锁
	optional int32 casinosFinishDate = 9; // 该奖池结束时间
	optional int32 freeCount = 10; // 免费次数
}

// msgType = 1578
// 客户端 -> 服务器
// 查询赌场信息
message GetJackpotInfo {
}

message GetJackpotInfoRt {
	required int32 rt = 1;
	optional int64 totalMoney = 2; // 奖池里的总数
	repeated CasinosWinner casinosWinner = 3; // 中奖的人
}

// msgType = 1579
// 客户端 -> 服务器
// 赌场抽奖
message CasinosLottery {
	required int32 type = 1; // 1：普通，2：精英
	required int32 isBoss = 2; // 0: 不在打boss，1：在
	required int32 isBless = 3; // 0：不是祝福，1:是祝福
}

message CasinosLotteryRt {
	required int32 rt = 1;
	optional string reward = 2; // 奖励
	optional int32 blessType = 3; // 祝福的标签（0：没祝福 1普通 2精英)
	optional int32 isBoss = 4; // 0: 不是boss， 1：是boss
	optional int64 giftNum = 5; // boss大奖数量
	optional int32 atkCount = 6; // 攻击次数
}

// msgType = 1580
// 客户端 -> 服务器
// 查询游戏推送设置
message GetNoticeSetting {
}

message GetNoticeSettingRt {
    required int32 rt = 1;
    required int32 refuseDisturbOpen = 2; //勿扰开始时间
    required int32 refuseDisturbEnd = 3; //勿扰结束时间
    required int32 cautionLv = 4; //警戒等级
    repeated NoticeSwitch switches = 5; //开关
}

// msgType = 1581
// 客户端 -> 服务器
// 修改游戏推送设置
message ChangeNoticeSetting {
    required int32 refuseDisturbOpen = 1; //勿扰开始时间
    required int32 refuseDisturbEnd = 2; //勿扰结束时间
    required int32 cautionLv = 3; //警戒等级
    repeated NoticeSwitch switches = 4; //开关
}

message ChangeNoticeSettingRt {
    required int32 rt = 1;
}

// msgType = 1582
// 客户端 -> 服务器
// 获取充值订单号
message QueryPayOrder {
	required int32 giftBagId = 1; //充值礼包ID
	required int32 giftBagLevel = 2; //充值礼包档位
}

message QueryPayOrderRt {
	required int32 rt = 1;
	optional int64 orderId = 2;
}

// msgType = 1583
// 客户端 -> 服务器
// 领取月卡奖励
message MonthCardReward {
	required int32 monthCardId = 1; //月卡id
}

message MonthCardRewardRt {
	required int32 rt = 1;
}

// msgType = 1584
// 客户端 -> 服务器
// 获取满额礼包信息
message QueryQuotaBag {

}

message QueryQuotaBagRt {
	required int32 rt = 1;
	optional QuotaBagInfo quotaBagInfo = 2; // 满额礼包信息
}

// 通知开关
message NoticeSwitch {
    required int32 typeProtoId = 1; // 开关类型 1~内城 2~部队 3~社交
    required int32 refuseDisturb = 2; // 勿扰 0~关 1~开
    required int32 switch = 3; // 通知开关 0~关 1~开
}

// msgType = 2500
// 客户端 -> 服务器
// 客户端需要模块的全量数据
message RequireModuleData {
    required int32 moduleId = 1;
}

message RequireModuleDataRt {
    required int32 rt = 1;
}

//==============================================================================================================================================
// ====== 子消息=================================================================================================================================
//==============================================================================================================================================

message CasinosWinner {
	required int64 playerId = 1; // 玩家id
	required string playerName = 2; // 玩家名字
	required int32 areaNo = 3; // 服务器编号
	required string allianceShortName = 4; // 联盟简称
	required int64 giftNum = 5; // 中奖数量 
	required int32 date = 6; // 中奖日期 
}

message DrawResInfo {
	required int32 protoId = 1; // 武将/道具模版ID
	required int32 num = 2; // 数量
	required int32 type = 3; // 1-武将  2-道具 
	
}

message propVo {
	required int32 protoId = 1;
	required int32 num = 2;
}

message LotteryInfo{
	required int32 protoId = 1;
	required int64 nextRefreshTime =2; // 下一次刷新免费抽的时间
	required int32 freeTimes = 3;  // 剩余的免费次数
	required int32 todayDiscount = 4; // 今天的折扣次数 0 没有折扣 1有折扣 
	required int32 lackTimes = 5; // 有多少次必得奖励
	required int64 startTime =6; // 活动开始时间
	required int64 endTime =7; // 活动开始时间
}

message CityInfo {
	required int32 x = 1;
	required int32 y = 2;
	required string name = 3;
	required int32 cityType = 4; //城池类型
	required int64 cityId = 5;
	required int32 lv = 6;
}

message CastleInfoRt {
	optional string name = 1;
	optional int32 lv = 2;
	optional int32 x = 3;
	optional int32 y = 4;
}

message ResourceInfoRt {
	optional int64 wood = 1;
	optional int64 food = 2;
	optional int64 iron = 3;
	optional int64 stone = 4;
	optional int32 decree = 5; // 玩家政令
	optional int64 coin = 6; // 铜钱
	optional int64 gold = 7; // 元宝
	optional int64 bindGold = 8; // 绑定元宝
	optional int32 jjcCoin = 10; // 竞技币
	optional int32 res4Time = 11; // 木料、铁矿、石料、粮食的刷新时间
	optional int64 allianceCoin = 12; // 竞技币
	optional int64 heroExpPool = 13; // 武将英雄池
	optional int64 casinoCoin = 14; // 赌场：神圣
	optional int64 goldCoin = 15; // 挑战金币
    optional int64 silverCoin = 16; // 挑战银币
}

message TacticsInfoRt {
	optional int32 tacticsId = 1;
	optional int32 tacticsNum = 2;
}

message PlayerWalkInfoRt {
	optional int64 forceId = 1;
	optional int64 startTime = 2;
	optional int64 finishTime = 3;
	optional int32 departureX = 4;
	optional int32 departureY = 5;
	optional int32 targetedX = 6;
	optional int32 targetedY = 7;
}
message ForceInfo {
	required int64 forceId = 1;
	required int64 qianfengHeroId = 2;
	required int64 zhongjianHeroId = 3;
	required int64 dayingHeroId = 4;
	required int32 heroProtoId = 5;
	required int32 heroLvUpNum = 6;
	required int32 heroLv = 7;
	required int32 forceAllBingli = 8;
	required int32 forceState = 9;
}
message NewForceInfo {
	required int64 forceId = 1;
	repeated AddInForce addInForce = 2; //部队中格子信息
	required int32 forceState = 3;
	required int32 leaveTime = 4; //练兵,对峙,屯田等结束时间
	required int32 nowX = 5; //当前X
	required int32 nowY = 6; //当前Y
	required int64 bigCity = 7; //一级归属-主城分城
	required int64 smallCity = 8; //二级归属 -要塞军营
	required int32 forceAddId = 9; //部队在城中的位置编号  1-5
	required int64 inArmyGroup = 10; //隶属军团ID
	required int32 inArmyGroupAddress = 11; //在军团中的位置编号
	required int32 opNum = 12; // 当前第几次操作
	required int32 opMaxNum = 13; // 操作的最大次数

}
message AddInForce {
	required int64 heroId = 1; //武将ID
	required int32 inForceState = 2; ////在部队中的什么位置  0-不在部队内 3-前锋 2-中军 1-大营
	required int64 force = 3; //所属部队ID
	required int32 conscriptionStartTime = 4; //征兵开始时间
	required int32 conscriptionEndTime = 5; //征兵结束时间
	required int32 getBingli = 6; //征兵可得兵力
	required int64 geziId = 7; //唯一ID
}

message GeneralsInFo {
	required int64 heroId = 1;
	required int32 heroProtoId = 2;
	required int32 lv = 3;
	required int32 city = 4;
	required int32 advancedNum = 5;
	required int32 wakes = 6;
	required int32 troops = 7;
}

message HeroEndTime {
	required int64 heroId = 1; //格子ID  格子ID!!!!!
	required int32 startTime = 2;
	required int32 endTime = 3;
	required int32 getBingli = 4;
}

// 战斗简报
message BattleReportInfo {
	required int64 id = 1; // 简单战报的ID
	required int32 readState = 2; // 阅读状态 0-未读 1-已读
	required int32 reportType = 3; // 战报类型
	required int32 fightTime = 4; // 战斗时间
	required int32 fightAddressX = 5; // 战斗地点X坐标
	required int32 fightAddressY = 6; // 战斗地点Y坐标
	required int64 archived = 8; // 是否被收藏了。时间的秒数

	optional PvpFightReport pvpTroopsFightReport = 9; // 玩家对玩家			reportType = 1
	optional MassRuinsFightReport massRuinsFightReport = 10; // 集结遗迹				reportType = 4
	optional HunterFightReport hunterFightReport = 11; // 魔物猎杀				reportType = 2
	optional TransportReport transportReport = 12; // 运输战报				reportType = 9
	optional CollectReport collectReport = 13; // 采集战报				reportType = 8
	optional ScoutReport scoutReport = 15; // 侦察战报				reportType = 6
	optional BeScoutReport beScoutReport = 16; // 被侦查战报			reportType = 7
	optional HunterFightReport allianceHunterFightReport = 17; // 联盟魔物猎杀			reportType = 10
	optional HunterFightReport worldHunterFightReport = 18; // 世界魔物猎杀			reportType = 11
	optional StrongholdFightReport strongholdFightReport = 19; // 攻打据点				reportType = 12
	optional StrongholdGiveTributeReport strongholdGiveTributeReport = 20; // 据点进贡				reportType = 13
	optional HunterCallInfo hunterCallInfo = 21; //召唤礼信息  reportType = 15
	optional JjcFightReport jjcFightReport = 22;//竞技场战报 reportType = 16
	optional StationDefReport stationDefReport = 23;//驻扎部队防守战报 reportType = 17
}

message StationDefReport{
	required int64 atkPlayerId = 1;//攻击方玩家Id
	optional string atkPlayerName = 2;//攻击方玩家名称
	optional string atkAllianceShortName = 3;//攻击方联盟简称
	optional int32 atkPosX = 4;//攻击方坐标X
	optional int32 atkPosY = 5;//攻击方坐标Y
	required int64 defPlayerId = 6;//防守方玩家Id
	optional string defPlayerName = 7;//防守方玩家名称
	optional string defAllianceShortName = 8;//防守方联盟简称
	optional int32 defPosX = 9;//防守方坐标X
	optional int32 defPosY = 10;//防守方坐标Y
}

message JjcFightReport {
	required int32 fightType = 1; // 1-进攻  2-防守
	required int32 fightResult = 2; // 战斗结果  1-失败  2-成功
	required int32 rankChange = 3; // 变化名次,正数,往上还是往下通过下面的战斗结果字段来判断,胜利 ,就是上升,失败,就是下降
	optional string enemyName = 4;  // 敌人名字
	optional int32 enemyPhoto = 5;  // 敌人头像
	optional string enemyAllianceName = 6; // 敌人帮派名
	optional int32 defRank = 7; //防守方排行
	repeated JjcFightForceInfo atkJjcFightForce = 8; //攻击方竞技场部队
	repeated JjcFightForceInfo defJjcFightForce = 9; //防守方竞技场部队
}

message JjcFightForceInfo {
	required int32 protoId = 1; //武将模板
	required int32 level = 2; //武将等级
	required int32 starLv = 3; //武将进阶次数
	required int32 awake = 4; //觉醒等级
}

//魔物召唤礼战报
message HunterCallInfo {
	required int32 monsterId = 1;//魔物Id
	optional string resVo = 2;//奖励信息
	required FightPlayerInfo callPlayer = 3;//召唤者信息
	repeated FightPlayerInfo helpers = 4;//帮助者信息
}


// 聊天的分享战报
message SimpleFightReport{
	required int32 reportType = 1;  // 魔物,集结战报,侦察等,参考下面的reportType
	required string mainPlayer = 2; // 左边人的名字
	required string mainPlayerAlliance = 3; // 左边人的联盟
	required int32 atkOrDef = 4; // 攻击或防守 0进攻 1防守 3杀死魔物
	required string targetName = 5; // 右边魔物或者对手的名字
	required string allianceOrLv = 6; // 右边魔物等级或者对手的联盟名
	required int64 reportId = 7;  // report战报id
	required int32 mainIconId = 8; // 左边人头像模板
	required int32 iconId = 9; // 右边人头像模板
	required int32 monsterId = 10; // 魔物模板Id
	required int64 world = 11; // 战报所在的服务器id
}

//---------------------------------------------------------玩家对玩家				reportType = 1-----------------------------
message PvpFightReport {
	required int32 fightType = 1; // 我方进攻还是防守
	required int32 fightResult = 2; // 战斗结果  1-进攻方全灭  2-防守方全灭
	required int32 cityState = 3; //0-非城池战 1-城池站 
	required int32 atkIsMass = 4;	//0、非集结 1、集结
	required int32 defIsMass = 5;	//0、非集结 1、集结
	optional int32 wonderId = 6; //奇观Id
	optional int32 isPrison = 7;//是否抓到领主
	optional int32 isBePrison = 8;//领主是否被抓

	repeated FightInfoForReport atkFightInfo = 10; // 集结攻击方战斗数据
	repeated FightInfoForReport defFightInfo = 11; // 集结防守方战斗数据
	optional RewardInfoForReport reward = 12; // 奖励信息
	repeated HeroInfoForReport atkHeros = 13; // 攻击方英雄信息
	repeated HeroInfoForReport defHeros = 14; // 防守方英雄信息
}

//---------------------------------------------------------集结遗迹(多人对单 ，只有进攻)	reportType = 2-----------------------------
message MassRuinsFightReport {
	required int32 fightResult = 2; // 战斗结果  1-成功  2-失败
	required int32 relicId = 3; // 遗迹Id
	repeated FightInfoForReport atkFightInfo = 4; // 集结攻击方战斗数据
	repeated FightInfoForReport defFightInfo = 5; // 集结防守方战斗数据
	optional RewardInfoForReport reward = 6; // 奖励信息
	repeated HeroInfoForReport atkHeros = 7; // 攻击方英雄信息
	repeated HeroInfoForReport defHeros = 8; // 防守方英雄信息
	required int32 recoveryNum = 9; // 回复量
	required int32 addRelicBoxResult = 10; //添加时光之盒奖励结果
}

//---------------------------------------------------------------据点守军战斗-------------------------------------------------------------
message StrongholdFightReport {
	required int32 fightResult = 2; // 战斗结果  1-成功  2-失败
	required int32 lv = 3; // 据点等级
	repeated FightInfoForReport atkFightInfo = 4; // 集结攻击方战斗数据
	repeated FightInfoForReport defFightInfo = 5; // 集结防守方战斗数据
	optional RewardInfoForReport reward = 6; // 奖励信息
	repeated HeroInfoForReport atkHeros = 7; // 攻击方英雄信息
	repeated HeroInfoForReport defHeros = 8; // 防守方英雄信息
	required int32 recoveryNum = 9; // 回复量
}

//---------------------------------------------------------------据点进贡-------------------------------------------------------------
message StrongholdGiveTributeReport {
	required int32 lv = 1; // 据点等级
	required int32 startTime = 2; // 开始时间
	required int32 endTime = 3; // 结束时间
	required string reward = 4; // 进贡奖励
}

//---------------------------------------------------------魔物猎杀				reportType = 3-----------------------------
message HunterFightReport {
	required HunterFightInfo hunterFightInfo = 1; //猎杀战斗信息

	repeated HeroInfoForReport heros = 2; //我方英雄数据
	required int32 kingExp = 3;//领主经验
	required string resVo = 4;//资源奖励信息
	optional string finishResVo = 5; //最后一击奖励格式
	optional string allianceResVo = 6; //联盟礼物奖励（非奖励格式）
	required int32 photoId = 7; //领主头像
	optional int32 kingExpAfterFight = 8; // 打架后的领主经验
	optional int32 kingLvAfterFight = 9; // 打架后的领主等级
}

//---------------------------------------------------------运输战报				reportType = 4-----------------------------
message TransportReport {
	required int64 transportPlayerId = 1; //运输玩家Id
	required string transportPlayerName = 2; //运输玩家的名字
	required string transportPlayerShortName = 3;//运输玩家的简称
	required int32 transportPosX = 4; //运输玩家的坐标
	required int32 transportPosY = 5; //运输玩家的坐标
	required int64 beTransportPlayerId = 6; //被运输玩家Id
	required string beTransportPlayerName = 7; //被运输玩家的名字
	required string beTransportPlayerShortName = 8;//被运输玩家的简称
	required int32 beTransportPosX = 9; //被运输玩家的坐标
	required int32 beTransportPosY = 10; //被运输玩家的坐标
	required int64 allianceId = 11; //联盟ID
	required string allianceName = 12; //联盟名称
	required string allianceShortName = 13;//联盟简称
	required string resVo = 14; //运输资源
}

//---------------------------------------------------------采集战报				reportType = 5-----------------------------
message CollectReport {
	required string resVo = 1; //获得的资源
	repeated HeroInfoForReport heros = 2; //英雄信息
	required int32 resType = 3;//资源类别
	required int32 resLv = 4;//资源点等级
}

//---------------------------------------------------------被侦察战报					      -----------------------------
message BeScoutReport {
	required int32 result = 1; //1 被侦察成功 2 被侦察失败
	required FightPlayerInfo playerInfo = 2; //侦察玩家信息
	required int32 cellType = 3; // 侦察的地块类型 1 资源点 3 遗迹 4 玩家 5 奇观 6 空地 9 据点
	optional int32 relicId = 4; // 遗迹Id
	optional int32 strongholdLv = 5; // 据点等级
	optional int32 resType = 6;//资源类别
	optional int32 resLv = 7;//资源点等级
}

//---------------------------------------------------------侦察战报					      -----------------------------
message ScoutReport {
	required int32 result = 1; // 1 侦察成功 2 侦察失败
	required int32 cellType = 2; // 侦察的地块类型 1 资源点 3 遗迹 4 玩家 5 奇观 6 空地 9 据点
	optional int32 relicId = 3; // 遗迹Id
	optional int32 strongholdLv = 4; // 据点等级
	optional int32 resType = 5;//资源类别
	optional int32 resLv = 6;//资源点等级
	optional string reward = 7; // 城内资源
	optional TerritoryEffectInfo erritoryEffectInfo = 8; // 领地强化 侦察等级没到或没有的没有
	optional ScoutSoliderInfo scoutTrapsInfo = 9; // 陷阱数量 侦察等级没到或没有的没有
	optional ScoutSoliderInfo scoutTrapsHospital = 10; // 陷阱医院
	optional ScoutSoliderInfo scoutSoliderHospital = 11; // 部队医院
	repeated TerritoryBuilding territoryBuilding = 12; // 领地建筑
	repeated int32 castleBuffs = 13; // 城池Buff效果值

	optional ScoutForceInfo defForce = 14; // 防守部队 侦察等级没到或没有的没有
	repeated ScoutForceInfo reinforceForces = 15; // 增援部队 侦察等级没到或没有的没有
	repeated ScoutForceInfo stationedForces = 16; // 驻扎部队
	repeated ScoutForceInfo massForces = 17; // 集结部队
	optional ScoutForceInfo hideForce = 18; // 藏兵部队
	
	optional int32 haveData = 19;//1、自己部队 2、部队医院 4、自己陷阱 8、陷阱医院 16、增援 32、驻扎 64、集结 128、藏兵 
}

//侦察玩家信息
message ScoutPlayerInfo {
	required FightPlayerInfo playerInfo = 1; // 玩家(集结手)信息
	optional int32 laridState = 2; // 领主状态 0-不明 1-行军中 2-被抓 3-藏兵 4-城内集结 5-死亡 6-城内
}

//领地强化
message TerritoryEffectInfo {
	required int32 territoryEffectNum = 1; //领地强化数量 没有强化开启填0
	repeated TerritoryEffect territoryEffect = 2; //领地强化详情
}

message TerritoryEffect {
	required int32 protoId = 1; //领地强化id
	required int32 add = 2; //强化万分比
}

//城墙耐久
message TerritoryDurable {
	required int32 durableRate = 1; //万分比
	optional int32 totalDurable = 2; //总耐久  侦察等级没到不填
}

//陷阱
message ScoutTrapsInfo {
	required int32 type = 1; //1-总数显示模糊值，陷阱列表不显示 2 总数和陷阱列表显示模糊 3 都是精确值
	required int32 trapCount = 2; //陷阱总数
	repeated ScoutTrap scoutTrap = 3; //侦察等级没到不显示
}

message ScoutTrap {
	required int32 protoId = 1; //陷阱id
	required int32 count = 2; //数量
}

//侦查部队
message ScoutForceInfo {
	optional ScoutPlayerInfo playerInfo = 1; //玩家信息
	optional ScoutHerosInfo heroInfo = 2; //英雄信息
	optional ScoutSoliderInfo soliderInfo = 3; //士兵信息
}

//侦查英雄
message ScoutHerosInfo {
	required int32 herosNum = 1; // 英雄数量
	repeated HeroInfoForReport heros = 2; // 英雄详情 侦察等级没到的话没有
}

//侦察士兵
message ScoutSoliderInfo {
	required int32 type = 1; //1-总数显示模糊值，部队列表不显示 2 总数和部队列表显示模糊 3 都是精确值 4、兵种类别
	optional int32 soliderCount = 2; //部队总数
	repeated ScoutSoliderByArmyType scoutSoliderByArmyType = 3; //侦查的士兵类别
	repeated ScoutSolider scoutSolider = 4; //侦察士兵部队
}

message ScoutSoliderByArmyType {
	required int32 armyType = 1; //兵种
	required int32 count = 2; //数量
}

message ScoutSolider {
	required int32 protoId = 1; //id
	required int32 count = 2; //数量
}

//领地建筑
message TerritoryBuilding {
	required int32 buildId = 1; //陷阱id
	required int32 lv = 2; //数量
}

message HunterFightInfo {
	required int32 monsterId = 1; //魔物模板Id
	required int32 monsterLeftHp = 2; //魔物本次战斗后剩余血量
	required int32 bloodConsumption = 3; //消耗血量
	required int32 consume = 4; //行动力消耗

}

message FightInfoForReport {
	optional FightPlayerInfo fightPlayerInfo = 1; //玩家信息
	repeated SoliderInfoForReport soliders = 3; //玩家部队信息
	repeated KillInfoForReport killInfos = 4; //击杀信息
}

message KillInfoForReport {
	required int32 killSoliderId = 1; //击杀的士兵Id
	required int32 killSoliderNum = 2; //击杀的士兵数量
}

message FightPlayerInfo {
	optional string name = 2; //玩家名字
	optional int32 photo = 3; //玩家头像
	optional int32 posX = 4; //玩家坐标X
	optional int32 posY = 5; //玩家坐标Y
	optional int32 level = 6; //玩家等级
	optional int32 vipLevel = 7; //玩家Vip等级
	optional int64 id = 8; //玩家ID
	optional int64 allianceId = 9; //联盟ID
	optional string allianceName = 10; //联盟名称
	optional string allianceShortName = 11; //联盟简称
	optional int32 allianceRnum = 12; // 联盟阶级
	optional int32 countryPos = 13;//国家官职
}

//战报中奖励信息
message RewardInfoForReport {
	required int32 kingExp = 1; //君主经验
	required string resVo = 2; //资源奖励信息
}

//英雄数据
message HeroInfoForReport {
	required int32 protoId = 1; //配置ID
	optional int32 lv = 2; //等级
	optional int32 starLv = 3; //星级
	optional int32 grade = 4; //军阶
	optional int32 isLarid = 5; //是否是领主
	optional int32 curExp = 6; //当前经验
	optional int32 addExp = 7; //增加的经验
	optional int32 expOverFlow = 8;//经验是否溢出
}

//士兵数据
message SoliderInfoForReport {
	required int32 protoId = 1; //配置ID
	required int32 totalNum = 2; //总兵力
	required int32 woundedNum = 3; //伤兵量
	required int32 diedNum = 4; //死兵量
}


message EasyFightInfo {
	required int32 readState = 1; //阅读状态 0-未读 1-已读
	required int32 fightType = 2; //战斗类型  1-攻击别人  2-防守
	required int32 fightTime = 3; //战斗时间
	required int32 fightAddressX = 4; //战斗地点X坐标
	required int32 fightAddressY = 5; //战斗地点Y坐标
	required int32 fightResult = 6; //战斗结果  1-进攻方全灭  2-防守方全灭  3-规定回合未结束
	repeated BattleHeroInfo myHeroInfo = 7; //我方阵容信息
	required int32 myForceAllBingli = 8; //我方本部队总兵力(战斗前)
	required int32 myAfterBingli = 9; //我方本部队总兵力(战斗后)
	repeated BattleHeroInfo otherHeroInfo = 10; //敌方阵容信息
	required int32 otherForceAllBingli = 11; //敌方本部队总兵力(战斗前)
	required int32 otherAfterBingli = 12; //敌方本部队总兵力(战斗后)
	required int64 detailFightInfoId = 13; //详细战报的ID
	required int64 easyFightInfoId = 14; //简单战报的ID
	required string myName = 15; //我的名字
	required string otherName = 16; //敌方玩家名
	required string otherAllianceName = 17; //敌方玩家帮派名
	required int32 gongchengNum = 18; //攻城值
	required int32 isOccSuc = 19; //是否成功占领  0-没有  1-成功占领
	required int64 walkId = 20; //本场战斗是哪次行军引起的
	required string fightAddressName = 21; //战斗地点的名字
	required string occName = 22; //被沦陷的人名字 -- (如果结尾是&表示是盟主)
	required string allianceShortName = 23; //敌军帮派简称
	optional int32 occErrorCause = 24; //战斗胜利但是没有成功占领的原因  0-正常  1-因为地块已达到上限,所以无法占领
	required int32 pohuaiGongxun = 25; //破坏获得的荣誉值
	required int32 pohuaiParam = 26; //破坏获得的荣誉值时候的百分比
	required string myAllianceName = 27; //我方帮派名字
	required string myAllianceShortName = 28; //我方帮派简称
	required string atkFaceProto = 29; //进攻方头像
	required string defFaceProto = 30; //防守方头像
}

message BattleHeroInfo {
	required int32 address = 1; //位置
	required int64 heroId = 2; //ID
	required int32 protoId = 3; //模版ID
	required int32 lv = 4; //等级
	required int32 advLv = 5; //升阶
	required int32 shangBing = 6; //伤兵数量
}

//message ShangbingInfo {
//	 required int32  address = 1; //位置
//	  required int32  shangbingNum = 2; //伤兵数量
//}

message DetailedQueryHerosInFo {
	required int64 heroId = 1; // 唯一编号
	required int32 heroProtoId = 2; // 模板编号
	required int32 lv = 4; // 等级
	required int32 advLv = 5; // 星级
	required int32 awake = 6; // 进阶等级
	required int32 exp = 11; // 经验
	required int32 skill1 = 15; // 技能1
	required int32 skill2 = 16; // 技能2
	required int32 skill3 = 17; // 技能3
	required int32 skill4 = 18; // 技能4
	required int32 intSkillId1 = 31; // 武将内政技能1
	required int32 intSkillId2 = 32; // 武将内政技能2
	required int32 intSkillId3 = 33; // 武将内政技能3
	repeated HeroEquipVo heroEquipVos = 37; // 武将装备信息
	required int32 starLvUpEndTime = 38; // 升星结束时间
	required int32 superLvUpEndTime = 39; // 升阶结束时间
	required int64 heroPower = 40; // 英雄实力
	required int32 onFloorIdx = 41; // 所在后宅楼层
	// 50-52不需要设置值，只是客户端用于存储数据
	optional int32 mainHeroState = 42; // 领主属性状态字段 0-不是领主 1-正常状态领主 2-等待逃脱中 3-等待处决 4-可处决 5-吃毒蘑菇中 6-死亡中 7-可领取复活 8-藏宝地穴中 9-虚拟英雄 用作buff填充
	optional int32 heroPosState = 43; //英雄位置状态 0、在城内 1、出征中
	optional int32 intHeroAddress = 44; // 非0表示武将在执政中,这个值表示执政位ID
	optional int32 mainHeroStartTime = 45; // 领主状态的开始时间
	optional int32 mainHeroOverTime = 46; // 领主状态的结束时间
}

//英雄状态信息
message HeroStateInFo {
	required int64 heroId = 1; // 唯一编号
	required int32 heroProtoId = 2; // 模板编号
	required int32 mainHeroState = 3; // 领主属性状态字段 0-不是领主 1-正常状态领主 2-等待逃脱中 3-等待处决 4-可处决 5-吃毒蘑菇中 6-死亡中 7-可领取复活 8-藏宝地穴中 9-虚拟英雄 用作buff填充
	required int32 heroPosState = 4; //英雄位置状态 0、在城内 1、出征中
	required int32 intHeroAddress = 5; // 非0表示武将在执政中,这个值表示执政位ID
	required int32 mainHeroStartTime = 6; // 领主状态的开始时间
	required int32 mainHeroOverTime = 7; // 领主状态的结束时间
}

message HeroEquipVo {
	required int32 heroTrophiesId = 1; // 战利品包ID
	required int32 advLv = 2; // 装备阶级
}

message BuildingInFo {
	required int32 type = 1;
	required int32 lv = 2;
	required int32 completeTime = 3;
	required int32 state = 4;
	required int32 x = 5; // 建筑所在位置的x坐标
	required int32 y = 6; // 建筑所在位置的y坐标
	required int32 destroyTime = 7;
	required int64 helperId = 8; // 帮助里面的唯一ID
	required int64 buildingId = 9; // 建筑唯一ID
	required int32 direction = 10; // 建筑的方向
}

message CellInfo {
	required int32 x = 1;
	required int32 y = 2;
	required int32 type = 3;
	required int32 belong = 4;
	required int32 isBuilding = 5;
	required int32 buildingTime = 6;
}

message ExpeditionInFo {
	required int32 num = 1;
	required int32 allNum = 2;
	required int32 castleType = 3;
	required int64 id = 4;
	required string castleName = 5;
	required int32 distance = 6; //*100 原为float类型
}

message HeroLevelUpInFo {
	required int64 heroId = 1;
	required int32 heroProtoId = 2;
	required int32 lv = 3;
	required int32 attack = 4; //原为float 现*100为int
	required int32 magic = 5; //原为float 现*100为int
	required int32 defence = 6; //原为float 现*100为int
	required int32 speed = 7; //原为float 现*100为int
	required int32 attCity = 8; //原为float 现*100为int
	required int32 points = 9;
	required int32 experience = 10;
}

//显示内容：
//1. 自己的主城、分城、要塞、军营、码头
//2. 同盟成员的主城、码头
//3. 同盟下级成员的主城、码头
//4. 其他玩家的码头
//5. 同盟所属的NPC城池、关卡
//6. 非同盟所属的NPC城池、关卡
message ShowMapInfo {
	required int32 x = 1; //坐标X
	required int32 y = 2; //坐标Y
	required int32 type = 3; //详见LandBase中类型，但只会包括:100-主城;106-玩家要塞;107-玩家军营;201~205、250-NPC城池;301-野外要塞;302-野外军营;303-关卡;304-码头
	required int32 relation = 4; //关系:0-自己;1-同盟成员;2-同盟下级成员;3-其他玩家;4-同盟所属;5-非同盟联盟
	optional string alceName = 5; //如果是NPC城池或关卡，并且被占领，则会返回占领联盟的名称
	optional string alceShortName = 6; //如果是NPC城池或关卡，并且被占领，则会返回占领联盟的简称
	optional string taiShouName = 7; //如果是NPC城池或关卡，被占领城主，并且任命城主，则会返回被任命的玩家名称
}

message QueryRankInfoRt {
	optional string name = 1;
	optional int32 photoProtoId = 2;
	optional int32 score = 3;
	optional string allianceShortName = 4;
	optional int64 playerId = 5; //玩家ID
	optional int32 curentPos = 6; // 官职
	optional string nickName = 7; // 玩家昵称
	optional int32 robotProtoId = 8; // 可能排行榜里的是机器人，发一个模板id
}

message QueryAlliacneRankInfoRt {
	optional int32 rank = 1; //排名
	optional string name = 2; //名称
	optional string shortName = 3; //简称
	optional int32 state = 5; //所属州
	optional int32 memberNum = 6; //成员数
	optional int32 cityNum = 7; //城池数
	optional int32 alliancePower = 8; //势力值
	optional string mainPlayerName = 9; //盟主
	optional int32 flagColor = 10; //旗帜的颜色模版ID
	optional int32 flagStyle = 11; //旗帜的样式模版ID
	optional int32 flagEffect = 12; //旗帜的图案模版ID
}

message BuildCityInfo {
	required int32 x = 1; //建造中城池的坐标X
	required int32 y = 2; //建造中城池的坐标Y
	required int32 completeTime = 3; //建造中城池完成时间
	required int32 type = 4; //正在建造的类型
	required string name = 5; //建造的城池的名字
}

message MarkInfo {
	required int32 landX = 1;
	required int32 landY = 2;
	required int32 areaNo = 3; // 服务区ID
	required int32 group = 4; // 分组类型
	required string name = 5; // 名字
	required int64 id = 6; // 标记点唯一ID
}

message ConscriptionInfo {
	required int64 heroId = 1;
	required int32 num = 2;
}

message InCityForce {
	required int64 forceId = 1; //部队ID
	required int32 forceState = 2; //部队状态
	required string forceName = 3; //部队名称
	required int64 armyGroupId = 4; //军团ID
	required int64 playerId = 5; //部队主人ID
	required int32 arrive = 6; //驻守部队到达这里的时间
}

message AllianceQueryReqListInfo {
	required int64 id = 1; //玩家ID
	required string name = 2; //玩家名称
	required int32 photoProtoId = 3; //玩家头像
	required int64 fightValue = 6; //战斗力
}

message AllianceQueryPlayerInfo {
	required int64 id = 1; //玩家ID
	required string name = 2; //玩家名称
	required int32 photoProtoId = 3; //头像模版ID
	required int64 ctrbtTotal = 4; //总贡献
	required int64 ctrbtWeek = 5; //本周贡献
	required int64 mertsWeek = 6; //本周功勋
	required int64 powerValue = 7; //玩家战斗力
	required int32 landX = 9; //坐标X
	required int32 landY = 10; //坐标Y
	required int32 fightValue = 11; //=====废弃字段
	required int32 isOnline = 12; //玩家是否在线：0-不在线；1-在线
	repeated int32 positions = 13; //职位：1-盟主 2-副盟主 3-指挥官 4-外交官 5-团长 6-普通成员 7-白虎成员 8-青龙成员 9-玄武成员 10-朱雀成员 11-白虎团长 12-青龙团长 13-玄武团长 14-朱雀团长
	optional int32 tsLandX = 14; //如果是某个郡城的守，值为郡城的坐标X
	optional int32 tsLandY = 15; //如果是某个郡城的守，值为郡城的坐标Y
	required int32 occupiedFlag = 16; //是否沦陷标志位：1-沦陷；0-没有沦陷
	optional int64 makeOverTime = 17; //如果是盟主会有执行盟主转让操作的时间戳
	required string nickName = 18; //玩家昵称
	required int32 weekResearchHonor = 19; //本周捐赠科技获得的贡献
	required int32 weekHonor = 20; //本周获得的贡献
	required int32 weekShalu = 21; //本周杀戮值
	required int32 weekXisheng = 22; //本周牺牲值
	required int32 weekPohuai = 23; //本周破坏值
	required int32 lastOffTime = 24; // 上次离线时间
	required int32 mapAreaNo = 25; // 玩家所属的服务器编号
	required int32 monsterScore = 26; // 本日获得魔物积分
	required int32 lastGetMonsterScore = 27; // 上次获得魔物积分时间
	optional int32 currentPos = 28;//当前官职
}

message AllianceQueryRelationInfo {
	required int64 id = 1; //联盟ID
	required string name = 2; //联盟名称
	required string shortName = 3; //联盟简称
	required int64 playerId = 5; //盟主ID
	required string playerName = 6; //盟主名称
	required int32 reservePlayers = 8; //联盟成员数
	required int32 limitPlayers = 9; //成员上限
	required int64 powerValue = 10; //联盟势力值
	required int32 relationShipId = 11; //外交关系：1-友好；2-敌对
	required int32 npcCityNum = 12; //占领的NPC城池数量
	required int32 nextWaijiaoCount = 13; // 下次外交时间
}


message AllianceQueryLogInfo {
	required int64 dt = 1; //日志记录时间戳
	required int32 typ = 2; //日志类型编号
	repeated string lgs = 3; //参数数组
}

// 1.攻城略地	Value1:破敌值;Value2:攻城值;Value3:战损值;Value4:0
// 2.联盟战争	Value1:荣誉值;Value2:破敌值;Value3:攻破军营/要塞;Value4:耐久值
message AllianceMissionProInfo {
	required int32 photoProtoId = 2; //玩家头像模版ID
	required int64 playerId = 3; //玩家ID
	required string playerName = 4; //玩家名字
	required int32 value1 = 5; //统计值1
	required int32 value2 = 6; //统计值2
	required int32 value3 = 7; //统计值3
	required int32 value4 = 8; //统计值4
	repeated int32 positions = 9; //职位
}

message AllianceInfo {
	required int64 id = 1; //联盟Id
	required string name = 2; //联盟名称
	required string shortName = 3; //联盟简称
	repeated int32 positions = 5; //职位：1-盟主 2-副盟主 3-指挥官 4-外交官 5-团长 6-普通成员 7-白虎成员 8-青龙成员 9-玄武成员 10-朱雀成员 11-白虎团长 12-青龙团长 13-玄武团长 14-朱雀团长
	required int32 color = 6; //旗帜的颜色（没有设置过，则值为0）
	required int32 style = 7; //旗帜的样式（没有设置过，则值为0）
	required int32 effect = 8; //旗帜的图案（没有设置过，则值为0）
}

message RelationShip {
	required int64 setAllianceId = 1; //对方联盟ID
	required int32 relationShipId = 2; //联盟关系ID:1-友好;2-敌对
}

message AllianceMarkInfo {
	required int32 type = 1; //类型：1-联盟标记；2-集结请求
	required int64 playerId = 2; //发布者ID
	required string playerName = 3; //发布者名字
	repeated int32 positions = 4; //发布者职位：1-盟主 2-副盟主 3-指挥官 4-外交官 5-团长 6-普通成员 7-白虎成员 8-青龙成员 9-玄武成员 10-朱雀成员 11-白虎团长 12-青龙团长 13-玄武团长 14-朱雀团长
	required int32 x = 5; //发布坐标X
	required int32 y = 6; //发布坐标Y
	required string title = 7; //标题
	required string desp = 8; //描述
	required int64 markTime = 9; //发布时间
	required int64 markId = 10; //标记唯一ID
	required int32 pltAreaNo = 11; //服务器编号
	required int32 photoProtoId = 12; // 头像
}

message AllianceQueryWithStateInfo {
	required int64 id = 1; //联盟ID
	required string name = 2; //联盟名称
	required string shortName = 3; //联盟简称
	required int64 playerId = 6; //盟主ID
	required string playerName = 7; //盟主名称
	required int32 reservePlayers = 8; //成员数
	required int32 limitPlayers = 9; //数量上限
}

message AllianceMissionInfo {
	required int64 id = 1; //联盟目标ID
	required int32 type = 2; //联盟目标类型：1-攻城掠地:攻打NPC城池；2-联盟战争:对某个联盟发动战争
	optional int32 x = 3; //【1-攻城掠地】的NPC城池坐标X
	optional int32 y = 4; //【1-攻城掠地】的NPC城池坐标Y
	optional int64 aid = 5; //【2-联盟战争】的联盟ID
	optional string allianceName = 6; //【2-战场杀敌】的联盟名称
	optional string allianceShortName = 7; //【2-战场杀敌】的简称名称
	required int32 over = 8; //结束时间，单位:小时
	required int32 endTime = 9; //发布的结束时间
}

message AllianceMissionRankInfo {
	required int64 playerId = 1; //玩家ID
	required string playerName = 2; //玩家名称
	required int32 value = 3; //数值
	required int32 rank = 4; //排名
}

message AllianceQueryMissionPaidInfo {
	required int32 protoId = 1; //礼包模板ID
	required int32 times = 2; //当日已购买次数
	required int32 totalTimes = 3; //当日总购买次数
}


message AllianceExchangeDemandInfo {
	required int64 demandId = 1; //需求ID（每个换卡需求的唯一ID）
	required int64 playerId = 2; //玩家ID
	required string playerName = 3; //玩家名称
	repeated int32 positions = 4; //职位
	required int32 endTime = 5; //结束时间
	required int32 protoId = 6; //模板ID
	required int32 ownQty = 7; //背包中拥有的卡牌数量
	required int32 donateQty = 8; //捐献卡牌：玩家捐献数
	required int32 nowQty = 9; //收集进度：当前对方收集数
	required int32 targetNum = 10; //收集目标数量
}


message ChestPrize {
	required int32 protoId = 1; // 类型 -1铜钱 -2元宝 >0武将模板编号
	required int32 num = 2; // 数量
}

// 宝箱信息
message ChestInfo {
	required int32 freeCnt = 1; // 免费宝箱数量
	required int32 freeTime = 2; // 免费宝箱刷新时间
	required int32 killIsPrize = 3; // 是否已领取击杀宝箱
	required int32 killNum = 4; // 击杀数量
}

// 进入聊天室界面
message TalkInfo {
	required int64 chatRoomId = 1; // 聊天室id
	required int32 chatType = 2; // 聊天室类型
	required string chatRoomName = 3; // 聊天室名字
	required string lastMessage = 4; // 最新一句聊天内容
	required int32 readState = 5; // 是否已读
	required int32 lastTime = 6;
	repeated int32 photoProtoId = 7; // 头像id
	required int64 otherPlayerId = 8; // 如果是私聊  对方玩家ID
	required int32 isOnline = 9; // 如果是私聊  对方是否在线
	required string allianceName = 10; // 如果是私聊  对方的联盟名称
	required string allianceShortName = 11; // 如果是私聊  对方的联盟简称
	required string masterName = 12; // 群主名字
	optional int32 vipLv = 13; // VIP等级
	optional int32 areaNo = 14; // 服务器编号
	optional int64 fightValue = 15; // 战斗力
	required int32 playerNum = 16; // 群内玩家数
}

// 聊天室信息
message ChatRoomMessage {
	required int64 messageId = 1; // 消息唯一Id
	required int64 chatRoomId = 2; // 聊天室唯一Id
	required string name = 3; // 说话人
	required string playerShortName = 4; // 角色昵称
	required string allianceName = 5; // 联盟名称
	required string allianceShortName = 6; // 联盟简称
	repeated int32 positions = 7; // 职位
	required int32 showTime = 9; // 是否显示时间
	required int32 photoProtoId = 10; // 头像
	required string message = 11; // 内容
	required int32 readType = 12; // 阅读方式
	repeated string params = 13; // 参数
	optional int32 messageType = 14; // 消息类型  1-普通消息  2-红包消息
	optional RedBagInfo redBagInfo = 15; // 红包参数内容
	optional int32 redBagState = 16; // 红包类型 1-可领取 2-已领取 3-已过期 4- 已领完
	optional int32 office = 17;// 官职Id
	required int32 vipLv = 18;// vip等级
	required int32 areaNo = 19;// 服务器编号
}


message PlayerIds {
	required string playerName = 1;
	required int64 playerId = 2; // 玩家ID
}

//任务实例
message Task {
	required int64 taskId = 1; // 任务唯一ID
	required int32 taskProtoId = 2; // 任务模板ID
	required int32 taskState = 3; // 任务状态 0-进行中 1-已完成 2-已领取奖励
	required int64 taskFinish = 4; // 任务当前进度
	required int32 overTime = 5; // 任务过期时间 -1表示不限时
}

//成就实例
message Achievement {
	required int64 id = 1; // 成就唯一ID
	required int32 protoId = 2; // 成就模板ID
	required int32 state = 3; // 成就状态 0-进行中 1-已完成 2-已领取奖励
	repeated ProgressInfo allProgress = 4; // 成就当前进度
}

message ProgressInfo {
	required int32 checkType = 1; //条件类型
	required int32 progress = 2; //进度
}

// 进入邮件界面
message MailInfo {
	required int64 mailId = 1; 						//邮件id
	required int32 type = 2; 						//邮件类型 1、系统邮件 2、联盟邮件 3、收藏邮件 4、联盟邀请
	required int64 playerId = 3;					//发送者Id
	required string playerName = 4; 				//发送者名字
	required string playerNickName = 5;				//发送者简称
	required int64 allianceId = 6;					//联盟ID
	required string allianceShortName = 7;			//联盟简称
	required MailTitleAndCon mailTitleAndCon = 8; 	//邮件信息
	required string attach = 9; 					//邮件附件
	required int32 isRead = 10; 					//邮件是否已读	0、未读 1、已读
	required int32 isDraw = 11; 					//是否领取		0、有道具且未领取 1、无道具或已领取
	required int32 sendTime = 12; 					//发送时间
	required int32 expireTime = 13; 				//过期时间
	required int32 isSign = 14; 					//是否收藏
}

message MailTitleAndCon {
	required int32 readType = 1; //邮件结构体的读取类型 1-读lan (一般都是游戏内发的) 2-直接读取内容(一般都是后台发的)
	required string title = 2; //邮件标题lanId
	repeated string titleParam = 3; //邮件标题中参数
	required string message = 4; //邮件内容lanId
	repeated string messageParam = 5; //邮件内容中参数
}

// 详细的联盟玩家在线信息
message MemberPlayerInfo {
	required int64 playerId = 1; //玩家id
	required string playerName = 2; //名字
	repeated int32 positions = 4; //玩家联盟职位：1-盟主 2-副盟主 3-指挥官 4-外交官 5-团长 6-普通成员 7-白虎成员 8-青龙成员 9-玄武成员 10-朱雀成员 11-白虎团长 12-青龙团长 13-玄武团长 14-朱雀团长
	required int32 isOnline = 5; //玩家是否在线
	required int32 protoId = 6; //玩家头像id
}

// 联盟聊天内容信息
message AllianceChatMessage {
	required int64 messageId = 1;
	required string sendName = 2; // 发送人名字
	required string message = 3; // 聊天内容
	optional MassGroup massGroup = 4; // 集结信息
    optional EasyFightInfo easyFightInfo = 5; // 分享战报 	
}

//演武：关卡信息
message FbPlayerStageInfo {
	required int32 stageNo = 1; //关卡编号
	required int32 level = 2; //难度等级:1~简单;2~普通;3~困难
	required int32 star = 3; //星级判定:0~尚未通关;1~一星通关;2~二星通关;3~三星通关
	required int64 bestPlayerId = 4; //最佳通关玩家ID
	required string bestPlayerName = 5; //最佳通关玩家名称
	required int32 bestDeadSoldier = 6; //最佳通关战损：累计死兵
}

//演武：地块信息
message FbStageCellInfo {
	required int32 type = 1; //关卡的土地类型
	required int32 x = 2; //关卡的土地坐标X
	required int32 y = 3; //关卡的土地坐标Y
	required int32 isCapture = 4; //是否占领:0-未占领；1-已占领
	required int32 durable = 5; //土地当前耐久
	required int32 maxDurable = 6; //土地耐久上限
	required int32 protoTeam = 7; //野怪当前组数
	required int32 maxProtoTeam = 8; //野怪最大组数
}

//演武：部队信息
message FbStageForceInfo {
	required int32 forceNo = 1; //部队编号:从左往右依次是1、2、3、4、5
	required int32 forceState = 2; //部队状态:0~待命中;1~行军中;9~对峙中
	required int32 runType = 3; //行军类型:0~待命;1~出征;2~返回;3-调动
	required int32 fromX = 4; //出发地坐标X
	required int32 fromY = 5; //出发地坐标Y
	required int32 toX = 6; //目的地坐标X
	required int32 toY = 7; //目的地坐标Y
	required int32 startTime = 8; //从出发地出发时间:部队在行军中，会有出发时间
	required int32 arriveTime = 9; //到目的地时间:部队在行军中，会有到达时间
	required int32 drawTime = 10; //对峙结束时间:部队在对峙中，会有对峙结束时间
	required int32 forceArmy = 11; //大营兵种
}

//演武：格子信息
message FbForceGridInfo {
	required int32 forceNo = 1; //部队编号:从左往右依次是1、2、3、4、5
	required int32 gridNo = 2; //格子编号:1~大营;2-中军;3-前锋
	required int64 heroId = 3; //武将ID
	required int32 troops = 4; //剩余兵力
	required int32 hurtEndTime = 5; //重伤结束时间
}

// 联盟统计信息
message AllianceCountInfo {
	required int32 day = 1; //查询期间：0-今天；1-昨天
	required int64 playerId = 2; //玩家ID
	required string playerName = 3; //玩家名称
	required int32 contributions = 4; //贡献
	required int32 meritorious = 5; //功勋
	required int32 landDurables = 6; //拆地值
	required int32 cityDurables = 7; //攻城值
}

// 联盟邮件主题
message AllianceTopicInfo {
	required int64 topicId = 1; //主题ID
	required int32 type = 2; //主题类型：40-联盟全体成员 41-白虎团邮件 42-青龙团邮件 43-玄武团邮件 44-朱雀团邮件
	required int64 playerId = 3; //发布的玩家ID
	required string playerName = 4; //发布的玩家名称
	required int32 photoProtoId = 5; //发布者的头像模版
	required string title = 6; //发布标题
	required int32 lastAt = 7; //最后一次回复时间
	required int32 isRead = 8; //是否已经读取
	required int32 isSign = 9; //是否收藏
}

// 联盟邮件回复
message AllianceReplyInfo {
	required int64 replyId = 1; //回复的回复ID
	required int64 playerId = 2; //回复的玩家ID
	required string playerName = 3; //回复的玩家名称
	required string playerShortName = 4; //回复的玩家昵称
	repeated int32 positions = 5; //回复者的职位
	required int32 photoProtoId = 6; //回复者的头像模版
	required string message = 7; //回复内容
	required int32 replyAt = 8; //回复时间
	required int32 vipLv = 9; //vip等级
	required int32 curentPos = 10; // 官职	
}

// 请求捐卡信息
message AllianceQueryDemandInfo {
	required int64 demandId = 1; //需求ID（每个换卡需求的唯一ID）
	required int32 protoId = 2; //模板ID
	required int32 endTime = 3; //结束时间
	required int32 qty = 4; //收集数量
	required int32 dmQty = 5; //需求数量
}

//==============================================================================================================================================
// ====== 主推消息.消息头从3000开始=================================================================================================================================
//==============================================================================================================================================
// msgType = 3000
// 服务器 -> 客户端
// 刷新资源
message RefreshMoney {
	required ResourceInfoRt res = 1;
}

// msgType = 3001
// 服务器 -> 客户端
// 玩家回城推送
message GoHome {
	required int32 walkTime = 1; //回城时间
	required int64 forceId = 2; //回城部队
	required int32 aimsX = 3; //目的地X
	required int32 aimsY = 4; //目的地Y
	required int32 startX = 5; //出发地X
	required int32 startY = 6; //出发地Y
	required int32 cancelWalkTime = 7; //半路折回取消行军的回城时间
	required int32 userWalkTime = 8; //需要的总时间
	required int64 armyGroupId = 9; //部队隶属军团ID
	required int32 forceArmy = 10; // 部队兵种
}

// msgType = 3002
// 服务器 -> 客户端
// 城池建造完毕主推
message BuildCityOver {
	required int64 playerId = 1; //主人ID
	required CityInfo cityInfo = 2; //城池信息
}

// msgType = 3003
// 服务器 -> 客户端
// 开始练兵推送
message StartTrain {
	required int64 forceId = 1; //部队ID
	required int32 endTime = 2; //结束时间
}

// msgType = 3004
// 服务器 -> 客户端
// 武将属性变化推送
message ValuesChange {
	repeated ValueChange vc = 1;
}

//武将属性变化信息
message ValueChange {
	required int64 heroId = 1; //武将ID
	required int32 changeType = 2; //变化的类型(1-兵力 2-状态(0-正常  1-重伤) 3-重伤回复时间 4-技能 5-兵力上限 6-兵种 7-武将2号技能 8-武将3号技能 9-格子ID 10-武将体力 11-武将体力上次更新时间 12-武将等级 13-武将经验 14-武将星级 15-武将觉醒级 16-武将1号技能 17-所带士兵ID) 19-位置状态  20-武将4号技能  21-升星结束时间变化  22-升阶结束时间变化 23-武将领主状态变化 24-武将领主状态的开始时间 25-武将领主状态的结束时间 26-武将领主被谁关了 30-英雄实力 31-兵团等级 32-所在后宅楼层
	required int64 nowValue = 3; //变化后的值
}

// msgType = 3005
// 服务器 -> 客户端
// 部队状态变化推送
message ForceStateChange {
	required int64 forceId = 1; //部队ID
	required int32 forceState = 2; //部队状态  	//部队状态  1-待命 2-行军 3-驻守 4-屯田 5-征兵 6-回城 7-练兵 8-对峙 9-集结 10-等待 11-调动 12-帮忙建造帮派战旗中 13-等待出发遗迹中
}

// msgType = 3006
// 服务器 -> 客户端
// 部队属性变化推送
message ForceValuesChange {
	repeated ForceValueChange vc = 1;
}

//部队属性变化信息
message ForceValueChange {
	required int64 forceId = 1; //部队ID
	required int32 changeType = 2; //变化的类型(1-某操作结束时间,如练兵屯田对峙等.2-当前X  3-当前Y 4-部队当前一级归属  5-部队当前二级归属 6- 部队隶属的军团ID  7-部队在军团中的位置 8-操作次数（练兵） 9.-总次数)
	required int64 nowValue = 3; //变化后的值
}

// msgType = 3007
// 服务器 -> 客户端
// 城池升级完毕主推
message CityParameterChange {
	repeated CityChangeInfo cityChangeInfo = 1;
}

message CityChangeInfo {
	required int64 cityId = 1; //城池ID
	required int32 changeType = 2; //变化类型 （1.城池耐久度上限  2.Cost值  3.出征队列  4.扩建次数上限 5.预备兵上限 6.开启队列前锋数量 7-部队容纳数变化 8.增加城池等级 9.要塞耐久上限）
	required int32 charngeValue = 3; //变化值
}

// msgType = 3008
// 服务器 -> 客户端
// 玩家属性变化主推
message PlayerChange {
	repeated PlayerChangeInfo playerChangeInfo = 1;
}
message PlayerChangeInfo {
	required int32 changeType = 1; //变化类型：1-存储上限 2-名望上限  3-名望值  4-建筑队列值  5-所属国家
	required int32 changeValue = 2; //变化值
}

// msgType = 3009
// 服务器 -> 客户端
// 产量变化主推
message YieldChange {
	required int32 addWood = 1;
	required int32 addIron = 2;
	required int32 addFood = 3;
	required int32 addStone = 4;
	required int32 addCoin = 6;
	required int32 calcTime = 5; // 计算时间点
}

// msgType = 3010
// 服务器 -> 客户端
// 武将信息变化主推
message HeroChange {
	repeated DetailedQueryHerosInFo heroInfo = 1; //武将信息
}

// msgType = 3011
// 服务器 -> 客户端
// 部队格子发生变化主推
message AddInForcesChange {
	repeated AddInForceChange addInForces = 1;
}


message AddInForceChange {
	required int32 changeType = 1; //变化类型 1-新增 2-删除 3-修改
	required AddInForce addInForces = 2; //武将信息
}

// msgType = 3012
// 服务器 -> 客户端
// 关系变化推送
// 1.2的推送对象:自己的联盟成员；设置自己的联盟为友好关系的联盟成员；设置自己的联盟为敌对关系的联盟成员    	消息：自己(pid)加入/退出联盟(aid)
// 3.4的推送对象:自己的联盟所有成员；自己的上级联盟的成员；自己的联盟的下属的成员							消息：自己（pid）被联盟(aid)沦陷或脱离沦陷
message RelationChange {
	required int32 type = 1; //变化类型:1-玩家(pid)加入联盟(aid) 2-玩家(pid)退出联盟(aid) 3-玩家(pid)被联盟(aid)沦陷 4-玩家(pid)从联盟(aid)脱离沦陷
	required int64 pid = 2; //玩家ID
	required int64 aid = 3; //联盟ID
	required string name = 4; //联盟名称
	required string shortName = 5; //联盟简称
}

// msgType = 3013
// 服务器 -> 客户端
// 建筑升级完毕主推
message BuildUpOverChange {
	required int64 cityId = 1; // 城池ID
	required int32 x = 2; // 位置x坐标
	required int32 y = 3; // 位置y坐标
	required int32 buildingType = 4; // 建筑ID 模板Id
	required int32 buildingLv = 5; // 等级
	required int64 buildingId = 6; // 建筑唯一ID
}

// msgType = 3014
// 服务器 -> 客户端
// 土地归属发生变化主推
message UpdateLandBelong {
	repeated NewEveryLandInfo lands = 1; //格子信息
	repeated CellPoint dels = 2; // 需要恢复成原始状态的地块坐标
}

message CellPoint {
	required int32 x = 1;
	required int32 y = 2;
}

// msgType = 3015
// 服务器 -> 客户端
// 令牌增加发生变化主推
message DecreeChange {
	optional int32 time = 1; //上次政令结算时间
	optional int32 decreeLimit = 2; //政令数量上限
	optional int32 decreeNum = 3; //当前政令数量
}

// msgType = 3016
// 服务器 -> 客户端
// 加入联盟申请推送
message AllianceJoinQtysChange {
	required int32 qtys = 1; //新加入联盟的申请数
}

// msgType = 3017
// 服务器 -> 客户端
// 联盟标记/集结请求变化推送
message AllianceMarksChange {
	required int32 flag = 1; //1-新增 2-修改 3-删除
	repeated AllianceMarkInfo marks = 2; //联盟标记
}

// msgType = 3018
// 服务器 -> 客户端
// 联盟信息变化推送
message AllianceInfoChange {
	required int64 id = 1; //联盟Id
	required string name = 2; //联盟名称
	required string shortName = 3; //联盟简称
	repeated int32 positions = 5; //职位：1-盟主 2-副盟主 3-指挥官 4-外交官 5-团长 6-普通成员 7-白虎成员 8-青龙成员 9-玄武成员 10-朱雀成员 11-白虎团长 12-青龙团长 13-玄武团长 14-朱雀团长
}

// msgType = 3019
// 服务器 -> 客户端
// 拆除建筑主推
message RemoveBuilding {
	required int32 x = 1; //坐标X
	required int32 y = 2; //坐标Y
	required int32 type = 3; //地的类型
	required int64 castleId = 4; //城池id
	required int32 state = 5; //地与我的关系  (1-自己 2-其他)
}

// msgType = 3020
// 服务器 -> 客户端
// 新增新部队主推
message AddNewForceInfo {
	required NewForceInfo forceInfo = 1; //部队信息
}

// msgType = 3021
// 服务器 -> 客户端
// 玩家失去正在建造中的城池
message LoseBuildCity {
	required int32 x = 1; //建造中城池的坐标X
	required int32 y = 2; //建造中城池的坐标Y
	required int32 type = 3; //正在建造的类型
}

// msgType = 3022
// 服务器 -> 客户端
// 断线返回登录页面
message ReturnLogin {
	required int32 opcode = 1; //1.踢下线  2.被封禁
}

// msgType = 3030
// 服务器 -> 客户端
// 提示信息
message ShowSystemInfo {
	required string langId = 1; // 语言包编号
	repeated string param = 2; // 参数
}

// msgType = 3031
// 服务器 -> 客户端
// 新增行军线主推
message AddWalkLine {
	repeated WalkInfo walkInfo = 1;
}

message WalkForceInfo {
	required int64 warningPlayerId = 1; // 进攻者ID
	required string warningPlayerName = 2; // 进攻者名字
	required int64 warningForceId = 3; // 进攻者部队ID
}

message WalkInfo {
	repeated WalkForceInfo walkForceInfos = 1; // 进攻者ID
	required int32 warningStartX = 3; // 进攻起点X
	required int32 warningStartY = 4; // 进攻起点Y
	required int32 warningGotoX = 5; // 目的地X
	required int32 warningGotoY = 6; // 目的地Y
	required int32 warningStartTime = 7; // 出发时间
	required int32 warningEndTime = 8; // 到达时间
	required int64 myAllianceId = 10; // 进攻者帮派的ID
	required int64 myUpAllianceId = 11; // 进攻者帮派的上级ID
	required int64 onlyId = 12; // 本条信息唯一主键
	required int32 isWarning = 13; // 是否预警  0-否 1-是
	required int32 warningSource = 14; // 本条信息来源 1-来自自己  2-来自盟友 3-来自下属
	required int32 usetime = 15; // 正常整条行军需要的时间
	required int32 walkType = 16; // 这条线对应的行军类型
	required int32 walkBus = 17; // 行军交通工具,传的是线的主人的炼金者协会建筑的等级
}

// msgType = 3032
// 服务器 -> 客户端
// 删除行军线主推
message RemoveWalkLine {
	repeated RemoveWalkLineInfo removeWalkLineInfo = 1;
}
message RemoveWalkLineInfo {
	required int64 onlyId = 1; // 需要删除的ID
	required int32 removeSource = 2; //删除信息来源 1-来自自己  2-来自盟友 3-来自下属
}

// msgType = 3033
// 服务器 -> 客户端
// 当前战报未读数
message NoReadFightInfoNum {
	required int32 num = 1; // 当前战报未读数
}

// msgType = 3034
// 服务器 -> 客户端
// 收到新私聊（群聊）消息主推
message NewMessageNum {
	required int32 chatRoomId = 1; // 聊天室id
	required string message = 2; // 聊天内容
}

// msgType = 3035
// 服务器 -> 客户端
// 任务操作
message TaskOperation {
	required int32 operationType = 1; //1-新增了一个任务  2-完成了一个任务  3-任务信息发生改变 (进度改变)
	required Task task = 2;
}

// msgType = 3037
// 服务器 -> 客户端
// 联盟捐献/换卡变化推送
message ExchangeDemandChange {
	required int32 flag = 1; //新需求标识（1-有新需求发布；0-更新需求列表）
}

// msgType = 3038
// 服务器 -> 客户端
// 玩家流浪后免战推送
message StrayFreeTimeChange {
	required int32 endTime = 1; //流浪后免战结束时间
}

// 联盟捐卡明细
message AllianceExchangeDetailInfo {
	required int64 playerId = 1; //玩家ID
	required string playerName = 2; //玩家名字
	required int32 qty = 3; //捐卡数量
}

// msgType = 3040
// 服务器 -> 客户端
// 击杀宝箱击杀数量更新
message ChestKillNumChange {
	required int32 num = 1; // 数量
}

// msgType = 3051
// 服务器 -> 客户端
// 玩家沦陷消息推送
message OccupiedChange {
	required int32 flag = 1; //沦陷首次推送标记 1-首次 0-非首次
	required int64 id = 2; //上级同盟ID
	required string name = 3; //上级同盟名称
	required string shortName = 4; //上级同盟简称
	required int64 playerId = 5; //攻击的玩家ID
	required string playerName = 6; //攻击的玩家名字
	required int32 at = 7; //沦陷时间
}

// msgType = 3052
// 服务器 -> 客户端
// 玩家失去分城推送
message LoseFencheng {
	required int64 cityId = 1; //失去的城池ID
}

// msgType = 3053
// 服务器 -> 客户端
// 玩家未读信息推送
message NoReadMessageChange {
	required int32 privateChat = 1; // 私人聊天室未读
	required int32 groupChat = 2; //群组聊天室未读
	required int32 systemMailNum = 3; // 邮件数量
}

// msgType = 3054
// 服务器 -> 客户端
// 玩家未读信息推送
message NewMessage {
	required int32 type = 1;
	required int64 chatRoomId = 2; // 聊天室唯一Id
}

// msgType = 3055
// 服务器 -> 客户端
// 游戏公告主推
message NoticeInfo {
	required Notice noticeInfos = 1; //公告内容
	required int32 noticeType = 2; //公告类型（1.屏幕中央 2.聊天框 3.屏幕中央+聊天框）
}

message Notice {
	required int32 readType = 1; //邮件结构体的读取类型 1-读lan (一般都是游戏内发的) 2-直接读取内容(一般都是后台发的)
	required string noticeLanId = 2; //公告内容lanId
	repeated string noticeParams = 3; //公告参数
}

// msgType = 3056
// 服务器 -> 客户端
// 被沦陷之后告诉帮友(非帮主)
message OccToEveryOne {
	required int64 playerId = 1; //玩家ID
}

// msgType = 3057
// 服务器 -> 客户端
// 联盟外交关系变化：客户端收到推送后，用新的联盟关系更新客户端已有的联盟关系（在服务端，中立的联盟外交关系是不保存的）
message RelationShipChange {
	repeated RelationShip relationShips = 1; //联盟关系:1-友好;2-敌对;3-中立
}

// msgType = 3058
// 服务器 -> 客户端
// 推送联盟旗帜变化信息
message AllianceFlagChange {
	required int32 color = 1; //旗帜的颜色（没有设置过，则值为0）
	required int32 style = 2; //旗帜的样式（没有设置过，则值为0）
	required int32 effect = 3; //旗帜的图案（没有设置过，则值为0）
}

// msgType = 3060
// 服务器 -> 客户端
// 玩家联盟成员变化推送（不包括自己）
message AllianceMemberChange {
	required int32 flag = 1; //1:加入联盟  2:离开联盟  3:踢出联盟  4:职位变更  5:上线  6:下线  7:迁城（导致所属国家发生变化）
	repeated MemberPlayerInfo members = 2; //联盟成员信息
}

// msgType = 3062
// 服务器 -> 客户端
// 新手引导步骤变化
message GuideChange {
	required int32 guideId = 1; // 当前步骤ID
}

// msgType = 3063
// 服务器 -> 客户端
// 天下大势任务ID改变
message WorldTaskChange {
	required int32 worldTaskId = 1;
}

// msgType = 3064
// 服务器 -> 客户端
// 太守府升级完成
message TaishoufuLvUpFin {
	required int32 lv = 1; //升级到的等级
	repeated int64 newArmyGroupIds = 2; //获得的新的军团ID
}

// msgType = 3065
// 服务器 -> 客户端
// 玩家身上的太守XY坐标变更
message PlayerTaishouXYChange {
	required int32 taishouX = 1;
	required int32 taishouY = 2;
}

// msgType = 3070
// 服务器 -> 客户端
//  聊天群 名字变化
message RoomInfoChange {
	required int64 roomId = 1; //聊天室id
	required string newName = 2; //聊天室新名字
}

// msgType = 3071
// 服务器 -> 客户端
//  聊天室新增成员
message RoomAddMember {
	required int64 roomId = 1; //聊天室id
	repeated GroupMember member = 2; //新成员
}

// msgType = 3072
// 服务器 -> 客户端
//  聊天室删除成员
message RoomDelMember {
	required int64 roomId = 1; //聊天室id
}

// msgType = 3073
// 服务器 -> 客户端
//  解散聊天室
message RoomDel {
	required int64 roomId = 1; //聊天室id
}



// msgType = 3075
// 服务器 -> 客户端
// 私聊、好友上下线主推
message EnterGameOffline {
	required int32 type = 1; //更新上下线信息(1:私聊/群组 2:好友)
	required int64 roomId = 2;
	required int64 playerId = 3;
	required int32 isOnline = 4;
}

// msgType = 3076
// 服务器 -> 客户端
// 群组聊天消息主推
message GroupChatInfo {
	required ChatInfo message = 1; //消息
}

// msgType = 3077
// 服务器 -> 客户端
// 历史聊天消息主推
message ChanelChatInfo {
	repeated ChatInfo chatInfos = 1; //频道历史消息
}

// msgType = 3078
// 服务器 -> 客户端
//  转让群主
message GroupGiveMaster {
	required int64 roomId = 1; //聊天室id
	required int64 newPlayerId = 2; //新群主ID
	required int64 oldPlayerId = 3; //old群主ID
}

// msgType = 3079
// 服务器 -> 客户端
// 私聊消息主推
message PrivateChatInfo {
	required ChatInfo message = 1; //消息
}

// msgType = 3080
// 服务器 -> 客户端
//  接收聊天消息
message NewChatMessage {
	required ChatInfo chatInfo = 1; //聊天消息
}

// msgType = 3081
// 服务器 -> 客户端
//  玩家物品背包变化
message BagChange {
	repeated BagChangeInfo changeInfo = 1;
}

message BagChangeInfo {
	required int32 changeType = 1; //变化的类型  1-新增  2-减少
	required int64 changeOnlyId = 2; //增减的物品唯一ID
	required int32 changeProtoId = 3; //增减的物品模板
	required int32 changeNum = 4; //增减的数量
	required int32 equipLv = 5; //装备强化等级
	repeated EquipProps props = 6; //装备属性
	required int32 equipExp = 7; //装备强化经验
}

message EquipProps {
	required int32 propAddress = 1; //属性位置
	repeated EquipProp propValues = 2; //属性
}
message EquipProp {
	required int32 propType = 1; //属性代号
	required int32 propValue = 2; //属性值
}


// msgType = 3085
// 玩家获取资源的推送
message AddResChange {
	optional int64 gold = 1; // 钻石
	optional int64 bindGold = 2; // 绑定钻石
	optional int64 coin = 3; // 铜币
	optional int64 wood = 4; // 木料
	optional int64 iron = 5; // 晶矿
	optional int64 stone = 6; // 石料
	optional int64 food = 7; // 粮食
	optional int32 decree = 8; // 政令
	optional int32 buildQueue = 9; // 建筑队列
	optional int32 fame = 10; // 声望
	optional int32 jjcCoin = 11; // 竞技币
	optional int64 honor = 12; // 荣誉值
	repeated AddResInfo heros = 13; // 武将
	required int32 resAction = 14; //触发行为
	optional int64 allianceCoin = 15; // 联盟币
	optional int64 heroExpPool = 16; // 武将英雄池
}

message AddResInfo {
	required int32 protoId = 1; // 武将/道具模版ID
	required int32 num = 2; // 数量
}

// msgType = 3090
// 推送正在进行中的副本信息
message FbOnStageMapChange {
	required int32 stageNo = 1; //关卡编号
	required int32 level = 2; //难度等级:1~简单;2~普通;3~困难
	required int32 runNum = 3; //累计行动次数
	required int32 heroDead = 4; //累计武将阵亡次数
	required int32 soldierDead = 5; //累计战损
	required int32 endTime = 6; //结束时间
	repeated FbStageCellInfo cells = 7; //地块信息
	repeated FbStageForceInfo forces = 8; //部队信息
	repeated FbForceGridInfo grids = 9; //格子信息
}

// msgType = 3091
// 推送正在进行中的副本的概要信息
message FbOnStageChange {
	required int32 stageNo = 1; //关卡编号
	required int32 level = 2; //难度等级:1~简单;2~普通;3~困难
	required int32 runNum = 3; //累计行动次数
	required int32 heroDead = 4; //累计武将阵亡次数
	required int32 soldierDead = 5; //累计战损
	required int32 endTime = 6; //结束时间
}

// msgType = 3092
// 推送正在进行中的副本的地块信息
message FbOnStageCellChange {
	required FbStageCellInfo cell = 1;
}

// msgType = 3093
// 推送正在进行中的副本的部队信息
message FbOnStageForceChange {
	required FbStageForceInfo force = 1;
}

// msgType = 3094
// 推送正在进行中的副本的格子信息
message FbOnStageGridsChange {
	repeated FbForceGridInfo grids = 1;
}

// msgType = 3099
// 完成/结束副本推送
message FbStageOverChange {
	required int32 flag = 1; //0-失败；1-通关
	required int32 star = 2; //通关星级
}

// msgType = 3100
// 联盟邮件新主题或新回复通知
message AllianceTopicReplyChange {
	required int64 topicId = 1; //新消息邮件主题ID
}

// msgType = 3101
// 请求捐卡信息推送
message AlliancePlayerDemandChange {
	required int32 protoId = 1; //武将模版ID
	required int32 unRead = 2; //未读消息数量
}

// msgType = 3102
// 获得新邮件推送
message GetNewMail {
	required int32 mailType = 1; //新获得的邮件类型
}

// msgType = 3103
// 立即播放下面的战斗
message PlayFightInfo {
	required EasyFightInfo easyFightInfo = 1; //简单战报
	required string detailFightInfo = 2; //战报
}
// msgType = 3104
// 礼包码使用结果推送 //结果---0：成功;1：校验码错误;2：时间过期;3：缺少参数;100：参数错误;104：活动批次的码失效;105：码已经失效;106：码不存在;107：活动过期;108：码超过使用次数;109：活动游戏编码错误;112：用户名非该码绑定用户
//  上面这些错误码都是游族那边给的,但是如果服务器连不上游族,服务器会主动返回这个消息给客户端,值只有一个 读的是我们自己的错误码: 27 // 远程连接无法访问
message CodeUseRt {
	optional int32 useRt = 1;
}

// msgType = 3105
// 地块上新来了部队
message ForceCome {
	required int32 x = 1;
	required int32 y = 2;
	repeated InCityForce comeForces = 3; //新来的部队集合
}

// msgType = 3106
// 地块上离开了部队
message ForceLeave {
	required int32 x = 1;
	required int32 y = 2;
	repeated int64 leaveForces = 3; //走掉的部队ID集合
}

// msgType = 3107
// 地块上土地建造信息变化
message BuildingInfoChangeForCellEvent {
	repeated BuildInfoForCellEvent buildInfoForCellEvent = 1;
}

message BuildInfoForCellEvent {
	required int32 x = 1;
	required int32 y = 2;
	required int32 isBuilding = 3; //是否正在被建造  0-没有 非0-正在建造的建筑类型
	required string buildName = 4; //玩家取得正在造的建筑名字
}

// msgType = 3108
// 玩家丢失的地块视野,客户端收到直接清除所有此地块上的视野信息
message RemoveAllForShiye {
	repeated RemoveXY removeXY = 1;
}

message RemoveXY {
	required int32 x = 1;
	required int32 y = 2; //玩家取得正在造的建筑名字
}

// msgType = 3109
// 服务器 -> 客户端
// 新增预警线线主推
message AddWarningLine {
	repeated WarningInfo warningInfo = 1;
}


message WarningInfo {
	repeated WalkForceInfo warningForceInfos = 1; // 进攻者ID
	required int32 warningStartX = 3; // 进攻起点X
	required int32 warningStartY = 4; // 进攻起点Y
	required int32 warningGotoX = 5; // 目的地X
	required int32 warningGotoY = 6; // 目的地Y
	required int32 warningStartTime = 7; // 出发时间
	required int32 warningEndTime = 8; // 到达时间
	required int64 myAllianceId = 10; // 进攻者帮派的ID
	required int64 myUpAllianceId = 11; // 进攻者帮派的上级ID
	required int64 onlyId = 12; // 本条信息唯一主键
	required int32 isWarning = 13; // 是否预警  0-否 1-是
	required int32 warningSource = 14; // 本条信息来源 1-来自自己  2-来自盟友 3-来自下属
	required int32 usetime = 15; // 正常整条行军需要的时间
	required int32 walkType = 16; // 这条线对应的行军类型
	required int32 walkBus = 17; // 行军交通工具,传的是线的主人的炼金者协会建筑的等级
}
// msgType = 3110
// 服务器 -> 客户端
// 删除预警线主推
message RemoveWarningLine {
	repeated RemoveWarningLineInfo removeWarningLineInfo = 1;
}
message RemoveWarningLineInfo {
	required int64 onlyId = 1; // 需要删除的ID
	required int32 removeSource = 2; //删除信息来源 1-来自自己  2-来自盟友 3-来自下属
}

// msgType = 3111
// 服务器 -> 客户端
// 爬塔券变化主推
message TowerNumChange {
	required int32 towerNum = 1; //爬塔券数量
	required int32 towerNumLastTime = 2; //爬塔券上次变化主推
}

// msgType = 3112
// 爬塔战斗结束推送战报
message TowerFightOver {
	required EasyFightInfo easyFightInfo = 1; //简单战报
	required string detailFightInfo = 2; //战报
	required int32 xinshouStep = 3; //新手层数
	required int32 putongStep = 4; //普通层数
	required int32 jingyingStep = 5; //精英层数
}

// msgType = 3113
// 爬塔进度到点刷新,客户端收到这个消息的时候不仅要修改怪物数据,还要把玩家当前的3个爬塔进度设置成0
message TowerRefresh {
	required string commonTowerInfo = 1; //当前普通爬塔数据
	required string eliteTowerInfo = 2; //当前精英爬塔数据
}

// msgType = 3114
// 联盟外交小红点推送
message AllianceWaijiaoCome {
}

// msgType = 3115
// 充值成功之后推送给客户端
message PaySuccess {
	required int32 payChannel = 1; // 支付渠道
	required int32 payNum = 2; // 充值金额   --(这个会是小数,所以是*1000传来的整数,你自己除以1000了用)
	required string payUnit = 3; // 充值单位
	required int32 payType = 4; // 充值类型
	required int32 payDiscount = 5; // 充值折扣
	required string payItem = 6; // 道具标识
	required string payOrderId = 7; // 订单标识
}

// msgType = 3116
// 推送给客户端新出现一个小红点
message NewRedPoint {
	required RedPoint redPoint = 1;
}

// msgType = 3117
// 推送给客户端隐藏一个小红点
message HideRedPoint {
	required RedPoint redPoint = 1;
}

message RedPoint {
	required int32 redPointType = 1; //红点类型 1-联盟外交 2-联盟标记 3-入帮申请 4-私聊未读消息小红点 5-群聊未读消息小红点 6-联盟帮助小红点 7-联盟科技优先小红点
	required int64 redPointId = 2; //红点在本类型中的子目录
	required int32 redPointShowTime = 3; //红点出现的时间戳
}

// msgType = 3118
// 删除N个武将
message DeleteHero {
	repeated int64 deleteHeroIds = 1; //被删除的武将的ids
}

// msgType = 3119
// 装备主人发生变化
message EquipMasterChange {
	repeated EquipMasterCh equipMasterChanges = 1; //变化的装备信息
}

message EquipMasterCh {
	required int64 equipId = 1; //装备ID
	required int64 heroId = 2; //武将ID  0表示被卸下
	required int32 part = 3; //部位
}

// msgType = 3120
// 推图信息变化
message MissionInfoChange {
	required int32 missionId = 1; //当前关卡ID
	required int32 missionDurability = 2; //当前关卡耐久 0表示配置满值 非0表示当前剩余耐久
}

// msgType = 3121
// 玩家科技信息变化
message ResearchChange {
	required ResearchInfo research = 1;
}

message ResearchInfo {
	required int32 researchId = 1; // 科技ID
	required int32 researchLv = 2; // 科技等级
	required int32 researchOverTime = 3; // 科技完成时间
	required int64 helperId = 4; // 帮助里面的唯一ID
}

// msgType = 3122
// 玩家获得帮助提示窗
message GetAllianceHelp {
	required string helpPlayerName = 1; // 帮助人的名字
	required int32 helpType = 2; // 被帮忙的类型
}

// msgType = 3123
// 玩家兵营信息变化
message BarracksChange {
	required int32 changeType = 1; //变化类别 1、造兵变化 2、兵变化 3-使用道具直接增加兵
	required BarracksInfo barracks = 2;
}

message BarracksInfo {
	required int32 soldierId = 1; // 士兵模板ID
	optional int32 soldierNum = 2; // 士兵数量
	optional int32 overTime = 3; // 造兵结束时间
	optional int32 nowMakeNum = 4; // 正在造的士兵数量
	optional int32 canCureNum = 5; // 当前可治疗的士兵数量
	optional int32 nowCureNum = 6; // 当前正在治疗的士兵数量
	optional int32 cureOverTime = 7; //治疗结束时间
	optional int32 cureQueue = 8; // 所属治疗队列
	optional int32 upNum = 9; // 当前正在晋升的数量
	optional int32 upToSoliderId = 10; // 正在晋升到的兵种ID
	optional int32 upOverTime = 11; // 晋升结束时间
	optional int32 canEventCureNum = 12; // 当前可治疗(活动)的士兵数量
	optional int32 nowEventCureNum = 13; // 当前正在治疗(活动)的士兵数量
	optional int32 eventCureOverTime = 14; //治疗(活动)结束时间
	optional int32 eventCureQueue = 15; // 所属治疗(活动)队列
	optional int32 makeNeedTime = 16; // 造兵需要时间
	optional int32 cureNeedTime = 17; // 治疗需要时间
	optional int32 eventCureNeedTime = 18; // 治疗(活动)需要时间
	optional int32 upNeedTime = 19; // 晋升需要时间
}

// msgType = 3124
// 建筑的某些公共信息变化的推送
message BuildInfoByAllianceHelp {
	required int64 cityId = 1; // 建筑所在城池ID
	required int32 buildType = 2; // 建筑类型
	required int32 x = 3; // 建筑位置坐标x
	required int32 y = 4; // 建筑位置坐标y
	required int64 helpId = 5; // 帮助表中的ID
	required int32 overTime = 6; // 建造结束时间
	required int64 buildingId = 7; // 建筑唯一ID
}

// msgType = 3125
// 玩家帮派科技变化信息
message AllianceResearchChange {
	required OpenAllianceResearchInfo research = 1;
}

// msgType = 3126
// 玩家帮派科技研发数据发生变化
message PlayerAllianceResearchChange {
	required int32 allianceResearchNum = 1; //联盟普通捐献次数
	required int32 lastAllianceResearchTime = 2; //上次联盟普通捐献次数回复时间
}

// msgType = 3127
// 服务器 -> 客户端
// 开始帮忙建造战旗推送
message StartBuildFlag {
	required int64 forceId = 1; //部队ID
	required int32 endTime = 2; //结束时间
}

// msgType = 3128
// 服务器 -> 客户端
// 帮忙建造战旗完毕推送给战旗主人时间变化推送
message BuildFlagEnd {
	required int32 x = 1; //战旗坐标
	required int32 y = 2; //战旗坐标
	required int32 endTime = 3; //新的结束时间,有可能会超过当前时间,心跳会马上在刷完成的
}
// msgType = 3129
// 服务器 -> 客户端
// 遗迹刷新时间变化
message RelicRefreshInfoChange {
	repeated RelicRefreshInfo relicRefreshInfos = 1; //各等级遗迹刷新信息
}

// msgType = 3130
// 服务器 -> 客户端
// 新增/删除遗迹车
message AddOrRemoveRelicBus {
	required int32 changeType = 1; // 1-新增  2-删除 3-更改
	required AddOrRemoveRelicBusInfo relicBusInfo = 2;
}

message AddOrRemoveRelicBusInfo {
	required int32 x = 1; //战旗坐标
	required int32 y = 2; //战旗坐标
	required int32 buildLv = 3; //团长炼金者协会建筑等级
	required int32 nowNum = 4; //当前人数
	required int64 busId = 5; //遗迹车ID
}

// msgType = 3131
// 服务器 -> 客户端
// 某一个时光之盒槽位变化
message TimeBoxInfoChange {
	required TimeBoxInfo timeBoxInfos = 1; // 时光之盒信息
}

// msgType = 3132
// 服务器 -> 客户端
// 天赋点变化
message TalentPointChange {
	repeated TalentPoint leftTalentPoint = 1; //剩余天赋点数
}

// msgType = 3133
// 服务器 -> 客户端
// VIP变化
message VipChange {
	optional int32 vipLv = 1; //vip等级
	optional int32 vipExp = 2; //vip经验
	optional int32 nextVipExp = 3; // 明天登陆获得的经验
	
}

// msgType = 3134
// 服务器 -> 客户端
// 君主经验变化
message KingExpChange {
	required int32 kingLv = 1; //君主等级
	required int32 kingExp = 2; //君主经验
}

// msgType = 3135
// 服务器 -> 客户端
// 进游戏时的public服推送过来的数据(通过game)
message EnterGamePublicRt {
	repeated RelationShip relationShips = 2; //联盟关系
	repeated MemberPlayerInfo members = 3; //联盟成员
	optional AllianceInfo allianceInfo = 4; //联盟信息
	optional int32 occupiedFlag = 5; //是否是首次沦陷提醒（本次）
	optional int64 occupiedById = 6; //上级同盟ID
	optional string occupiedByName = 7; //上级同盟名称
	optional string occupiedByShortName = 8; //上级同盟简称
	optional int32 occupiedByAt = 9; //被沦陷的时间
	optional int64 occupiedByPlayerId = 10; //攻击的玩家ID
	optional string occupiedByPlayerName = 11; //攻击的玩家名字
	optional int32 demandProtoId = 12; //请求捐卡的模版ID
	optional int32 demandUnRead = 13; //请求捐卡未读消息数量
	repeated AllianceMarkInfo allianceMarks = 14; //联盟标记列表
	repeated RedPoint redPoints = 15; //所有的小红点信息
	optional int32 noReadTopic = 16; //是否有未读的联盟邮件主题
	repeated int32 allianceWaijiaoTime = 17; //联盟外交前20条的发布时间
	optional AllianceLivenessVo allianceLivenessVo = 18; //联盟活跃度等级
	optional int32 rankLv = 19; //联盟段位等级
	repeated ChatInfo chatAllianceInfos = 21; //聊天历史
	optional int32 reqListNum = 22; //申请加入联盟的玩家数量
}


message AllianceLivenessVo {
	required int32 allianceLivenessLv = 1; //联盟活跃度等级
	required int32 allianceLivenessExp = 2; //联盟活跃度经验
	required int32 allianceLivenessScore = 3; //联盟今日获得的活跃度积分
	required int32 allianceLivenessGiftId = 4; //联盟今日获得的箱子ID
	required int32 allianceLivenessTodayLv = 5; //当天使用的活跃度等级
}

// msgType = 3136
// 服务器 -> 客户端
// 玩家锻造君主装备队列变化
message MakeKingEquipChange {
	required int32 changeType = 1; // 变化类型  1-新增  2-减少 3-修改
	required MakeKingEquipChangeVo makeKingEquipChangeVo = 2;
}
message MakeKingEquipChangeVo {
	required int64 id = 1; //唯一ID
	required int32 makeProto = 2; //制作表的ID
	required int32 heiyaoshiId = 3; //锻造的时候放入的黑曜石模版ID
	required int32 overTime = 4; //锻造的结束时间
	required int64 equipId = 5; //被操作的装备ID ,锻造的话是0
}

// msgType = 3137
// 服务器 -> 客户端
// 进游戏时的map服推送过来的数据
message EnterGameMapRt {
	repeated WalkGroup myWalks = 2; //自己的所有行军线路
	repeated WalkGroup warnWalks = 3; //预警信息
	repeated MassGroup massWalks = 4; //集结信息
}

// msgType = 3138
// 服务器 -> 客户端
// 玩家建筑收纳包中的数据
message BuildBagChange {
	required BuildBagInfo buildBagInfo = 1;
}
message BuildBagInfo {
	required int64 id = 1; //唯一ID
	required int32 buildProto = 2; //建筑模版
	required int32 num = 3; //数量
}

// msgType = 3139
// 服务器 -> 客户端
// 行军小人的位置更新
message WalkRobotUpdate {
	repeated WalkRobot walkRobots = 1;
}

message WalkRobot {
	required int32 startX = 1;
	required int32 startY = 2;
	required int32 gotoX = 3;
	required int32 gotoY = 4;
	required int64 playerId = 5;
	required int64 allianceId = 6;
	required int32 isGetMainHero = 8; // 是否携带领军领主回来 0-否 1-是
	required int64 startTime = 9;
	required int64 overTime = 10;
	required string playerName = 11;
	required string allianceShortName = 12;
	required int64 walkOnlyId = 13; // 这条线的唯一ID
	required int64 groupId = 14; //行军组Id
	required int32 isAtkMonsterHome = 15; //是否攻击魔物回城 0-否 1-是
	optional int64 targetAllianceId = 16; //目标联盟Id
	required int32 initialWalkTime = 17;//初始行军时间
	optional int32 kingHeroProtoId = 18;//领主英雄配置Id
	required int32 runType = 7; // 行军类型
	optional int32 goRunType = 20;//行军前往时的行军类型
	required int32 isGetResHome = 21;//是否带资源回城
	required float currentSpeed = 22;//当前速度
	required int32 photoId = 23;//领主头像
	
	optional int32 cellType = 24; // 土地上的元素类型 1-资源点 2-魔物 3-遗迹 4- 玩家城池 5-奇观 6-空地 7-联盟BOSS 8-世界Boss 9-据点 11-召唤魔物 12-尸体资源地

	optional int32 reslv = 25; // 等级
	optional int32 resType = 26; // 资源点类型
	
	optional int32 bossId = 27; // 如果类型是魔物的话,这个是monster表的id字段,模版与等级都可以取到
	
	optional int32 relicId = 28; // 如果类型是遗迹的话,这个是relic表的id字段,模版与等级都可以取到
	
	optional string targetPlayerName = 29;//目标玩家的名称
	optional string targetPlayerShortName = 30;//目标玩家简称
	optional int64 massId = 31; //集结Id 标识是否集结队伍
}

// msgType = 3140
// 服务器 -> 客户端
// 行军线的新增与删除
message WalkRobotShow {
	required int32 showTye = 1; // 1-新增  2-删除
	required WalkRobot walkRobots = 2;
}

// msgType = 3141
// 服务器 -> 客户端
// 战斗通知
message AttackNotice {
	optional string playerName = 1; //攻击的玩家名字
	optional int32 monsterId = 2; //攻击的魔物配置Id
	required int64 reportId = 3; //战报ID
}

// msgType = 3142
// 服务器 -> 客户端
// 行军组通知
message NoticeWalkGroupChange {
	required int32 changeType = 1; //1-新增  2-删除 3-更新
	required int32 walkGroupType = 2; //1-自身行军组 2-预警/运输线
	required WalkGroup walkGroup = 3; //新增的行军组
}

//行军组信息
message WalkGroup {
	required int64 groupId = 1; //行军组Id
	optional int32 startX = 2;
	optional int32 startY = 3;
	optional int32 gotoX = 4;
	optional int32 gotoY = 5;
	optional string taregetPlayerName = 6; //目标玩家名称
	optional int32 bossId = 7;
	optional int32 relicId = 8;
	optional int32 resType = 9;
	optional int32 resLv = 10;
	optional int32 startRunType = 11; //出发时的行军类型
	optional int32 runType = 12; //行军类型
	optional int32 forceState = 13;
	optional string haveRes = 16; //运输的资源
	optional int32 farmWeight = 17; //采集负重
	optional int32 startTime = 18; //开始时间
	optional int32 overTime = 19; //结束时间
	optional int64 walkOnlyId = 20; //这条线的唯一ID
	repeated ForceInfoInWalk forces = 21; //非预警部队信息
	optional WarningInfoInWalk warnInfo = 22; //预警部队信息
	optional int32 isConflict = 23; //是否行军冲突 0：否 1：是
	optional int64 massId = 24;//集结Id
	optional int32 initialWalkTime = 25;//初始行军时间
}

message ForceInfoInWalk {
	optional int64 playerId = 1;
	optional string playerName = 2;
	optional int32	playerPhoto = 3; //头像
	optional string allianceName = 4;
	optional string allianceShortName = 5;
	repeated HeroForWalk heros = 6;
	repeated SoliderForWalk soliders = 7;
}

message WarningInfoInWalk {
	optional int64 playerId = 2;
	optional string playerName = 3;
	optional int32 playerPhoto = 4; //头像
	optional string allianceName = 5;
	optional string allianceShortName = 6;
	optional int32 heroNum = 7; //英雄数量
	optional int32 soliderNum = 8; //士兵估算总量
	optional int32 isLordInForce = 9; //是否君主在部队内
	repeated HeroForWalk heros = 10; //英雄信息
	repeated SoliderByArmyType soldiersByType = 11; //士兵类别分类的估算值
	repeated SoliderForWalk vagueSoliders = 12; //士兵估算量
	repeated SoliderForWalk exactSoliders = 13; //士兵精确量
}

message SoliderByArmyType {
	required int32 armyType = 1; //兵种
	required int32 soliderCount = 2;
}

// msgType = 3143
// 服务器 -> 客户端
// 集结通知
message NoticeMassGroupChange {
	required int32 changeType = 1; //1-新增  2-删除 3-更新
	required MassGroup massGroup = 3; //集结组
}

message MassGroup {
	required int64 massId = 1;
	optional string massName = 2;
	optional int32 runType = 3;
	optional int64 mainPlayerId = 4;
	optional int32 startX = 5;
	optional int32 startY = 6;
	optional int32 gotoX = 7;
	optional int32 gotoY = 8;
	optional int64 targetId = 9; //目标Id（玩家、遗迹、奇观）
	optional MassPlayer selfPlayer = 10;
	optional MassPlayer targetPlayer = 11;
	optional int32 massState = 15; //集结状态
	optional int32 massTime = 16; //集结时间
	optional int32 massStartTime = 17; //集结开始时间
	optional int32 arriveTime = 18; //抵达时间
	optional int32 initialWalkTime = 12;//初始行军时间
	optional int64 groupId = 19;
	optional int32 maxSolider = 20; //最大可集结数量/最大可增援数量
	repeated MassForce forces = 21;
}

message MassPlayer {
	optional int64 playerId = 9; //目标玩家Id
	optional string name = 10; //目标玩家名称
	optional int32 photo = 11; //目标玩家头像
	optional int64 allianceId = 12; //目标玩家联盟Id
	optional string allianceName = 13; //目标联盟名称
	optional string allianceShortName = 14; //目标联盟名称
}

message MassForce {
	required MassPlayer player = 1;
	optional int64 groupId = 2; //加入集结的行军组Id
	optional int32 startTime = 3; //出发时间
	optional int32 arriveTime = 4; //抵达时间
	repeated HeroForWalk heros = 6;
	repeated SoliderForWalk soliders = 7;
	optional int32 initialWalkTime = 8;//初始行军时间
}

// msgType = 3144
// 服务器 -> 客户端
// 藏兵变化推送
message NoticeCaveChg {
	required int32 caveStarted = 1; // 藏兵开始，0：结束，1：开始
	optional CaveInfo info = 2; // 如果是藏兵开始，这个信息就是当前玩家的藏兵信息
}

// msgType = 3145
// 服务器 -> 客户端
// 获得一个联盟礼物
message GetNewAllianceGift {
	required AllianceGiftVo allianceGiftVo = 1; // 礼物
}

// msgType = 3146
// 服务器 -> 客户端
// 联盟大礼物数据发生变化
message AllianceGiftChange {
	required AllianceBigGiftVo allianceBigGiftVo = 1;
}

// msgType = 3150
// 服务器 -> 客户端
// 运输请求发生变化
message TransportRequestChange {
	required int32 changeType = 1;
	required TransportRequest req = 2;
}

//运输请求
message TransportRequest {
	required int64 transportReqId = 1;
	required string res = 2;
	required int64 playerId = 3;
	required string name = 4;
	required int32 photo = 5;
}

// msgType = 3151
// 服务器 -> 客户端
// buff变化
message BuffChange {
	required int32 changeType = 1; // 变化类型  1-新增  2-过期
	required BuffVo buff = 2;
}

message BuffVo {
	required int64 buffId = 1; // 服务器buff唯一ID
	required int32 buffProtoId = 2; // buff模版ID
	required int32 buffOverTime = 3; // buff过期时间
	required int32 buffStartTime = 4; // buff开始时间
}

// msgType = 3152
// 服务器 -> 客户端
// 联盟申请信息变化
message AllianceReqInfoChange {
	required int32 changeInfo = 1; // 推送类型  1-新增  2-减少
	required AllianceQueryReqListInfo allianceQueryReqListInfo = 2; // 信息
}

// msgType = 3153
// 服务器 -> 客户端
// 联盟帮助信息变化
message AllianceHelpInfoChange {
	required int32 changeInfo = 1; // 推送类型  1-新增  2-减少
	repeated int64 helpId = 2; // 变化的条目的唯一ID ,新增应该只需要增加这个字段的长度,减少的要判断客户端缓存里有没有这行.说不定已经没有了,如:建筑建造完毕推送客户端-1 但是客户端找不到缓存了,因为该玩家已经帮助过了,帮助的时候就-1了
}

// msgType = 3154
// 服务器 -> 客户端
// 通知lan
message NoticeLanMsg {
	required string lanId = 1;
	repeated string params = 2;
}

// msgType = 3155
// 服务器 -> 客户端
// 玩家活动信息发生变化
message PlayerActivityChange {
	required PlayerActivity playerActivity = 1;
}

// msgType = 3156
// 服务器 -> 客户端
// 玩家领奖中心变更
message PlayerRewardBagInfoChange {
	required int32 changeInfo = 1; // 推送类型  1-新增  2-减少
	repeated PlayerRewardBagInfo playerRewardBagInfos = 2; // 信息
}

message PlayerRewardBagInfo {
	required string reward = 1; // 奖励信息
	required string landId = 2; // 来源lanId
	repeated string lanParas = 3; //lan参数
	required int64 id = 4; // 数据行唯一ID
}

// msgType = 3157
// 服务器 -> 客户端
// 据点攻打次数变化主推
message StrongholdCountChange {
	optional int32 time = 1; //上次结算时间
	optional int32 strongholdLimit = 2; //上限
	optional int32 strongholdCount = 3; //当前次数
}

// msgType = 3158
// 服务器 -> 客户端
// 联盟活跃信息发生变化
message AllianceLivenessVoChange {
	required AllianceLivenessVo allianceLivenessVo = 1; //当前次数
}

// msgType = 3159
// 服务器 -> 客户端
// 联盟活跃度奖励个数
message AllianceMissionGiftNumChange {
	required int32 changeType = 1; // 变化类型 1-新增  2-减少 3- 重置
	required int32 changeValue = 2; // 变化数量
}

// msgType = 3160
// 服务器 -> 客户端
// 获得vip每日登陆奖励
message GetVipLoginReward {
	optional VipLoginReward rewardInfo = 1; //奖励信息
	required int32 continueOnlineDay = 2; //连续登陆天数
	required int32 getRewardOrNot = 3; //是否获取奖励 1是获得了每日奖励，0是还没有获得每日奖励
}

message VipLoginReward {
	required string currentReward = 1; //本次的奖励信息（vip经验）
	required string nextReward = 2; //下次的奖励信息（vip经验）
}

// msgType = 3161
// 服务器 -> 客户端
// 玩家实力变化
message PlayerPowerChange {
	required int64 playerPower = 1; //玩家实力
}

// msgType = 3162
// 服务器 -> 客户端
// 玩家监狱信息变化
message PlayerPrisonChange {
	required int32 changeType = 1; // 变化类型 1-新增/修改  2-减少 3-被清空,发这个状态的时候下面的结构体为空
	required PrisonInfo prisonInfo = 2; // 变化内容
}

// msgType = 3163
// 服务器 -> 客户端
// 玩家君主装备背包容量变化
message KingEquipBagNumChange {
	required int32 changeInfo = 1;
}

// msgType = 3164
// 服务器 -> 客户端
// 成就信息变化
message AchievementChange {
	required Achievement achievement = 1;//成就信息
}

// msgType = 3165
// 服务器 -> 客户端
// 产量上限变化主推
message StoreLimitChange {
	required int64 woodLimit = 1;
	required int64 ironLimit = 2;
	required int64 foodLimit = 3;
	required int64 stoneLimit = 4;
	required int64 coinLimit = 5;
}

// msgType = 3166
// 服务器 -> 客户端
// 官职变化主推
message CountryPositionChange {
	required int64 playerId = 1;//玩家ID
	required int32 currentPos = 2;//当前的官职信息
}

// msgType = 3167
// 服务器 -> 客户端
// 城池位置变化主推
message CastlePosChange {
	required int32 posX = 1;
	required int32 posY = 2;
}

// msgType = 3168
// 服务器 -> 客户端
// 建筑升级完毕主推
message InnerCityInfoChanged {
	required int32 op = 1;            	// 1新增 2删除 3 变化
	required InnerCityInfo innerCityInfo = 2;	// 建筑信息
}

// msgType = 3169
// 服务器 -> 客户端
// 奇观部队变化
message WonderForceChange {
	required int32 changeType = 1;// 1-新增 2-删除 3-更新
	repeated MassForce forces = 2;
}

// msgType = 3170
// 服务器 -> 客户端
// 赦免次数变化
message AmnestyCountChange {
	required int32 amnestyCount = 1;//赦免次数
}


// msgType = 3171
// 服务器 -> 客户端
// 收到消息请求110
message BigMapRef {
}

// msgType = 3172
// 服务器 -> 客户端
// 玩家的好友添加信息发生变化
message FriendApplyChange {
	required FriendApply friendApply = 1; // 加我为好友的人信息
}

// msgType = 3173
// 服务器 -> 客户端
// 有新的战报
message NewBattleReport {
	required BattleReportInfo report = 1;//战报信息 
}

// msgType = 3174
// 服务器 -> 客户端
// 狩猎变化
message HunterInfoChange {
	required int32 addOrDel = 1;//1、添加 2、删除 
	optional HunterInviteInfo inviteInfo = 2;//邀请信息
	optional HunterRecord recordInfo = 3;//猎杀记录
}

//个人猎杀记录
message HunterRecord {
	required int32 posX = 1;//坐标x
	required int32 posY = 2;//坐标Y
	optional int32 bossId = 3;//魔物配置Id
	optional int32 nowHp = 4;//当前血量
	optional int32 haveHunterNum = 5;//已猎杀的同盟人数
}

//猎杀邀请信息
message HunterInviteInfo {
	optional int64 inviteId = 1;//邀请Id
	optional int64 inviteTime = 2;//最新邀请时间
	optional int32 bossId = 3;//魔物配置Id
	optional int32 nowHp = 4;//当前血量
	optional int32 haveHunterNum = 5;//已猎杀的同盟人数
	required int64 pltAreaNo = 6;//区服Id
	required int32 posX = 7;//坐标x
	required int32 posY = 8;//坐标Y
}

// msgType = 3175
// 服务器 -> 客户端
// 推图体力变化
message StrengthChange {
	required int32 strength = 1;//体力值 
	required int32 strengthTime = 2;//玩家是当前体力值的时间 
}

// msgType = 3176
// 服务器 -> 客户端
// 魔物受伤信息
message MonsterDamageInfo {
	required int32 posX = 1;//坐标x
	required int32 posY = 2;//坐标Y
	required int32 bossId = 3;//魔物配置Id
	required int32 costHp = 4;//扣除的血量
	required int64 groupId = 5;//绑定的行军组Id
}

// msgType = 3177
// 客户端 -> 服务器
// 收藏数量变化
message MarkNumChange {
	required int32 changeInfo = 1;
}

// msgType = 3178
// 客户端 -> 服务器
// 竞技场排名变化
message ArenaRankChange {
	required int32 changeInfo = 1;
}

// msgType = 3179
// 客户端 -> 服务器
// 竞技奖励变化
message ArenaRewardGet {
	required int64 gold = 1; //钻石数量 
	required int64 jjCoin = 2; // 竞技b数量
}

// msgType = 3180
// 服务端 -> 客户端
// 后宅家具收集时间变化
message FurnitureProduceChange {
	repeated FurnitureTimeInfo furnitures = 1;
}

// msgType = 3181
// 服务端 -> 客户端
// 赎金变化
message PlayerRansomChange {
	required MyPrisonInfo prisonInfo = 1; // 变化内容
}

// msgType = 3182
// 服务端 -> 客户端
// 抽奖池变化
message LotteryChange {
	required LotteryInfo lotteryInfo = 1; // 变化内容
}

// msgType = 3183
// 服务器 -> 客户端
// 新图鉴开启
message NewLibraryItem {
	repeated int32 newItem = 1; // 新图鉴 1-装备 2-道具 3-卡片 4-魔物 5-怪物
}

// msgType = 3184
// 服务器 -> 客户端
// 奖励的推送
message GetRes {
	required int32 actionType = 1; // 奖励行为
	required string resString = 2; // 获得的奖励
}

// msgType = 3185
// 客户端 -> 服务器
// 好友信息变化
message FriendApplySuccess {
	required int32 type = 1; // 1：新增，2：修改，3：删除
	required FriendInfo friendInfo = 2; // 好友信息
}

// msgType = 3186
// 客户端 -> 服务器
// 好友分组变化
message FriendGroupChange {
	required int32 type = 1; // 1: 新增，2：修改，3：删除
	required GroupInfo groupInfo = 2; // 群组信息
}

// msgType = 3187
// 客户端 -> 服务器
// 活动入口开放时间
message ActivityEnterTimeChange {
	repeated ActivityEnterTimeInfo enterTimeInfo = 1; // 活动入口开放时间
}

// msgType = 3188
// 客户端 -> 服务器
// 进入游戏推聊天室信息
message EnterGameChatRoomInfo {
	required ChatRoom chatRoomInfo = 1;  // 上线时候一条条推
}

// msgType = 3189
// 客户端 -> 服务器
// 推陌生人的基本信息
message SendStrangerInfo {
	required FriendInfo strangerInfos = 1;  // 陌生人消息
}

// msgType = 3190
// 服务器 -> 客户端
// 击杀活动魔物
message KillActivityBossReport {
	required string playerName = 1;
	required string allianceShortName = 2;
	required int32 activityBossId = 3;
}

// msgType = 3191
// 服务器 -> 客户端
// 奇观被占领
message WonderOccupied {
	required int64 allianceId = 1; // 奇观占领联盟的Id
	required string allianceShortName = 2;
	required string allianceName = 3;
	required int64 playerId = 4; // 指挥官id
	required string playerName = 5;
	required int32 wonderProtoId = 6; // 被占领的奇观的模板Id
}

// msgType = 3192
// 服务器 -> 客户端
// 配置检测推送 (仅用于内部使用)
message CheckConfig {
	required string info = 1; // 推送的内容
}

// msgType = 3193
// 服务器 -> 客户端
// 迁服结果
message MoveServerResult {
	required ServerInfo serverInfo = 1;
	required int32 x = 2; // 迁服成功之后的新坐标X
	required int32 y = 3; // 迁服成功之后的新坐标Y

}

// msgType = 3194
// 服务器 -> 客户端
// 新手挑战结束
message NewPlayerActivityOver {
}

// msgType = 3200
// 服务端 -> 客户端
// home服返回
message EnterGameHomeRt {
	optional int64 worldId = 1; //服务器id
	optional string playerName = 2; //玩家名称
	repeated MarkInfo markInfo = 3; //玩家标记信息
    repeated int32 newMailNum = 4;//新邮件数量 数组数据依次是：系统邮件、联盟邮件、收藏邮件
	optional int32 shipCanExchange = 5; // 当前商船是否有东西可以兑换  0-无 1-有
	optional int32 shipNextRefTime = 6; // 商船下次刷新时间
	optional PlayerArenaInfo arenaInfo = 12;// 玩家竞技场信息
	optional ResourceInfoRt res = 13;	//资源信息
	optional YieldChange yields = 14; //资源总产量
	optional StoreLimitChange storageLimit = 15; //存储上限
	repeated InnerCityInfo innerCityInfo = 16; //内城建筑
	repeated DetailedQueryHerosInFo detailedQueryHerosInFo = 17; //武将信息
	optional int32 photoProtoId = 20; //玩家头像对应的武将模版ID
	repeated BagInfo bagInfo = 21; //背包物品信息
	optional int32 buildQuNum = 22; //玩家建筑队列 （废弃）
	optional int32 decreeBuyNum = 23; //今日已购买政令次数 (废弃)
	optional int32 decreeDayTime = 24; //最近购买时间 (废弃)
	optional int32 guideStep = 26; //新手引导步骤
	repeated int32 finishGuidelineId = 28; // 被动触发的已经完成的新手引导id
	optional int32 isFirstJoinAlliance = 68; // 玩家是否加入过联盟 0-否 1-是
	repeated ResearchInfo researchs = 69; // 玩家的科技信息
	optional int32 vipLv = 78; //vip等级
	optional int32 vipExp = 79; //vip经验
	repeated TalentPoint leftTalentPoint = 81; //剩余天赋点数
	repeated UnlockedTalent haveUnlockTalent = 82; //已解锁天赋
	optional int32 kingLv = 83; //君主等级
	optional int32 kingExp = 84; //君主经验
	repeated MakeKingEquipChangeVo makeKingEquipChangeVos = 85; // 玩家锻造君主装备信息
	optional int64 mainHeroId = 91; // 玩家领主ID
	repeated BankInfo bankInfo = 95; // 银行投资信息
	optional OnlineRewardInfo onlineRewardInfo = 111; // 玩家在线礼包信息
	optional int32 nowKingEquipPlan = 133;// 当前使用的君主装备方案ID
	repeated int32 newItem = 137;  // 图书馆新图鉴  新图鉴 1-装备 2-道具 3-卡片 4-魔物 5-怪物
	repeated FriendApply friendApplys = 139; // 加我为好友的人信息
	repeated FriendInfo friendInfos = 140; // 好友信息
	repeated GroupInfo groupInfos = 141; // 群组信息
	repeated FriendInfo strangerInfos = 142; // 陌生人信息(数据的结构和好友的一样而已)
	repeated Achievement homeAchievements = 143; //成就信息
	repeated Task homeTasks = 144; //我身上当前的任务
	optional int32 nowUnitTaskId = 145; // 章节任务进度
	repeated FriendInfo blackPlayerInfo = 146; // 黑名单信息
	optional int32 buyStrengthNum = 147;//今日购买体力次数 
	optional int32 lastBuyStrengthTime = 148;//上次购买体力时间
	optional int32 noReadFightInfoNum = 149; //未读战报数
	optional int32 jjcReportNum = 150; // 未读战报数量
	repeated int32 unlockArea = 151; // 解锁的区域
	repeated TimeBoxInfo timeBoxInfos = 152; //时光之盒信息
	repeated GiftBagInfo giftBagInfos = 153; // 礼包购买信息
	repeated MonthCardInfo monthCardInfos = 154; // 月卡信息
}

// ====================  4/3200号消息拆分  ====================
// msgType = 3300
// 服务器 -> 客户端
// 运输请求数据初始化(增量协议3150)
message TransportRequestInit {
    repeated TransportRequest req = 1;
}

// msgType = 3301
// 服务器 -> 客户端
// 玩家监狱信息初始化(3162)
message PlayerPrisonInit {
    repeated PrisonInfo prisonInfo = 1;
    optional int32 prisonKillNum = 2; //玩家杀人总数
}

// msgType = 3302
// 服务器 -> 客户端
// 成就信息初始化(3164)
message AchievementInit {
	repeated Achievement achievement = 1;
}

// msgType = 3303
// 服务器 -> 客户端
// 狩猎信息初始化(3174)
message HunterInfoInit {
	repeated HunterInviteInfo inviteInfo = 1;//邀请信息
	repeated HunterRecord recordInfo = 2;//猎杀记录
    optional int32 autoHunter = 3; //是否自动猎杀
	optional int32 autoUseEnergy = 4; //是否自动使用行动力
}

// msgType = 3304
// 服务器 -> 客户端
// 王国信息初始化
message WonderInfoInit {
    optional int32 currentPos = 116; //当前的官职信息
	optional int32 buffCoolTime = 117; //王国buff冷却时间
}

// msgType = 3305
// 服务器 -> 客户端
// 推图信息初始化
message InstanceInfoInit {
    repeated InstanceStar instanceStars = 131; // 挑战关的星数
	repeated InstanceUnitInfo instanceUnitInfos = 132; // 推图关卡信息
}

// msgType = 3350
// 服务器 -> 客户端
// 皮肤信息初始化
message SkinInfoInit {
	repeated SkinInfo skins = 1; // 皮肤信息
}

// msgType = 3351
// 服务器 -> 客户端
// 玩家额外信息初始化
message PlayerAddInfoInit {
    optional string nickName = 1; // 昵称
}

// msgType = 3352
// 服务器 -> 客户端
// 联盟礼物信息初始化
message AllianceGiftInfoInit {
    optional int32 openSendAllianceGift = 1; //是否开启联盟赠礼功能
}

// msgType = 3353
// 服务器 -> 客户端
// 标记信息初始化
message MarkInfoInit {
    optional int32 maxMark = 1; // 收藏上限
}

// msgType = 3354
// 服务器 -> 客户端
// 抽卡信息初始化
message LotteryInfoInit {
    repeated LotteryInfo lotteryInfos = 1; // 抽卡活动信息
}

// msgType = 3355
// 服务器 -> 客户端
// 推送客户端触发满额礼包
message TriggerQuotaBag {
	required QuotaBagInfo quotaBagInfo = 1; // 满额礼包信息
}

// msgType = 3356
// 服务器 -> 客户端
// 推送客户端触发礼包
message TriggerGiftBag {
	required GiftBagInfo giftBagInfo = 1; // 礼包信息
}

// msgType = 3357
// 服务器 -> 客户端
// 推送客户端满额礼包进度发生变动
message ChangeQuotaBagDegree {
	required QuotaBagInfo quotaBagInfo = 1; // 满额礼包信息
}

// msgType = 3358
// 服务器 -> 客户端
// 推送客户端满额礼包结束
message FinishQuotaBag {
	required QuotaBagInfo quotaBagInfo = 1; // 满额礼包信息
}

// msgType = 3359
// 服务器 -> 客户端
// 推送客户端购买礼包成功
message PayGiftBagSuccess {
	required GiftBagInfo giftBagInfo = 1; // 礼包信息
}

// msgType = 3360
// 服务器 -> 客户端
// 推送客户端购买月卡成功
message PayMonthCardSuccess {
	required MonthCardInfo monthCardInfo = 1; // 月卡信息
}