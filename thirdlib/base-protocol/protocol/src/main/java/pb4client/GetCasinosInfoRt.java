// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client2server.proto

package pb4client;

/**
 * Protobuf type {@code client2server.GetCasinosInfoRt}
 */
public  final class GetCasinosInfoRt extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:client2server.GetCasinosInfoRt)
    GetCasinosInfoRtOrBuilder {
  // Use GetCasinosInfoRt.newBuilder() to construct.
  private GetCasinosInfoRt(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private GetCasinosInfoRt() {
    rt_ = 0;
    blessCount_ = 0;
    blessType_ = 0;
    casinosId_ = 0;
    atkNormalBossCount_ = 0;
    atkHighBossCount_ = 0;
    isAtkNormalBoss_ = 0;
    isAtkHighBoss_ = 0;
    casinosFinishDate_ = 0;
    freeCount_ = 0;
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private GetCasinosInfoRt(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!parseUnknownField(input, unknownFields,
                                   extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
          case 8: {
            bitField0_ |= 0x00000001;
            rt_ = input.readInt32();
            break;
          }
          case 16: {
            bitField0_ |= 0x00000002;
            blessCount_ = input.readInt32();
            break;
          }
          case 24: {
            bitField0_ |= 0x00000004;
            blessType_ = input.readInt32();
            break;
          }
          case 32: {
            bitField0_ |= 0x00000008;
            casinosId_ = input.readInt32();
            break;
          }
          case 40: {
            bitField0_ |= 0x00000010;
            atkNormalBossCount_ = input.readInt32();
            break;
          }
          case 48: {
            bitField0_ |= 0x00000020;
            atkHighBossCount_ = input.readInt32();
            break;
          }
          case 56: {
            bitField0_ |= 0x00000040;
            isAtkNormalBoss_ = input.readInt32();
            break;
          }
          case 64: {
            bitField0_ |= 0x00000080;
            isAtkHighBoss_ = input.readInt32();
            break;
          }
          case 72: {
            bitField0_ |= 0x00000100;
            casinosFinishDate_ = input.readInt32();
            break;
          }
          case 80: {
            bitField0_ |= 0x00000200;
            freeCount_ = input.readInt32();
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return pb4client.War2GamePkt.internal_static_client2server_GetCasinosInfoRt_descriptor;
  }

  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return pb4client.War2GamePkt.internal_static_client2server_GetCasinosInfoRt_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            pb4client.GetCasinosInfoRt.class, pb4client.GetCasinosInfoRt.Builder.class);
  }

  private int bitField0_;
  public static final int RT_FIELD_NUMBER = 1;
  private int rt_;
  /**
   * <code>required int32 rt = 1;</code>
   */
  public boolean hasRt() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <code>required int32 rt = 1;</code>
   */
  public int getRt() {
    return rt_;
  }

  public static final int BLESSCOUNT_FIELD_NUMBER = 2;
  private int blessCount_;
  /**
   * <pre>
   * 祝福次数
   * </pre>
   *
   * <code>optional int32 blessCount = 2;</code>
   */
  public boolean hasBlessCount() {
    return ((bitField0_ & 0x00000002) == 0x00000002);
  }
  /**
   * <pre>
   * 祝福次数
   * </pre>
   *
   * <code>optional int32 blessCount = 2;</code>
   */
  public int getBlessCount() {
    return blessCount_;
  }

  public static final int BLESSTYPE_FIELD_NUMBER = 3;
  private int blessType_;
  /**
   * <pre>
   * 祝福的标签（0：没祝福 1普通 2精英)
   * </pre>
   *
   * <code>optional int32 blessType = 3;</code>
   */
  public boolean hasBlessType() {
    return ((bitField0_ & 0x00000004) == 0x00000004);
  }
  /**
   * <pre>
   * 祝福的标签（0：没祝福 1普通 2精英)
   * </pre>
   *
   * <code>optional int32 blessType = 3;</code>
   */
  public int getBlessType() {
    return blessType_;
  }

  public static final int CASINOSID_FIELD_NUMBER = 4;
  private int casinosId_;
  /**
   * <pre>
   * 该奖池id
   * </pre>
   *
   * <code>optional int32 casinosId = 4;</code>
   */
  public boolean hasCasinosId() {
    return ((bitField0_ & 0x00000008) == 0x00000008);
  }
  /**
   * <pre>
   * 该奖池id
   * </pre>
   *
   * <code>optional int32 casinosId = 4;</code>
   */
  public int getCasinosId() {
    return casinosId_;
  }

  public static final int ATKNORMALBOSSCOUNT_FIELD_NUMBER = 5;
  private int atkNormalBossCount_;
  /**
   * <pre>
   * 攻击普通小怪次数
   * </pre>
   *
   * <code>optional int32 atkNormalBossCount = 5;</code>
   */
  public boolean hasAtkNormalBossCount() {
    return ((bitField0_ & 0x00000010) == 0x00000010);
  }
  /**
   * <pre>
   * 攻击普通小怪次数
   * </pre>
   *
   * <code>optional int32 atkNormalBossCount = 5;</code>
   */
  public int getAtkNormalBossCount() {
    return atkNormalBossCount_;
  }

  public static final int ATKHIGHBOSSCOUNT_FIELD_NUMBER = 6;
  private int atkHighBossCount_;
  /**
   * <pre>
   * 攻击精英小怪次数
   * </pre>
   *
   * <code>optional int32 atkHighBossCount = 6;</code>
   */
  public boolean hasAtkHighBossCount() {
    return ((bitField0_ & 0x00000020) == 0x00000020);
  }
  /**
   * <pre>
   * 攻击精英小怪次数
   * </pre>
   *
   * <code>optional int32 atkHighBossCount = 6;</code>
   */
  public int getAtkHighBossCount() {
    return atkHighBossCount_;
  }

  public static final int ISATKNORMALBOSS_FIELD_NUMBER = 7;
  private int isAtkNormalBoss_;
  /**
   * <pre>
   * 是否在攻击普通boss， 0: 小怪，1：boss
   * </pre>
   *
   * <code>optional int32 isAtkNormalBoss = 7;</code>
   */
  public boolean hasIsAtkNormalBoss() {
    return ((bitField0_ & 0x00000040) == 0x00000040);
  }
  /**
   * <pre>
   * 是否在攻击普通boss， 0: 小怪，1：boss
   * </pre>
   *
   * <code>optional int32 isAtkNormalBoss = 7;</code>
   */
  public int getIsAtkNormalBoss() {
    return isAtkNormalBoss_;
  }

  public static final int ISATKHIGHBOSS_FIELD_NUMBER = 8;
  private int isAtkHighBoss_;
  /**
   * <pre>
   * 是否在攻击精英boss， 0: 小怪，1：boss,2:未解锁
   * </pre>
   *
   * <code>optional int32 isAtkHighBoss = 8;</code>
   */
  public boolean hasIsAtkHighBoss() {
    return ((bitField0_ & 0x00000080) == 0x00000080);
  }
  /**
   * <pre>
   * 是否在攻击精英boss， 0: 小怪，1：boss,2:未解锁
   * </pre>
   *
   * <code>optional int32 isAtkHighBoss = 8;</code>
   */
  public int getIsAtkHighBoss() {
    return isAtkHighBoss_;
  }

  public static final int CASINOSFINISHDATE_FIELD_NUMBER = 9;
  private int casinosFinishDate_;
  /**
   * <pre>
   * 该奖池结束时间
   * </pre>
   *
   * <code>optional int32 casinosFinishDate = 9;</code>
   */
  public boolean hasCasinosFinishDate() {
    return ((bitField0_ & 0x00000100) == 0x00000100);
  }
  /**
   * <pre>
   * 该奖池结束时间
   * </pre>
   *
   * <code>optional int32 casinosFinishDate = 9;</code>
   */
  public int getCasinosFinishDate() {
    return casinosFinishDate_;
  }

  public static final int FREECOUNT_FIELD_NUMBER = 10;
  private int freeCount_;
  /**
   * <pre>
   * 免费次数
   * </pre>
   *
   * <code>optional int32 freeCount = 10;</code>
   */
  public boolean hasFreeCount() {
    return ((bitField0_ & 0x00000200) == 0x00000200);
  }
  /**
   * <pre>
   * 免费次数
   * </pre>
   *
   * <code>optional int32 freeCount = 10;</code>
   */
  public int getFreeCount() {
    return freeCount_;
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    if (!hasRt()) {
      memoizedIsInitialized = 0;
      return false;
    }
    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      output.writeInt32(1, rt_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      output.writeInt32(2, blessCount_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      output.writeInt32(3, blessType_);
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      output.writeInt32(4, casinosId_);
    }
    if (((bitField0_ & 0x00000010) == 0x00000010)) {
      output.writeInt32(5, atkNormalBossCount_);
    }
    if (((bitField0_ & 0x00000020) == 0x00000020)) {
      output.writeInt32(6, atkHighBossCount_);
    }
    if (((bitField0_ & 0x00000040) == 0x00000040)) {
      output.writeInt32(7, isAtkNormalBoss_);
    }
    if (((bitField0_ & 0x00000080) == 0x00000080)) {
      output.writeInt32(8, isAtkHighBoss_);
    }
    if (((bitField0_ & 0x00000100) == 0x00000100)) {
      output.writeInt32(9, casinosFinishDate_);
    }
    if (((bitField0_ & 0x00000200) == 0x00000200)) {
      output.writeInt32(10, freeCount_);
    }
    unknownFields.writeTo(output);
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(1, rt_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(2, blessCount_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(3, blessType_);
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(4, casinosId_);
    }
    if (((bitField0_ & 0x00000010) == 0x00000010)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(5, atkNormalBossCount_);
    }
    if (((bitField0_ & 0x00000020) == 0x00000020)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(6, atkHighBossCount_);
    }
    if (((bitField0_ & 0x00000040) == 0x00000040)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(7, isAtkNormalBoss_);
    }
    if (((bitField0_ & 0x00000080) == 0x00000080)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(8, isAtkHighBoss_);
    }
    if (((bitField0_ & 0x00000100) == 0x00000100)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(9, casinosFinishDate_);
    }
    if (((bitField0_ & 0x00000200) == 0x00000200)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(10, freeCount_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof pb4client.GetCasinosInfoRt)) {
      return super.equals(obj);
    }
    pb4client.GetCasinosInfoRt other = (pb4client.GetCasinosInfoRt) obj;

    boolean result = true;
    result = result && (hasRt() == other.hasRt());
    if (hasRt()) {
      result = result && (getRt()
          == other.getRt());
    }
    result = result && (hasBlessCount() == other.hasBlessCount());
    if (hasBlessCount()) {
      result = result && (getBlessCount()
          == other.getBlessCount());
    }
    result = result && (hasBlessType() == other.hasBlessType());
    if (hasBlessType()) {
      result = result && (getBlessType()
          == other.getBlessType());
    }
    result = result && (hasCasinosId() == other.hasCasinosId());
    if (hasCasinosId()) {
      result = result && (getCasinosId()
          == other.getCasinosId());
    }
    result = result && (hasAtkNormalBossCount() == other.hasAtkNormalBossCount());
    if (hasAtkNormalBossCount()) {
      result = result && (getAtkNormalBossCount()
          == other.getAtkNormalBossCount());
    }
    result = result && (hasAtkHighBossCount() == other.hasAtkHighBossCount());
    if (hasAtkHighBossCount()) {
      result = result && (getAtkHighBossCount()
          == other.getAtkHighBossCount());
    }
    result = result && (hasIsAtkNormalBoss() == other.hasIsAtkNormalBoss());
    if (hasIsAtkNormalBoss()) {
      result = result && (getIsAtkNormalBoss()
          == other.getIsAtkNormalBoss());
    }
    result = result && (hasIsAtkHighBoss() == other.hasIsAtkHighBoss());
    if (hasIsAtkHighBoss()) {
      result = result && (getIsAtkHighBoss()
          == other.getIsAtkHighBoss());
    }
    result = result && (hasCasinosFinishDate() == other.hasCasinosFinishDate());
    if (hasCasinosFinishDate()) {
      result = result && (getCasinosFinishDate()
          == other.getCasinosFinishDate());
    }
    result = result && (hasFreeCount() == other.hasFreeCount());
    if (hasFreeCount()) {
      result = result && (getFreeCount()
          == other.getFreeCount());
    }
    result = result && unknownFields.equals(other.unknownFields);
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasRt()) {
      hash = (37 * hash) + RT_FIELD_NUMBER;
      hash = (53 * hash) + getRt();
    }
    if (hasBlessCount()) {
      hash = (37 * hash) + BLESSCOUNT_FIELD_NUMBER;
      hash = (53 * hash) + getBlessCount();
    }
    if (hasBlessType()) {
      hash = (37 * hash) + BLESSTYPE_FIELD_NUMBER;
      hash = (53 * hash) + getBlessType();
    }
    if (hasCasinosId()) {
      hash = (37 * hash) + CASINOSID_FIELD_NUMBER;
      hash = (53 * hash) + getCasinosId();
    }
    if (hasAtkNormalBossCount()) {
      hash = (37 * hash) + ATKNORMALBOSSCOUNT_FIELD_NUMBER;
      hash = (53 * hash) + getAtkNormalBossCount();
    }
    if (hasAtkHighBossCount()) {
      hash = (37 * hash) + ATKHIGHBOSSCOUNT_FIELD_NUMBER;
      hash = (53 * hash) + getAtkHighBossCount();
    }
    if (hasIsAtkNormalBoss()) {
      hash = (37 * hash) + ISATKNORMALBOSS_FIELD_NUMBER;
      hash = (53 * hash) + getIsAtkNormalBoss();
    }
    if (hasIsAtkHighBoss()) {
      hash = (37 * hash) + ISATKHIGHBOSS_FIELD_NUMBER;
      hash = (53 * hash) + getIsAtkHighBoss();
    }
    if (hasCasinosFinishDate()) {
      hash = (37 * hash) + CASINOSFINISHDATE_FIELD_NUMBER;
      hash = (53 * hash) + getCasinosFinishDate();
    }
    if (hasFreeCount()) {
      hash = (37 * hash) + FREECOUNT_FIELD_NUMBER;
      hash = (53 * hash) + getFreeCount();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static pb4client.GetCasinosInfoRt parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static pb4client.GetCasinosInfoRt parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static pb4client.GetCasinosInfoRt parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static pb4client.GetCasinosInfoRt parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static pb4client.GetCasinosInfoRt parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static pb4client.GetCasinosInfoRt parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static pb4client.GetCasinosInfoRt parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static pb4client.GetCasinosInfoRt parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static pb4client.GetCasinosInfoRt parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static pb4client.GetCasinosInfoRt parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static pb4client.GetCasinosInfoRt parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static pb4client.GetCasinosInfoRt parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(pb4client.GetCasinosInfoRt prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code client2server.GetCasinosInfoRt}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:client2server.GetCasinosInfoRt)
      pb4client.GetCasinosInfoRtOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return pb4client.War2GamePkt.internal_static_client2server_GetCasinosInfoRt_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return pb4client.War2GamePkt.internal_static_client2server_GetCasinosInfoRt_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              pb4client.GetCasinosInfoRt.class, pb4client.GetCasinosInfoRt.Builder.class);
    }

    // Construct using pb4client.GetCasinosInfoRt.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    public Builder clear() {
      super.clear();
      rt_ = 0;
      bitField0_ = (bitField0_ & ~0x00000001);
      blessCount_ = 0;
      bitField0_ = (bitField0_ & ~0x00000002);
      blessType_ = 0;
      bitField0_ = (bitField0_ & ~0x00000004);
      casinosId_ = 0;
      bitField0_ = (bitField0_ & ~0x00000008);
      atkNormalBossCount_ = 0;
      bitField0_ = (bitField0_ & ~0x00000010);
      atkHighBossCount_ = 0;
      bitField0_ = (bitField0_ & ~0x00000020);
      isAtkNormalBoss_ = 0;
      bitField0_ = (bitField0_ & ~0x00000040);
      isAtkHighBoss_ = 0;
      bitField0_ = (bitField0_ & ~0x00000080);
      casinosFinishDate_ = 0;
      bitField0_ = (bitField0_ & ~0x00000100);
      freeCount_ = 0;
      bitField0_ = (bitField0_ & ~0x00000200);
      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return pb4client.War2GamePkt.internal_static_client2server_GetCasinosInfoRt_descriptor;
    }

    public pb4client.GetCasinosInfoRt getDefaultInstanceForType() {
      return pb4client.GetCasinosInfoRt.getDefaultInstance();
    }

    public pb4client.GetCasinosInfoRt build() {
      pb4client.GetCasinosInfoRt result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public pb4client.GetCasinosInfoRt buildPartial() {
      pb4client.GetCasinosInfoRt result = new pb4client.GetCasinosInfoRt(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
        to_bitField0_ |= 0x00000001;
      }
      result.rt_ = rt_;
      if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
        to_bitField0_ |= 0x00000002;
      }
      result.blessCount_ = blessCount_;
      if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
        to_bitField0_ |= 0x00000004;
      }
      result.blessType_ = blessType_;
      if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
        to_bitField0_ |= 0x00000008;
      }
      result.casinosId_ = casinosId_;
      if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
        to_bitField0_ |= 0x00000010;
      }
      result.atkNormalBossCount_ = atkNormalBossCount_;
      if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
        to_bitField0_ |= 0x00000020;
      }
      result.atkHighBossCount_ = atkHighBossCount_;
      if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
        to_bitField0_ |= 0x00000040;
      }
      result.isAtkNormalBoss_ = isAtkNormalBoss_;
      if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
        to_bitField0_ |= 0x00000080;
      }
      result.isAtkHighBoss_ = isAtkHighBoss_;
      if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
        to_bitField0_ |= 0x00000100;
      }
      result.casinosFinishDate_ = casinosFinishDate_;
      if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
        to_bitField0_ |= 0x00000200;
      }
      result.freeCount_ = freeCount_;
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof pb4client.GetCasinosInfoRt) {
        return mergeFrom((pb4client.GetCasinosInfoRt)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(pb4client.GetCasinosInfoRt other) {
      if (other == pb4client.GetCasinosInfoRt.getDefaultInstance()) return this;
      if (other.hasRt()) {
        setRt(other.getRt());
      }
      if (other.hasBlessCount()) {
        setBlessCount(other.getBlessCount());
      }
      if (other.hasBlessType()) {
        setBlessType(other.getBlessType());
      }
      if (other.hasCasinosId()) {
        setCasinosId(other.getCasinosId());
      }
      if (other.hasAtkNormalBossCount()) {
        setAtkNormalBossCount(other.getAtkNormalBossCount());
      }
      if (other.hasAtkHighBossCount()) {
        setAtkHighBossCount(other.getAtkHighBossCount());
      }
      if (other.hasIsAtkNormalBoss()) {
        setIsAtkNormalBoss(other.getIsAtkNormalBoss());
      }
      if (other.hasIsAtkHighBoss()) {
        setIsAtkHighBoss(other.getIsAtkHighBoss());
      }
      if (other.hasCasinosFinishDate()) {
        setCasinosFinishDate(other.getCasinosFinishDate());
      }
      if (other.hasFreeCount()) {
        setFreeCount(other.getFreeCount());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      if (!hasRt()) {
        return false;
      }
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      pb4client.GetCasinosInfoRt parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (pb4client.GetCasinosInfoRt) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private int rt_ ;
    /**
     * <code>required int32 rt = 1;</code>
     */
    public boolean hasRt() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 rt = 1;</code>
     */
    public int getRt() {
      return rt_;
    }
    /**
     * <code>required int32 rt = 1;</code>
     */
    public Builder setRt(int value) {
      bitField0_ |= 0x00000001;
      rt_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>required int32 rt = 1;</code>
     */
    public Builder clearRt() {
      bitField0_ = (bitField0_ & ~0x00000001);
      rt_ = 0;
      onChanged();
      return this;
    }

    private int blessCount_ ;
    /**
     * <pre>
     * 祝福次数
     * </pre>
     *
     * <code>optional int32 blessCount = 2;</code>
     */
    public boolean hasBlessCount() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * 祝福次数
     * </pre>
     *
     * <code>optional int32 blessCount = 2;</code>
     */
    public int getBlessCount() {
      return blessCount_;
    }
    /**
     * <pre>
     * 祝福次数
     * </pre>
     *
     * <code>optional int32 blessCount = 2;</code>
     */
    public Builder setBlessCount(int value) {
      bitField0_ |= 0x00000002;
      blessCount_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 祝福次数
     * </pre>
     *
     * <code>optional int32 blessCount = 2;</code>
     */
    public Builder clearBlessCount() {
      bitField0_ = (bitField0_ & ~0x00000002);
      blessCount_ = 0;
      onChanged();
      return this;
    }

    private int blessType_ ;
    /**
     * <pre>
     * 祝福的标签（0：没祝福 1普通 2精英)
     * </pre>
     *
     * <code>optional int32 blessType = 3;</code>
     */
    public boolean hasBlessType() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     * 祝福的标签（0：没祝福 1普通 2精英)
     * </pre>
     *
     * <code>optional int32 blessType = 3;</code>
     */
    public int getBlessType() {
      return blessType_;
    }
    /**
     * <pre>
     * 祝福的标签（0：没祝福 1普通 2精英)
     * </pre>
     *
     * <code>optional int32 blessType = 3;</code>
     */
    public Builder setBlessType(int value) {
      bitField0_ |= 0x00000004;
      blessType_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 祝福的标签（0：没祝福 1普通 2精英)
     * </pre>
     *
     * <code>optional int32 blessType = 3;</code>
     */
    public Builder clearBlessType() {
      bitField0_ = (bitField0_ & ~0x00000004);
      blessType_ = 0;
      onChanged();
      return this;
    }

    private int casinosId_ ;
    /**
     * <pre>
     * 该奖池id
     * </pre>
     *
     * <code>optional int32 casinosId = 4;</code>
     */
    public boolean hasCasinosId() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     * 该奖池id
     * </pre>
     *
     * <code>optional int32 casinosId = 4;</code>
     */
    public int getCasinosId() {
      return casinosId_;
    }
    /**
     * <pre>
     * 该奖池id
     * </pre>
     *
     * <code>optional int32 casinosId = 4;</code>
     */
    public Builder setCasinosId(int value) {
      bitField0_ |= 0x00000008;
      casinosId_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 该奖池id
     * </pre>
     *
     * <code>optional int32 casinosId = 4;</code>
     */
    public Builder clearCasinosId() {
      bitField0_ = (bitField0_ & ~0x00000008);
      casinosId_ = 0;
      onChanged();
      return this;
    }

    private int atkNormalBossCount_ ;
    /**
     * <pre>
     * 攻击普通小怪次数
     * </pre>
     *
     * <code>optional int32 atkNormalBossCount = 5;</code>
     */
    public boolean hasAtkNormalBossCount() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <pre>
     * 攻击普通小怪次数
     * </pre>
     *
     * <code>optional int32 atkNormalBossCount = 5;</code>
     */
    public int getAtkNormalBossCount() {
      return atkNormalBossCount_;
    }
    /**
     * <pre>
     * 攻击普通小怪次数
     * </pre>
     *
     * <code>optional int32 atkNormalBossCount = 5;</code>
     */
    public Builder setAtkNormalBossCount(int value) {
      bitField0_ |= 0x00000010;
      atkNormalBossCount_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 攻击普通小怪次数
     * </pre>
     *
     * <code>optional int32 atkNormalBossCount = 5;</code>
     */
    public Builder clearAtkNormalBossCount() {
      bitField0_ = (bitField0_ & ~0x00000010);
      atkNormalBossCount_ = 0;
      onChanged();
      return this;
    }

    private int atkHighBossCount_ ;
    /**
     * <pre>
     * 攻击精英小怪次数
     * </pre>
     *
     * <code>optional int32 atkHighBossCount = 6;</code>
     */
    public boolean hasAtkHighBossCount() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <pre>
     * 攻击精英小怪次数
     * </pre>
     *
     * <code>optional int32 atkHighBossCount = 6;</code>
     */
    public int getAtkHighBossCount() {
      return atkHighBossCount_;
    }
    /**
     * <pre>
     * 攻击精英小怪次数
     * </pre>
     *
     * <code>optional int32 atkHighBossCount = 6;</code>
     */
    public Builder setAtkHighBossCount(int value) {
      bitField0_ |= 0x00000020;
      atkHighBossCount_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 攻击精英小怪次数
     * </pre>
     *
     * <code>optional int32 atkHighBossCount = 6;</code>
     */
    public Builder clearAtkHighBossCount() {
      bitField0_ = (bitField0_ & ~0x00000020);
      atkHighBossCount_ = 0;
      onChanged();
      return this;
    }

    private int isAtkNormalBoss_ ;
    /**
     * <pre>
     * 是否在攻击普通boss， 0: 小怪，1：boss
     * </pre>
     *
     * <code>optional int32 isAtkNormalBoss = 7;</code>
     */
    public boolean hasIsAtkNormalBoss() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <pre>
     * 是否在攻击普通boss， 0: 小怪，1：boss
     * </pre>
     *
     * <code>optional int32 isAtkNormalBoss = 7;</code>
     */
    public int getIsAtkNormalBoss() {
      return isAtkNormalBoss_;
    }
    /**
     * <pre>
     * 是否在攻击普通boss， 0: 小怪，1：boss
     * </pre>
     *
     * <code>optional int32 isAtkNormalBoss = 7;</code>
     */
    public Builder setIsAtkNormalBoss(int value) {
      bitField0_ |= 0x00000040;
      isAtkNormalBoss_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 是否在攻击普通boss， 0: 小怪，1：boss
     * </pre>
     *
     * <code>optional int32 isAtkNormalBoss = 7;</code>
     */
    public Builder clearIsAtkNormalBoss() {
      bitField0_ = (bitField0_ & ~0x00000040);
      isAtkNormalBoss_ = 0;
      onChanged();
      return this;
    }

    private int isAtkHighBoss_ ;
    /**
     * <pre>
     * 是否在攻击精英boss， 0: 小怪，1：boss,2:未解锁
     * </pre>
     *
     * <code>optional int32 isAtkHighBoss = 8;</code>
     */
    public boolean hasIsAtkHighBoss() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <pre>
     * 是否在攻击精英boss， 0: 小怪，1：boss,2:未解锁
     * </pre>
     *
     * <code>optional int32 isAtkHighBoss = 8;</code>
     */
    public int getIsAtkHighBoss() {
      return isAtkHighBoss_;
    }
    /**
     * <pre>
     * 是否在攻击精英boss， 0: 小怪，1：boss,2:未解锁
     * </pre>
     *
     * <code>optional int32 isAtkHighBoss = 8;</code>
     */
    public Builder setIsAtkHighBoss(int value) {
      bitField0_ |= 0x00000080;
      isAtkHighBoss_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 是否在攻击精英boss， 0: 小怪，1：boss,2:未解锁
     * </pre>
     *
     * <code>optional int32 isAtkHighBoss = 8;</code>
     */
    public Builder clearIsAtkHighBoss() {
      bitField0_ = (bitField0_ & ~0x00000080);
      isAtkHighBoss_ = 0;
      onChanged();
      return this;
    }

    private int casinosFinishDate_ ;
    /**
     * <pre>
     * 该奖池结束时间
     * </pre>
     *
     * <code>optional int32 casinosFinishDate = 9;</code>
     */
    public boolean hasCasinosFinishDate() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <pre>
     * 该奖池结束时间
     * </pre>
     *
     * <code>optional int32 casinosFinishDate = 9;</code>
     */
    public int getCasinosFinishDate() {
      return casinosFinishDate_;
    }
    /**
     * <pre>
     * 该奖池结束时间
     * </pre>
     *
     * <code>optional int32 casinosFinishDate = 9;</code>
     */
    public Builder setCasinosFinishDate(int value) {
      bitField0_ |= 0x00000100;
      casinosFinishDate_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 该奖池结束时间
     * </pre>
     *
     * <code>optional int32 casinosFinishDate = 9;</code>
     */
    public Builder clearCasinosFinishDate() {
      bitField0_ = (bitField0_ & ~0x00000100);
      casinosFinishDate_ = 0;
      onChanged();
      return this;
    }

    private int freeCount_ ;
    /**
     * <pre>
     * 免费次数
     * </pre>
     *
     * <code>optional int32 freeCount = 10;</code>
     */
    public boolean hasFreeCount() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <pre>
     * 免费次数
     * </pre>
     *
     * <code>optional int32 freeCount = 10;</code>
     */
    public int getFreeCount() {
      return freeCount_;
    }
    /**
     * <pre>
     * 免费次数
     * </pre>
     *
     * <code>optional int32 freeCount = 10;</code>
     */
    public Builder setFreeCount(int value) {
      bitField0_ |= 0x00000200;
      freeCount_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 免费次数
     * </pre>
     *
     * <code>optional int32 freeCount = 10;</code>
     */
    public Builder clearFreeCount() {
      bitField0_ = (bitField0_ & ~0x00000200);
      freeCount_ = 0;
      onChanged();
      return this;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:client2server.GetCasinosInfoRt)
  }

  // @@protoc_insertion_point(class_scope:client2server.GetCasinosInfoRt)
  private static final pb4client.GetCasinosInfoRt DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new pb4client.GetCasinosInfoRt();
  }

  public static pb4client.GetCasinosInfoRt getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  @java.lang.Deprecated public static final com.google.protobuf.Parser<GetCasinosInfoRt>
      PARSER = new com.google.protobuf.AbstractParser<GetCasinosInfoRt>() {
    public GetCasinosInfoRt parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
        return new GetCasinosInfoRt(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<GetCasinosInfoRt> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<GetCasinosInfoRt> getParserForType() {
    return PARSER;
  }

  public pb4client.GetCasinosInfoRt getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

