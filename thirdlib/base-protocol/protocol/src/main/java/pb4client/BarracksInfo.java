// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client2server.proto

package pb4client;

/**
 * Protobuf type {@code client2server.BarracksInfo}
 */
public  final class BarracksInfo extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:client2server.BarracksInfo)
    BarracksInfoOrBuilder {
  // Use BarracksInfo.newBuilder() to construct.
  private BarracksInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private BarracksInfo() {
    soldierId_ = 0;
    soldierNum_ = 0;
    overTime_ = 0;
    nowMakeNum_ = 0;
    canCureNum_ = 0;
    nowCureNum_ = 0;
    cureOverTime_ = 0;
    cureQueue_ = 0;
    upNum_ = 0;
    upToSoliderId_ = 0;
    upOverTime_ = 0;
    canEventCureNum_ = 0;
    nowEventCureNum_ = 0;
    eventCureOverTime_ = 0;
    eventCureQueue_ = 0;
    makeNeedTime_ = 0;
    cureNeedTime_ = 0;
    eventCureNeedTime_ = 0;
    upNeedTime_ = 0;
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private BarracksInfo(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!parseUnknownField(input, unknownFields,
                                   extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
          case 8: {
            bitField0_ |= 0x00000001;
            soldierId_ = input.readInt32();
            break;
          }
          case 16: {
            bitField0_ |= 0x00000002;
            soldierNum_ = input.readInt32();
            break;
          }
          case 24: {
            bitField0_ |= 0x00000004;
            overTime_ = input.readInt32();
            break;
          }
          case 32: {
            bitField0_ |= 0x00000008;
            nowMakeNum_ = input.readInt32();
            break;
          }
          case 40: {
            bitField0_ |= 0x00000010;
            canCureNum_ = input.readInt32();
            break;
          }
          case 48: {
            bitField0_ |= 0x00000020;
            nowCureNum_ = input.readInt32();
            break;
          }
          case 56: {
            bitField0_ |= 0x00000040;
            cureOverTime_ = input.readInt32();
            break;
          }
          case 64: {
            bitField0_ |= 0x00000080;
            cureQueue_ = input.readInt32();
            break;
          }
          case 72: {
            bitField0_ |= 0x00000100;
            upNum_ = input.readInt32();
            break;
          }
          case 80: {
            bitField0_ |= 0x00000200;
            upToSoliderId_ = input.readInt32();
            break;
          }
          case 88: {
            bitField0_ |= 0x00000400;
            upOverTime_ = input.readInt32();
            break;
          }
          case 96: {
            bitField0_ |= 0x00000800;
            canEventCureNum_ = input.readInt32();
            break;
          }
          case 104: {
            bitField0_ |= 0x00001000;
            nowEventCureNum_ = input.readInt32();
            break;
          }
          case 112: {
            bitField0_ |= 0x00002000;
            eventCureOverTime_ = input.readInt32();
            break;
          }
          case 120: {
            bitField0_ |= 0x00004000;
            eventCureQueue_ = input.readInt32();
            break;
          }
          case 128: {
            bitField0_ |= 0x00008000;
            makeNeedTime_ = input.readInt32();
            break;
          }
          case 136: {
            bitField0_ |= 0x00010000;
            cureNeedTime_ = input.readInt32();
            break;
          }
          case 144: {
            bitField0_ |= 0x00020000;
            eventCureNeedTime_ = input.readInt32();
            break;
          }
          case 152: {
            bitField0_ |= 0x00040000;
            upNeedTime_ = input.readInt32();
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return pb4client.War2GamePkt.internal_static_client2server_BarracksInfo_descriptor;
  }

  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return pb4client.War2GamePkt.internal_static_client2server_BarracksInfo_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            pb4client.BarracksInfo.class, pb4client.BarracksInfo.Builder.class);
  }

  private int bitField0_;
  public static final int SOLDIERID_FIELD_NUMBER = 1;
  private int soldierId_;
  /**
   * <pre>
   * 士兵模板ID
   * </pre>
   *
   * <code>required int32 soldierId = 1;</code>
   */
  public boolean hasSoldierId() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <pre>
   * 士兵模板ID
   * </pre>
   *
   * <code>required int32 soldierId = 1;</code>
   */
  public int getSoldierId() {
    return soldierId_;
  }

  public static final int SOLDIERNUM_FIELD_NUMBER = 2;
  private int soldierNum_;
  /**
   * <pre>
   * 士兵数量
   * </pre>
   *
   * <code>optional int32 soldierNum = 2;</code>
   */
  public boolean hasSoldierNum() {
    return ((bitField0_ & 0x00000002) == 0x00000002);
  }
  /**
   * <pre>
   * 士兵数量
   * </pre>
   *
   * <code>optional int32 soldierNum = 2;</code>
   */
  public int getSoldierNum() {
    return soldierNum_;
  }

  public static final int OVERTIME_FIELD_NUMBER = 3;
  private int overTime_;
  /**
   * <pre>
   * 造兵结束时间
   * </pre>
   *
   * <code>optional int32 overTime = 3;</code>
   */
  public boolean hasOverTime() {
    return ((bitField0_ & 0x00000004) == 0x00000004);
  }
  /**
   * <pre>
   * 造兵结束时间
   * </pre>
   *
   * <code>optional int32 overTime = 3;</code>
   */
  public int getOverTime() {
    return overTime_;
  }

  public static final int NOWMAKENUM_FIELD_NUMBER = 4;
  private int nowMakeNum_;
  /**
   * <pre>
   * 正在造的士兵数量
   * </pre>
   *
   * <code>optional int32 nowMakeNum = 4;</code>
   */
  public boolean hasNowMakeNum() {
    return ((bitField0_ & 0x00000008) == 0x00000008);
  }
  /**
   * <pre>
   * 正在造的士兵数量
   * </pre>
   *
   * <code>optional int32 nowMakeNum = 4;</code>
   */
  public int getNowMakeNum() {
    return nowMakeNum_;
  }

  public static final int CANCURENUM_FIELD_NUMBER = 5;
  private int canCureNum_;
  /**
   * <pre>
   * 当前可治疗的士兵数量
   * </pre>
   *
   * <code>optional int32 canCureNum = 5;</code>
   */
  public boolean hasCanCureNum() {
    return ((bitField0_ & 0x00000010) == 0x00000010);
  }
  /**
   * <pre>
   * 当前可治疗的士兵数量
   * </pre>
   *
   * <code>optional int32 canCureNum = 5;</code>
   */
  public int getCanCureNum() {
    return canCureNum_;
  }

  public static final int NOWCURENUM_FIELD_NUMBER = 6;
  private int nowCureNum_;
  /**
   * <pre>
   * 当前正在治疗的士兵数量
   * </pre>
   *
   * <code>optional int32 nowCureNum = 6;</code>
   */
  public boolean hasNowCureNum() {
    return ((bitField0_ & 0x00000020) == 0x00000020);
  }
  /**
   * <pre>
   * 当前正在治疗的士兵数量
   * </pre>
   *
   * <code>optional int32 nowCureNum = 6;</code>
   */
  public int getNowCureNum() {
    return nowCureNum_;
  }

  public static final int CUREOVERTIME_FIELD_NUMBER = 7;
  private int cureOverTime_;
  /**
   * <pre>
   *治疗结束时间
   * </pre>
   *
   * <code>optional int32 cureOverTime = 7;</code>
   */
  public boolean hasCureOverTime() {
    return ((bitField0_ & 0x00000040) == 0x00000040);
  }
  /**
   * <pre>
   *治疗结束时间
   * </pre>
   *
   * <code>optional int32 cureOverTime = 7;</code>
   */
  public int getCureOverTime() {
    return cureOverTime_;
  }

  public static final int CUREQUEUE_FIELD_NUMBER = 8;
  private int cureQueue_;
  /**
   * <pre>
   * 所属治疗队列
   * </pre>
   *
   * <code>optional int32 cureQueue = 8;</code>
   */
  public boolean hasCureQueue() {
    return ((bitField0_ & 0x00000080) == 0x00000080);
  }
  /**
   * <pre>
   * 所属治疗队列
   * </pre>
   *
   * <code>optional int32 cureQueue = 8;</code>
   */
  public int getCureQueue() {
    return cureQueue_;
  }

  public static final int UPNUM_FIELD_NUMBER = 9;
  private int upNum_;
  /**
   * <pre>
   * 当前正在晋升的数量
   * </pre>
   *
   * <code>optional int32 upNum = 9;</code>
   */
  public boolean hasUpNum() {
    return ((bitField0_ & 0x00000100) == 0x00000100);
  }
  /**
   * <pre>
   * 当前正在晋升的数量
   * </pre>
   *
   * <code>optional int32 upNum = 9;</code>
   */
  public int getUpNum() {
    return upNum_;
  }

  public static final int UPTOSOLIDERID_FIELD_NUMBER = 10;
  private int upToSoliderId_;
  /**
   * <pre>
   * 正在晋升到的兵种ID
   * </pre>
   *
   * <code>optional int32 upToSoliderId = 10;</code>
   */
  public boolean hasUpToSoliderId() {
    return ((bitField0_ & 0x00000200) == 0x00000200);
  }
  /**
   * <pre>
   * 正在晋升到的兵种ID
   * </pre>
   *
   * <code>optional int32 upToSoliderId = 10;</code>
   */
  public int getUpToSoliderId() {
    return upToSoliderId_;
  }

  public static final int UPOVERTIME_FIELD_NUMBER = 11;
  private int upOverTime_;
  /**
   * <pre>
   * 晋升结束时间
   * </pre>
   *
   * <code>optional int32 upOverTime = 11;</code>
   */
  public boolean hasUpOverTime() {
    return ((bitField0_ & 0x00000400) == 0x00000400);
  }
  /**
   * <pre>
   * 晋升结束时间
   * </pre>
   *
   * <code>optional int32 upOverTime = 11;</code>
   */
  public int getUpOverTime() {
    return upOverTime_;
  }

  public static final int CANEVENTCURENUM_FIELD_NUMBER = 12;
  private int canEventCureNum_;
  /**
   * <pre>
   * 当前可治疗(活动)的士兵数量
   * </pre>
   *
   * <code>optional int32 canEventCureNum = 12;</code>
   */
  public boolean hasCanEventCureNum() {
    return ((bitField0_ & 0x00000800) == 0x00000800);
  }
  /**
   * <pre>
   * 当前可治疗(活动)的士兵数量
   * </pre>
   *
   * <code>optional int32 canEventCureNum = 12;</code>
   */
  public int getCanEventCureNum() {
    return canEventCureNum_;
  }

  public static final int NOWEVENTCURENUM_FIELD_NUMBER = 13;
  private int nowEventCureNum_;
  /**
   * <pre>
   * 当前正在治疗(活动)的士兵数量
   * </pre>
   *
   * <code>optional int32 nowEventCureNum = 13;</code>
   */
  public boolean hasNowEventCureNum() {
    return ((bitField0_ & 0x00001000) == 0x00001000);
  }
  /**
   * <pre>
   * 当前正在治疗(活动)的士兵数量
   * </pre>
   *
   * <code>optional int32 nowEventCureNum = 13;</code>
   */
  public int getNowEventCureNum() {
    return nowEventCureNum_;
  }

  public static final int EVENTCUREOVERTIME_FIELD_NUMBER = 14;
  private int eventCureOverTime_;
  /**
   * <pre>
   *治疗(活动)结束时间
   * </pre>
   *
   * <code>optional int32 eventCureOverTime = 14;</code>
   */
  public boolean hasEventCureOverTime() {
    return ((bitField0_ & 0x00002000) == 0x00002000);
  }
  /**
   * <pre>
   *治疗(活动)结束时间
   * </pre>
   *
   * <code>optional int32 eventCureOverTime = 14;</code>
   */
  public int getEventCureOverTime() {
    return eventCureOverTime_;
  }

  public static final int EVENTCUREQUEUE_FIELD_NUMBER = 15;
  private int eventCureQueue_;
  /**
   * <pre>
   * 所属治疗(活动)队列
   * </pre>
   *
   * <code>optional int32 eventCureQueue = 15;</code>
   */
  public boolean hasEventCureQueue() {
    return ((bitField0_ & 0x00004000) == 0x00004000);
  }
  /**
   * <pre>
   * 所属治疗(活动)队列
   * </pre>
   *
   * <code>optional int32 eventCureQueue = 15;</code>
   */
  public int getEventCureQueue() {
    return eventCureQueue_;
  }

  public static final int MAKENEEDTIME_FIELD_NUMBER = 16;
  private int makeNeedTime_;
  /**
   * <pre>
   * 造兵需要时间
   * </pre>
   *
   * <code>optional int32 makeNeedTime = 16;</code>
   */
  public boolean hasMakeNeedTime() {
    return ((bitField0_ & 0x00008000) == 0x00008000);
  }
  /**
   * <pre>
   * 造兵需要时间
   * </pre>
   *
   * <code>optional int32 makeNeedTime = 16;</code>
   */
  public int getMakeNeedTime() {
    return makeNeedTime_;
  }

  public static final int CURENEEDTIME_FIELD_NUMBER = 17;
  private int cureNeedTime_;
  /**
   * <pre>
   * 治疗需要时间
   * </pre>
   *
   * <code>optional int32 cureNeedTime = 17;</code>
   */
  public boolean hasCureNeedTime() {
    return ((bitField0_ & 0x00010000) == 0x00010000);
  }
  /**
   * <pre>
   * 治疗需要时间
   * </pre>
   *
   * <code>optional int32 cureNeedTime = 17;</code>
   */
  public int getCureNeedTime() {
    return cureNeedTime_;
  }

  public static final int EVENTCURENEEDTIME_FIELD_NUMBER = 18;
  private int eventCureNeedTime_;
  /**
   * <pre>
   * 治疗(活动)需要时间
   * </pre>
   *
   * <code>optional int32 eventCureNeedTime = 18;</code>
   */
  public boolean hasEventCureNeedTime() {
    return ((bitField0_ & 0x00020000) == 0x00020000);
  }
  /**
   * <pre>
   * 治疗(活动)需要时间
   * </pre>
   *
   * <code>optional int32 eventCureNeedTime = 18;</code>
   */
  public int getEventCureNeedTime() {
    return eventCureNeedTime_;
  }

  public static final int UPNEEDTIME_FIELD_NUMBER = 19;
  private int upNeedTime_;
  /**
   * <pre>
   * 晋升需要时间
   * </pre>
   *
   * <code>optional int32 upNeedTime = 19;</code>
   */
  public boolean hasUpNeedTime() {
    return ((bitField0_ & 0x00040000) == 0x00040000);
  }
  /**
   * <pre>
   * 晋升需要时间
   * </pre>
   *
   * <code>optional int32 upNeedTime = 19;</code>
   */
  public int getUpNeedTime() {
    return upNeedTime_;
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    if (!hasSoldierId()) {
      memoizedIsInitialized = 0;
      return false;
    }
    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      output.writeInt32(1, soldierId_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      output.writeInt32(2, soldierNum_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      output.writeInt32(3, overTime_);
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      output.writeInt32(4, nowMakeNum_);
    }
    if (((bitField0_ & 0x00000010) == 0x00000010)) {
      output.writeInt32(5, canCureNum_);
    }
    if (((bitField0_ & 0x00000020) == 0x00000020)) {
      output.writeInt32(6, nowCureNum_);
    }
    if (((bitField0_ & 0x00000040) == 0x00000040)) {
      output.writeInt32(7, cureOverTime_);
    }
    if (((bitField0_ & 0x00000080) == 0x00000080)) {
      output.writeInt32(8, cureQueue_);
    }
    if (((bitField0_ & 0x00000100) == 0x00000100)) {
      output.writeInt32(9, upNum_);
    }
    if (((bitField0_ & 0x00000200) == 0x00000200)) {
      output.writeInt32(10, upToSoliderId_);
    }
    if (((bitField0_ & 0x00000400) == 0x00000400)) {
      output.writeInt32(11, upOverTime_);
    }
    if (((bitField0_ & 0x00000800) == 0x00000800)) {
      output.writeInt32(12, canEventCureNum_);
    }
    if (((bitField0_ & 0x00001000) == 0x00001000)) {
      output.writeInt32(13, nowEventCureNum_);
    }
    if (((bitField0_ & 0x00002000) == 0x00002000)) {
      output.writeInt32(14, eventCureOverTime_);
    }
    if (((bitField0_ & 0x00004000) == 0x00004000)) {
      output.writeInt32(15, eventCureQueue_);
    }
    if (((bitField0_ & 0x00008000) == 0x00008000)) {
      output.writeInt32(16, makeNeedTime_);
    }
    if (((bitField0_ & 0x00010000) == 0x00010000)) {
      output.writeInt32(17, cureNeedTime_);
    }
    if (((bitField0_ & 0x00020000) == 0x00020000)) {
      output.writeInt32(18, eventCureNeedTime_);
    }
    if (((bitField0_ & 0x00040000) == 0x00040000)) {
      output.writeInt32(19, upNeedTime_);
    }
    unknownFields.writeTo(output);
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(1, soldierId_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(2, soldierNum_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(3, overTime_);
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(4, nowMakeNum_);
    }
    if (((bitField0_ & 0x00000010) == 0x00000010)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(5, canCureNum_);
    }
    if (((bitField0_ & 0x00000020) == 0x00000020)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(6, nowCureNum_);
    }
    if (((bitField0_ & 0x00000040) == 0x00000040)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(7, cureOverTime_);
    }
    if (((bitField0_ & 0x00000080) == 0x00000080)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(8, cureQueue_);
    }
    if (((bitField0_ & 0x00000100) == 0x00000100)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(9, upNum_);
    }
    if (((bitField0_ & 0x00000200) == 0x00000200)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(10, upToSoliderId_);
    }
    if (((bitField0_ & 0x00000400) == 0x00000400)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(11, upOverTime_);
    }
    if (((bitField0_ & 0x00000800) == 0x00000800)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(12, canEventCureNum_);
    }
    if (((bitField0_ & 0x00001000) == 0x00001000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(13, nowEventCureNum_);
    }
    if (((bitField0_ & 0x00002000) == 0x00002000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(14, eventCureOverTime_);
    }
    if (((bitField0_ & 0x00004000) == 0x00004000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(15, eventCureQueue_);
    }
    if (((bitField0_ & 0x00008000) == 0x00008000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(16, makeNeedTime_);
    }
    if (((bitField0_ & 0x00010000) == 0x00010000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(17, cureNeedTime_);
    }
    if (((bitField0_ & 0x00020000) == 0x00020000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(18, eventCureNeedTime_);
    }
    if (((bitField0_ & 0x00040000) == 0x00040000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(19, upNeedTime_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof pb4client.BarracksInfo)) {
      return super.equals(obj);
    }
    pb4client.BarracksInfo other = (pb4client.BarracksInfo) obj;

    boolean result = true;
    result = result && (hasSoldierId() == other.hasSoldierId());
    if (hasSoldierId()) {
      result = result && (getSoldierId()
          == other.getSoldierId());
    }
    result = result && (hasSoldierNum() == other.hasSoldierNum());
    if (hasSoldierNum()) {
      result = result && (getSoldierNum()
          == other.getSoldierNum());
    }
    result = result && (hasOverTime() == other.hasOverTime());
    if (hasOverTime()) {
      result = result && (getOverTime()
          == other.getOverTime());
    }
    result = result && (hasNowMakeNum() == other.hasNowMakeNum());
    if (hasNowMakeNum()) {
      result = result && (getNowMakeNum()
          == other.getNowMakeNum());
    }
    result = result && (hasCanCureNum() == other.hasCanCureNum());
    if (hasCanCureNum()) {
      result = result && (getCanCureNum()
          == other.getCanCureNum());
    }
    result = result && (hasNowCureNum() == other.hasNowCureNum());
    if (hasNowCureNum()) {
      result = result && (getNowCureNum()
          == other.getNowCureNum());
    }
    result = result && (hasCureOverTime() == other.hasCureOverTime());
    if (hasCureOverTime()) {
      result = result && (getCureOverTime()
          == other.getCureOverTime());
    }
    result = result && (hasCureQueue() == other.hasCureQueue());
    if (hasCureQueue()) {
      result = result && (getCureQueue()
          == other.getCureQueue());
    }
    result = result && (hasUpNum() == other.hasUpNum());
    if (hasUpNum()) {
      result = result && (getUpNum()
          == other.getUpNum());
    }
    result = result && (hasUpToSoliderId() == other.hasUpToSoliderId());
    if (hasUpToSoliderId()) {
      result = result && (getUpToSoliderId()
          == other.getUpToSoliderId());
    }
    result = result && (hasUpOverTime() == other.hasUpOverTime());
    if (hasUpOverTime()) {
      result = result && (getUpOverTime()
          == other.getUpOverTime());
    }
    result = result && (hasCanEventCureNum() == other.hasCanEventCureNum());
    if (hasCanEventCureNum()) {
      result = result && (getCanEventCureNum()
          == other.getCanEventCureNum());
    }
    result = result && (hasNowEventCureNum() == other.hasNowEventCureNum());
    if (hasNowEventCureNum()) {
      result = result && (getNowEventCureNum()
          == other.getNowEventCureNum());
    }
    result = result && (hasEventCureOverTime() == other.hasEventCureOverTime());
    if (hasEventCureOverTime()) {
      result = result && (getEventCureOverTime()
          == other.getEventCureOverTime());
    }
    result = result && (hasEventCureQueue() == other.hasEventCureQueue());
    if (hasEventCureQueue()) {
      result = result && (getEventCureQueue()
          == other.getEventCureQueue());
    }
    result = result && (hasMakeNeedTime() == other.hasMakeNeedTime());
    if (hasMakeNeedTime()) {
      result = result && (getMakeNeedTime()
          == other.getMakeNeedTime());
    }
    result = result && (hasCureNeedTime() == other.hasCureNeedTime());
    if (hasCureNeedTime()) {
      result = result && (getCureNeedTime()
          == other.getCureNeedTime());
    }
    result = result && (hasEventCureNeedTime() == other.hasEventCureNeedTime());
    if (hasEventCureNeedTime()) {
      result = result && (getEventCureNeedTime()
          == other.getEventCureNeedTime());
    }
    result = result && (hasUpNeedTime() == other.hasUpNeedTime());
    if (hasUpNeedTime()) {
      result = result && (getUpNeedTime()
          == other.getUpNeedTime());
    }
    result = result && unknownFields.equals(other.unknownFields);
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasSoldierId()) {
      hash = (37 * hash) + SOLDIERID_FIELD_NUMBER;
      hash = (53 * hash) + getSoldierId();
    }
    if (hasSoldierNum()) {
      hash = (37 * hash) + SOLDIERNUM_FIELD_NUMBER;
      hash = (53 * hash) + getSoldierNum();
    }
    if (hasOverTime()) {
      hash = (37 * hash) + OVERTIME_FIELD_NUMBER;
      hash = (53 * hash) + getOverTime();
    }
    if (hasNowMakeNum()) {
      hash = (37 * hash) + NOWMAKENUM_FIELD_NUMBER;
      hash = (53 * hash) + getNowMakeNum();
    }
    if (hasCanCureNum()) {
      hash = (37 * hash) + CANCURENUM_FIELD_NUMBER;
      hash = (53 * hash) + getCanCureNum();
    }
    if (hasNowCureNum()) {
      hash = (37 * hash) + NOWCURENUM_FIELD_NUMBER;
      hash = (53 * hash) + getNowCureNum();
    }
    if (hasCureOverTime()) {
      hash = (37 * hash) + CUREOVERTIME_FIELD_NUMBER;
      hash = (53 * hash) + getCureOverTime();
    }
    if (hasCureQueue()) {
      hash = (37 * hash) + CUREQUEUE_FIELD_NUMBER;
      hash = (53 * hash) + getCureQueue();
    }
    if (hasUpNum()) {
      hash = (37 * hash) + UPNUM_FIELD_NUMBER;
      hash = (53 * hash) + getUpNum();
    }
    if (hasUpToSoliderId()) {
      hash = (37 * hash) + UPTOSOLIDERID_FIELD_NUMBER;
      hash = (53 * hash) + getUpToSoliderId();
    }
    if (hasUpOverTime()) {
      hash = (37 * hash) + UPOVERTIME_FIELD_NUMBER;
      hash = (53 * hash) + getUpOverTime();
    }
    if (hasCanEventCureNum()) {
      hash = (37 * hash) + CANEVENTCURENUM_FIELD_NUMBER;
      hash = (53 * hash) + getCanEventCureNum();
    }
    if (hasNowEventCureNum()) {
      hash = (37 * hash) + NOWEVENTCURENUM_FIELD_NUMBER;
      hash = (53 * hash) + getNowEventCureNum();
    }
    if (hasEventCureOverTime()) {
      hash = (37 * hash) + EVENTCUREOVERTIME_FIELD_NUMBER;
      hash = (53 * hash) + getEventCureOverTime();
    }
    if (hasEventCureQueue()) {
      hash = (37 * hash) + EVENTCUREQUEUE_FIELD_NUMBER;
      hash = (53 * hash) + getEventCureQueue();
    }
    if (hasMakeNeedTime()) {
      hash = (37 * hash) + MAKENEEDTIME_FIELD_NUMBER;
      hash = (53 * hash) + getMakeNeedTime();
    }
    if (hasCureNeedTime()) {
      hash = (37 * hash) + CURENEEDTIME_FIELD_NUMBER;
      hash = (53 * hash) + getCureNeedTime();
    }
    if (hasEventCureNeedTime()) {
      hash = (37 * hash) + EVENTCURENEEDTIME_FIELD_NUMBER;
      hash = (53 * hash) + getEventCureNeedTime();
    }
    if (hasUpNeedTime()) {
      hash = (37 * hash) + UPNEEDTIME_FIELD_NUMBER;
      hash = (53 * hash) + getUpNeedTime();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static pb4client.BarracksInfo parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static pb4client.BarracksInfo parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static pb4client.BarracksInfo parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static pb4client.BarracksInfo parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static pb4client.BarracksInfo parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static pb4client.BarracksInfo parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static pb4client.BarracksInfo parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static pb4client.BarracksInfo parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static pb4client.BarracksInfo parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static pb4client.BarracksInfo parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static pb4client.BarracksInfo parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static pb4client.BarracksInfo parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(pb4client.BarracksInfo prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code client2server.BarracksInfo}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:client2server.BarracksInfo)
      pb4client.BarracksInfoOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return pb4client.War2GamePkt.internal_static_client2server_BarracksInfo_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return pb4client.War2GamePkt.internal_static_client2server_BarracksInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              pb4client.BarracksInfo.class, pb4client.BarracksInfo.Builder.class);
    }

    // Construct using pb4client.BarracksInfo.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    public Builder clear() {
      super.clear();
      soldierId_ = 0;
      bitField0_ = (bitField0_ & ~0x00000001);
      soldierNum_ = 0;
      bitField0_ = (bitField0_ & ~0x00000002);
      overTime_ = 0;
      bitField0_ = (bitField0_ & ~0x00000004);
      nowMakeNum_ = 0;
      bitField0_ = (bitField0_ & ~0x00000008);
      canCureNum_ = 0;
      bitField0_ = (bitField0_ & ~0x00000010);
      nowCureNum_ = 0;
      bitField0_ = (bitField0_ & ~0x00000020);
      cureOverTime_ = 0;
      bitField0_ = (bitField0_ & ~0x00000040);
      cureQueue_ = 0;
      bitField0_ = (bitField0_ & ~0x00000080);
      upNum_ = 0;
      bitField0_ = (bitField0_ & ~0x00000100);
      upToSoliderId_ = 0;
      bitField0_ = (bitField0_ & ~0x00000200);
      upOverTime_ = 0;
      bitField0_ = (bitField0_ & ~0x00000400);
      canEventCureNum_ = 0;
      bitField0_ = (bitField0_ & ~0x00000800);
      nowEventCureNum_ = 0;
      bitField0_ = (bitField0_ & ~0x00001000);
      eventCureOverTime_ = 0;
      bitField0_ = (bitField0_ & ~0x00002000);
      eventCureQueue_ = 0;
      bitField0_ = (bitField0_ & ~0x00004000);
      makeNeedTime_ = 0;
      bitField0_ = (bitField0_ & ~0x00008000);
      cureNeedTime_ = 0;
      bitField0_ = (bitField0_ & ~0x00010000);
      eventCureNeedTime_ = 0;
      bitField0_ = (bitField0_ & ~0x00020000);
      upNeedTime_ = 0;
      bitField0_ = (bitField0_ & ~0x00040000);
      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return pb4client.War2GamePkt.internal_static_client2server_BarracksInfo_descriptor;
    }

    public pb4client.BarracksInfo getDefaultInstanceForType() {
      return pb4client.BarracksInfo.getDefaultInstance();
    }

    public pb4client.BarracksInfo build() {
      pb4client.BarracksInfo result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public pb4client.BarracksInfo buildPartial() {
      pb4client.BarracksInfo result = new pb4client.BarracksInfo(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
        to_bitField0_ |= 0x00000001;
      }
      result.soldierId_ = soldierId_;
      if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
        to_bitField0_ |= 0x00000002;
      }
      result.soldierNum_ = soldierNum_;
      if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
        to_bitField0_ |= 0x00000004;
      }
      result.overTime_ = overTime_;
      if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
        to_bitField0_ |= 0x00000008;
      }
      result.nowMakeNum_ = nowMakeNum_;
      if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
        to_bitField0_ |= 0x00000010;
      }
      result.canCureNum_ = canCureNum_;
      if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
        to_bitField0_ |= 0x00000020;
      }
      result.nowCureNum_ = nowCureNum_;
      if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
        to_bitField0_ |= 0x00000040;
      }
      result.cureOverTime_ = cureOverTime_;
      if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
        to_bitField0_ |= 0x00000080;
      }
      result.cureQueue_ = cureQueue_;
      if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
        to_bitField0_ |= 0x00000100;
      }
      result.upNum_ = upNum_;
      if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
        to_bitField0_ |= 0x00000200;
      }
      result.upToSoliderId_ = upToSoliderId_;
      if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
        to_bitField0_ |= 0x00000400;
      }
      result.upOverTime_ = upOverTime_;
      if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
        to_bitField0_ |= 0x00000800;
      }
      result.canEventCureNum_ = canEventCureNum_;
      if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
        to_bitField0_ |= 0x00001000;
      }
      result.nowEventCureNum_ = nowEventCureNum_;
      if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
        to_bitField0_ |= 0x00002000;
      }
      result.eventCureOverTime_ = eventCureOverTime_;
      if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
        to_bitField0_ |= 0x00004000;
      }
      result.eventCureQueue_ = eventCureQueue_;
      if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
        to_bitField0_ |= 0x00008000;
      }
      result.makeNeedTime_ = makeNeedTime_;
      if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
        to_bitField0_ |= 0x00010000;
      }
      result.cureNeedTime_ = cureNeedTime_;
      if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
        to_bitField0_ |= 0x00020000;
      }
      result.eventCureNeedTime_ = eventCureNeedTime_;
      if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
        to_bitField0_ |= 0x00040000;
      }
      result.upNeedTime_ = upNeedTime_;
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof pb4client.BarracksInfo) {
        return mergeFrom((pb4client.BarracksInfo)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(pb4client.BarracksInfo other) {
      if (other == pb4client.BarracksInfo.getDefaultInstance()) return this;
      if (other.hasSoldierId()) {
        setSoldierId(other.getSoldierId());
      }
      if (other.hasSoldierNum()) {
        setSoldierNum(other.getSoldierNum());
      }
      if (other.hasOverTime()) {
        setOverTime(other.getOverTime());
      }
      if (other.hasNowMakeNum()) {
        setNowMakeNum(other.getNowMakeNum());
      }
      if (other.hasCanCureNum()) {
        setCanCureNum(other.getCanCureNum());
      }
      if (other.hasNowCureNum()) {
        setNowCureNum(other.getNowCureNum());
      }
      if (other.hasCureOverTime()) {
        setCureOverTime(other.getCureOverTime());
      }
      if (other.hasCureQueue()) {
        setCureQueue(other.getCureQueue());
      }
      if (other.hasUpNum()) {
        setUpNum(other.getUpNum());
      }
      if (other.hasUpToSoliderId()) {
        setUpToSoliderId(other.getUpToSoliderId());
      }
      if (other.hasUpOverTime()) {
        setUpOverTime(other.getUpOverTime());
      }
      if (other.hasCanEventCureNum()) {
        setCanEventCureNum(other.getCanEventCureNum());
      }
      if (other.hasNowEventCureNum()) {
        setNowEventCureNum(other.getNowEventCureNum());
      }
      if (other.hasEventCureOverTime()) {
        setEventCureOverTime(other.getEventCureOverTime());
      }
      if (other.hasEventCureQueue()) {
        setEventCureQueue(other.getEventCureQueue());
      }
      if (other.hasMakeNeedTime()) {
        setMakeNeedTime(other.getMakeNeedTime());
      }
      if (other.hasCureNeedTime()) {
        setCureNeedTime(other.getCureNeedTime());
      }
      if (other.hasEventCureNeedTime()) {
        setEventCureNeedTime(other.getEventCureNeedTime());
      }
      if (other.hasUpNeedTime()) {
        setUpNeedTime(other.getUpNeedTime());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      if (!hasSoldierId()) {
        return false;
      }
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      pb4client.BarracksInfo parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (pb4client.BarracksInfo) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private int soldierId_ ;
    /**
     * <pre>
     * 士兵模板ID
     * </pre>
     *
     * <code>required int32 soldierId = 1;</code>
     */
    public boolean hasSoldierId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * 士兵模板ID
     * </pre>
     *
     * <code>required int32 soldierId = 1;</code>
     */
    public int getSoldierId() {
      return soldierId_;
    }
    /**
     * <pre>
     * 士兵模板ID
     * </pre>
     *
     * <code>required int32 soldierId = 1;</code>
     */
    public Builder setSoldierId(int value) {
      bitField0_ |= 0x00000001;
      soldierId_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 士兵模板ID
     * </pre>
     *
     * <code>required int32 soldierId = 1;</code>
     */
    public Builder clearSoldierId() {
      bitField0_ = (bitField0_ & ~0x00000001);
      soldierId_ = 0;
      onChanged();
      return this;
    }

    private int soldierNum_ ;
    /**
     * <pre>
     * 士兵数量
     * </pre>
     *
     * <code>optional int32 soldierNum = 2;</code>
     */
    public boolean hasSoldierNum() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * 士兵数量
     * </pre>
     *
     * <code>optional int32 soldierNum = 2;</code>
     */
    public int getSoldierNum() {
      return soldierNum_;
    }
    /**
     * <pre>
     * 士兵数量
     * </pre>
     *
     * <code>optional int32 soldierNum = 2;</code>
     */
    public Builder setSoldierNum(int value) {
      bitField0_ |= 0x00000002;
      soldierNum_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 士兵数量
     * </pre>
     *
     * <code>optional int32 soldierNum = 2;</code>
     */
    public Builder clearSoldierNum() {
      bitField0_ = (bitField0_ & ~0x00000002);
      soldierNum_ = 0;
      onChanged();
      return this;
    }

    private int overTime_ ;
    /**
     * <pre>
     * 造兵结束时间
     * </pre>
     *
     * <code>optional int32 overTime = 3;</code>
     */
    public boolean hasOverTime() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     * 造兵结束时间
     * </pre>
     *
     * <code>optional int32 overTime = 3;</code>
     */
    public int getOverTime() {
      return overTime_;
    }
    /**
     * <pre>
     * 造兵结束时间
     * </pre>
     *
     * <code>optional int32 overTime = 3;</code>
     */
    public Builder setOverTime(int value) {
      bitField0_ |= 0x00000004;
      overTime_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 造兵结束时间
     * </pre>
     *
     * <code>optional int32 overTime = 3;</code>
     */
    public Builder clearOverTime() {
      bitField0_ = (bitField0_ & ~0x00000004);
      overTime_ = 0;
      onChanged();
      return this;
    }

    private int nowMakeNum_ ;
    /**
     * <pre>
     * 正在造的士兵数量
     * </pre>
     *
     * <code>optional int32 nowMakeNum = 4;</code>
     */
    public boolean hasNowMakeNum() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     * 正在造的士兵数量
     * </pre>
     *
     * <code>optional int32 nowMakeNum = 4;</code>
     */
    public int getNowMakeNum() {
      return nowMakeNum_;
    }
    /**
     * <pre>
     * 正在造的士兵数量
     * </pre>
     *
     * <code>optional int32 nowMakeNum = 4;</code>
     */
    public Builder setNowMakeNum(int value) {
      bitField0_ |= 0x00000008;
      nowMakeNum_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 正在造的士兵数量
     * </pre>
     *
     * <code>optional int32 nowMakeNum = 4;</code>
     */
    public Builder clearNowMakeNum() {
      bitField0_ = (bitField0_ & ~0x00000008);
      nowMakeNum_ = 0;
      onChanged();
      return this;
    }

    private int canCureNum_ ;
    /**
     * <pre>
     * 当前可治疗的士兵数量
     * </pre>
     *
     * <code>optional int32 canCureNum = 5;</code>
     */
    public boolean hasCanCureNum() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <pre>
     * 当前可治疗的士兵数量
     * </pre>
     *
     * <code>optional int32 canCureNum = 5;</code>
     */
    public int getCanCureNum() {
      return canCureNum_;
    }
    /**
     * <pre>
     * 当前可治疗的士兵数量
     * </pre>
     *
     * <code>optional int32 canCureNum = 5;</code>
     */
    public Builder setCanCureNum(int value) {
      bitField0_ |= 0x00000010;
      canCureNum_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 当前可治疗的士兵数量
     * </pre>
     *
     * <code>optional int32 canCureNum = 5;</code>
     */
    public Builder clearCanCureNum() {
      bitField0_ = (bitField0_ & ~0x00000010);
      canCureNum_ = 0;
      onChanged();
      return this;
    }

    private int nowCureNum_ ;
    /**
     * <pre>
     * 当前正在治疗的士兵数量
     * </pre>
     *
     * <code>optional int32 nowCureNum = 6;</code>
     */
    public boolean hasNowCureNum() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <pre>
     * 当前正在治疗的士兵数量
     * </pre>
     *
     * <code>optional int32 nowCureNum = 6;</code>
     */
    public int getNowCureNum() {
      return nowCureNum_;
    }
    /**
     * <pre>
     * 当前正在治疗的士兵数量
     * </pre>
     *
     * <code>optional int32 nowCureNum = 6;</code>
     */
    public Builder setNowCureNum(int value) {
      bitField0_ |= 0x00000020;
      nowCureNum_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 当前正在治疗的士兵数量
     * </pre>
     *
     * <code>optional int32 nowCureNum = 6;</code>
     */
    public Builder clearNowCureNum() {
      bitField0_ = (bitField0_ & ~0x00000020);
      nowCureNum_ = 0;
      onChanged();
      return this;
    }

    private int cureOverTime_ ;
    /**
     * <pre>
     *治疗结束时间
     * </pre>
     *
     * <code>optional int32 cureOverTime = 7;</code>
     */
    public boolean hasCureOverTime() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <pre>
     *治疗结束时间
     * </pre>
     *
     * <code>optional int32 cureOverTime = 7;</code>
     */
    public int getCureOverTime() {
      return cureOverTime_;
    }
    /**
     * <pre>
     *治疗结束时间
     * </pre>
     *
     * <code>optional int32 cureOverTime = 7;</code>
     */
    public Builder setCureOverTime(int value) {
      bitField0_ |= 0x00000040;
      cureOverTime_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *治疗结束时间
     * </pre>
     *
     * <code>optional int32 cureOverTime = 7;</code>
     */
    public Builder clearCureOverTime() {
      bitField0_ = (bitField0_ & ~0x00000040);
      cureOverTime_ = 0;
      onChanged();
      return this;
    }

    private int cureQueue_ ;
    /**
     * <pre>
     * 所属治疗队列
     * </pre>
     *
     * <code>optional int32 cureQueue = 8;</code>
     */
    public boolean hasCureQueue() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <pre>
     * 所属治疗队列
     * </pre>
     *
     * <code>optional int32 cureQueue = 8;</code>
     */
    public int getCureQueue() {
      return cureQueue_;
    }
    /**
     * <pre>
     * 所属治疗队列
     * </pre>
     *
     * <code>optional int32 cureQueue = 8;</code>
     */
    public Builder setCureQueue(int value) {
      bitField0_ |= 0x00000080;
      cureQueue_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 所属治疗队列
     * </pre>
     *
     * <code>optional int32 cureQueue = 8;</code>
     */
    public Builder clearCureQueue() {
      bitField0_ = (bitField0_ & ~0x00000080);
      cureQueue_ = 0;
      onChanged();
      return this;
    }

    private int upNum_ ;
    /**
     * <pre>
     * 当前正在晋升的数量
     * </pre>
     *
     * <code>optional int32 upNum = 9;</code>
     */
    public boolean hasUpNum() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <pre>
     * 当前正在晋升的数量
     * </pre>
     *
     * <code>optional int32 upNum = 9;</code>
     */
    public int getUpNum() {
      return upNum_;
    }
    /**
     * <pre>
     * 当前正在晋升的数量
     * </pre>
     *
     * <code>optional int32 upNum = 9;</code>
     */
    public Builder setUpNum(int value) {
      bitField0_ |= 0x00000100;
      upNum_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 当前正在晋升的数量
     * </pre>
     *
     * <code>optional int32 upNum = 9;</code>
     */
    public Builder clearUpNum() {
      bitField0_ = (bitField0_ & ~0x00000100);
      upNum_ = 0;
      onChanged();
      return this;
    }

    private int upToSoliderId_ ;
    /**
     * <pre>
     * 正在晋升到的兵种ID
     * </pre>
     *
     * <code>optional int32 upToSoliderId = 10;</code>
     */
    public boolean hasUpToSoliderId() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <pre>
     * 正在晋升到的兵种ID
     * </pre>
     *
     * <code>optional int32 upToSoliderId = 10;</code>
     */
    public int getUpToSoliderId() {
      return upToSoliderId_;
    }
    /**
     * <pre>
     * 正在晋升到的兵种ID
     * </pre>
     *
     * <code>optional int32 upToSoliderId = 10;</code>
     */
    public Builder setUpToSoliderId(int value) {
      bitField0_ |= 0x00000200;
      upToSoliderId_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 正在晋升到的兵种ID
     * </pre>
     *
     * <code>optional int32 upToSoliderId = 10;</code>
     */
    public Builder clearUpToSoliderId() {
      bitField0_ = (bitField0_ & ~0x00000200);
      upToSoliderId_ = 0;
      onChanged();
      return this;
    }

    private int upOverTime_ ;
    /**
     * <pre>
     * 晋升结束时间
     * </pre>
     *
     * <code>optional int32 upOverTime = 11;</code>
     */
    public boolean hasUpOverTime() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <pre>
     * 晋升结束时间
     * </pre>
     *
     * <code>optional int32 upOverTime = 11;</code>
     */
    public int getUpOverTime() {
      return upOverTime_;
    }
    /**
     * <pre>
     * 晋升结束时间
     * </pre>
     *
     * <code>optional int32 upOverTime = 11;</code>
     */
    public Builder setUpOverTime(int value) {
      bitField0_ |= 0x00000400;
      upOverTime_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 晋升结束时间
     * </pre>
     *
     * <code>optional int32 upOverTime = 11;</code>
     */
    public Builder clearUpOverTime() {
      bitField0_ = (bitField0_ & ~0x00000400);
      upOverTime_ = 0;
      onChanged();
      return this;
    }

    private int canEventCureNum_ ;
    /**
     * <pre>
     * 当前可治疗(活动)的士兵数量
     * </pre>
     *
     * <code>optional int32 canEventCureNum = 12;</code>
     */
    public boolean hasCanEventCureNum() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <pre>
     * 当前可治疗(活动)的士兵数量
     * </pre>
     *
     * <code>optional int32 canEventCureNum = 12;</code>
     */
    public int getCanEventCureNum() {
      return canEventCureNum_;
    }
    /**
     * <pre>
     * 当前可治疗(活动)的士兵数量
     * </pre>
     *
     * <code>optional int32 canEventCureNum = 12;</code>
     */
    public Builder setCanEventCureNum(int value) {
      bitField0_ |= 0x00000800;
      canEventCureNum_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 当前可治疗(活动)的士兵数量
     * </pre>
     *
     * <code>optional int32 canEventCureNum = 12;</code>
     */
    public Builder clearCanEventCureNum() {
      bitField0_ = (bitField0_ & ~0x00000800);
      canEventCureNum_ = 0;
      onChanged();
      return this;
    }

    private int nowEventCureNum_ ;
    /**
     * <pre>
     * 当前正在治疗(活动)的士兵数量
     * </pre>
     *
     * <code>optional int32 nowEventCureNum = 13;</code>
     */
    public boolean hasNowEventCureNum() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <pre>
     * 当前正在治疗(活动)的士兵数量
     * </pre>
     *
     * <code>optional int32 nowEventCureNum = 13;</code>
     */
    public int getNowEventCureNum() {
      return nowEventCureNum_;
    }
    /**
     * <pre>
     * 当前正在治疗(活动)的士兵数量
     * </pre>
     *
     * <code>optional int32 nowEventCureNum = 13;</code>
     */
    public Builder setNowEventCureNum(int value) {
      bitField0_ |= 0x00001000;
      nowEventCureNum_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 当前正在治疗(活动)的士兵数量
     * </pre>
     *
     * <code>optional int32 nowEventCureNum = 13;</code>
     */
    public Builder clearNowEventCureNum() {
      bitField0_ = (bitField0_ & ~0x00001000);
      nowEventCureNum_ = 0;
      onChanged();
      return this;
    }

    private int eventCureOverTime_ ;
    /**
     * <pre>
     *治疗(活动)结束时间
     * </pre>
     *
     * <code>optional int32 eventCureOverTime = 14;</code>
     */
    public boolean hasEventCureOverTime() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <pre>
     *治疗(活动)结束时间
     * </pre>
     *
     * <code>optional int32 eventCureOverTime = 14;</code>
     */
    public int getEventCureOverTime() {
      return eventCureOverTime_;
    }
    /**
     * <pre>
     *治疗(活动)结束时间
     * </pre>
     *
     * <code>optional int32 eventCureOverTime = 14;</code>
     */
    public Builder setEventCureOverTime(int value) {
      bitField0_ |= 0x00002000;
      eventCureOverTime_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *治疗(活动)结束时间
     * </pre>
     *
     * <code>optional int32 eventCureOverTime = 14;</code>
     */
    public Builder clearEventCureOverTime() {
      bitField0_ = (bitField0_ & ~0x00002000);
      eventCureOverTime_ = 0;
      onChanged();
      return this;
    }

    private int eventCureQueue_ ;
    /**
     * <pre>
     * 所属治疗(活动)队列
     * </pre>
     *
     * <code>optional int32 eventCureQueue = 15;</code>
     */
    public boolean hasEventCureQueue() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <pre>
     * 所属治疗(活动)队列
     * </pre>
     *
     * <code>optional int32 eventCureQueue = 15;</code>
     */
    public int getEventCureQueue() {
      return eventCureQueue_;
    }
    /**
     * <pre>
     * 所属治疗(活动)队列
     * </pre>
     *
     * <code>optional int32 eventCureQueue = 15;</code>
     */
    public Builder setEventCureQueue(int value) {
      bitField0_ |= 0x00004000;
      eventCureQueue_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 所属治疗(活动)队列
     * </pre>
     *
     * <code>optional int32 eventCureQueue = 15;</code>
     */
    public Builder clearEventCureQueue() {
      bitField0_ = (bitField0_ & ~0x00004000);
      eventCureQueue_ = 0;
      onChanged();
      return this;
    }

    private int makeNeedTime_ ;
    /**
     * <pre>
     * 造兵需要时间
     * </pre>
     *
     * <code>optional int32 makeNeedTime = 16;</code>
     */
    public boolean hasMakeNeedTime() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <pre>
     * 造兵需要时间
     * </pre>
     *
     * <code>optional int32 makeNeedTime = 16;</code>
     */
    public int getMakeNeedTime() {
      return makeNeedTime_;
    }
    /**
     * <pre>
     * 造兵需要时间
     * </pre>
     *
     * <code>optional int32 makeNeedTime = 16;</code>
     */
    public Builder setMakeNeedTime(int value) {
      bitField0_ |= 0x00008000;
      makeNeedTime_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 造兵需要时间
     * </pre>
     *
     * <code>optional int32 makeNeedTime = 16;</code>
     */
    public Builder clearMakeNeedTime() {
      bitField0_ = (bitField0_ & ~0x00008000);
      makeNeedTime_ = 0;
      onChanged();
      return this;
    }

    private int cureNeedTime_ ;
    /**
     * <pre>
     * 治疗需要时间
     * </pre>
     *
     * <code>optional int32 cureNeedTime = 17;</code>
     */
    public boolean hasCureNeedTime() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <pre>
     * 治疗需要时间
     * </pre>
     *
     * <code>optional int32 cureNeedTime = 17;</code>
     */
    public int getCureNeedTime() {
      return cureNeedTime_;
    }
    /**
     * <pre>
     * 治疗需要时间
     * </pre>
     *
     * <code>optional int32 cureNeedTime = 17;</code>
     */
    public Builder setCureNeedTime(int value) {
      bitField0_ |= 0x00010000;
      cureNeedTime_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 治疗需要时间
     * </pre>
     *
     * <code>optional int32 cureNeedTime = 17;</code>
     */
    public Builder clearCureNeedTime() {
      bitField0_ = (bitField0_ & ~0x00010000);
      cureNeedTime_ = 0;
      onChanged();
      return this;
    }

    private int eventCureNeedTime_ ;
    /**
     * <pre>
     * 治疗(活动)需要时间
     * </pre>
     *
     * <code>optional int32 eventCureNeedTime = 18;</code>
     */
    public boolean hasEventCureNeedTime() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    /**
     * <pre>
     * 治疗(活动)需要时间
     * </pre>
     *
     * <code>optional int32 eventCureNeedTime = 18;</code>
     */
    public int getEventCureNeedTime() {
      return eventCureNeedTime_;
    }
    /**
     * <pre>
     * 治疗(活动)需要时间
     * </pre>
     *
     * <code>optional int32 eventCureNeedTime = 18;</code>
     */
    public Builder setEventCureNeedTime(int value) {
      bitField0_ |= 0x00020000;
      eventCureNeedTime_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 治疗(活动)需要时间
     * </pre>
     *
     * <code>optional int32 eventCureNeedTime = 18;</code>
     */
    public Builder clearEventCureNeedTime() {
      bitField0_ = (bitField0_ & ~0x00020000);
      eventCureNeedTime_ = 0;
      onChanged();
      return this;
    }

    private int upNeedTime_ ;
    /**
     * <pre>
     * 晋升需要时间
     * </pre>
     *
     * <code>optional int32 upNeedTime = 19;</code>
     */
    public boolean hasUpNeedTime() {
      return ((bitField0_ & 0x00040000) == 0x00040000);
    }
    /**
     * <pre>
     * 晋升需要时间
     * </pre>
     *
     * <code>optional int32 upNeedTime = 19;</code>
     */
    public int getUpNeedTime() {
      return upNeedTime_;
    }
    /**
     * <pre>
     * 晋升需要时间
     * </pre>
     *
     * <code>optional int32 upNeedTime = 19;</code>
     */
    public Builder setUpNeedTime(int value) {
      bitField0_ |= 0x00040000;
      upNeedTime_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 晋升需要时间
     * </pre>
     *
     * <code>optional int32 upNeedTime = 19;</code>
     */
    public Builder clearUpNeedTime() {
      bitField0_ = (bitField0_ & ~0x00040000);
      upNeedTime_ = 0;
      onChanged();
      return this;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:client2server.BarracksInfo)
  }

  // @@protoc_insertion_point(class_scope:client2server.BarracksInfo)
  private static final pb4client.BarracksInfo DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new pb4client.BarracksInfo();
  }

  public static pb4client.BarracksInfo getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  @java.lang.Deprecated public static final com.google.protobuf.Parser<BarracksInfo>
      PARSER = new com.google.protobuf.AbstractParser<BarracksInfo>() {
    public BarracksInfo parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
        return new BarracksInfo(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<BarracksInfo> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<BarracksInfo> getParserForType() {
    return PARSER;
  }

  public pb4client.BarracksInfo getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

