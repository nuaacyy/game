// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client2server.proto

package pb4client;

/**
 * Protobuf type {@code client2server.WalkRobot}
 */
public  final class WalkRobot extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:client2server.WalkRobot)
    WalkRobotOrBuilder {
  // Use WalkRobot.newBuilder() to construct.
  private WalkRobot(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private WalkRobot() {
    startX_ = 0;
    startY_ = 0;
    gotoX_ = 0;
    gotoY_ = 0;
    playerId_ = 0L;
    allianceId_ = 0L;
    isGetMainHero_ = 0;
    startTime_ = 0L;
    overTime_ = 0L;
    playerName_ = "";
    allianceShortName_ = "";
    walkOnlyId_ = 0L;
    groupId_ = 0L;
    isAtkMonsterHome_ = 0;
    targetAllianceId_ = 0L;
    initialWalkTime_ = 0;
    kingHeroProtoId_ = 0;
    runType_ = 0;
    goRunType_ = 0;
    isGetResHome_ = 0;
    currentSpeed_ = 0F;
    photoId_ = 0;
    cellType_ = 0;
    reslv_ = 0;
    resType_ = 0;
    bossId_ = 0;
    relicId_ = 0;
    targetPlayerName_ = "";
    targetPlayerShortName_ = "";
    massId_ = 0L;
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private WalkRobot(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!parseUnknownField(input, unknownFields,
                                   extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
          case 8: {
            bitField0_ |= 0x00000001;
            startX_ = input.readInt32();
            break;
          }
          case 16: {
            bitField0_ |= 0x00000002;
            startY_ = input.readInt32();
            break;
          }
          case 24: {
            bitField0_ |= 0x00000004;
            gotoX_ = input.readInt32();
            break;
          }
          case 32: {
            bitField0_ |= 0x00000008;
            gotoY_ = input.readInt32();
            break;
          }
          case 40: {
            bitField0_ |= 0x00000010;
            playerId_ = input.readInt64();
            break;
          }
          case 48: {
            bitField0_ |= 0x00000020;
            allianceId_ = input.readInt64();
            break;
          }
          case 56: {
            bitField0_ |= 0x00020000;
            runType_ = input.readInt32();
            break;
          }
          case 64: {
            bitField0_ |= 0x00000040;
            isGetMainHero_ = input.readInt32();
            break;
          }
          case 72: {
            bitField0_ |= 0x00000080;
            startTime_ = input.readInt64();
            break;
          }
          case 80: {
            bitField0_ |= 0x00000100;
            overTime_ = input.readInt64();
            break;
          }
          case 90: {
            com.google.protobuf.ByteString bs = input.readBytes();
            bitField0_ |= 0x00000200;
            playerName_ = bs;
            break;
          }
          case 98: {
            com.google.protobuf.ByteString bs = input.readBytes();
            bitField0_ |= 0x00000400;
            allianceShortName_ = bs;
            break;
          }
          case 104: {
            bitField0_ |= 0x00000800;
            walkOnlyId_ = input.readInt64();
            break;
          }
          case 112: {
            bitField0_ |= 0x00001000;
            groupId_ = input.readInt64();
            break;
          }
          case 120: {
            bitField0_ |= 0x00002000;
            isAtkMonsterHome_ = input.readInt32();
            break;
          }
          case 128: {
            bitField0_ |= 0x00004000;
            targetAllianceId_ = input.readInt64();
            break;
          }
          case 136: {
            bitField0_ |= 0x00008000;
            initialWalkTime_ = input.readInt32();
            break;
          }
          case 144: {
            bitField0_ |= 0x00010000;
            kingHeroProtoId_ = input.readInt32();
            break;
          }
          case 160: {
            bitField0_ |= 0x00040000;
            goRunType_ = input.readInt32();
            break;
          }
          case 168: {
            bitField0_ |= 0x00080000;
            isGetResHome_ = input.readInt32();
            break;
          }
          case 181: {
            bitField0_ |= 0x00100000;
            currentSpeed_ = input.readFloat();
            break;
          }
          case 184: {
            bitField0_ |= 0x00200000;
            photoId_ = input.readInt32();
            break;
          }
          case 192: {
            bitField0_ |= 0x00400000;
            cellType_ = input.readInt32();
            break;
          }
          case 200: {
            bitField0_ |= 0x00800000;
            reslv_ = input.readInt32();
            break;
          }
          case 208: {
            bitField0_ |= 0x01000000;
            resType_ = input.readInt32();
            break;
          }
          case 216: {
            bitField0_ |= 0x02000000;
            bossId_ = input.readInt32();
            break;
          }
          case 224: {
            bitField0_ |= 0x04000000;
            relicId_ = input.readInt32();
            break;
          }
          case 234: {
            com.google.protobuf.ByteString bs = input.readBytes();
            bitField0_ |= 0x08000000;
            targetPlayerName_ = bs;
            break;
          }
          case 242: {
            com.google.protobuf.ByteString bs = input.readBytes();
            bitField0_ |= 0x10000000;
            targetPlayerShortName_ = bs;
            break;
          }
          case 248: {
            bitField0_ |= 0x20000000;
            massId_ = input.readInt64();
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return pb4client.War2GamePkt.internal_static_client2server_WalkRobot_descriptor;
  }

  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return pb4client.War2GamePkt.internal_static_client2server_WalkRobot_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            pb4client.WalkRobot.class, pb4client.WalkRobot.Builder.class);
  }

  private int bitField0_;
  public static final int STARTX_FIELD_NUMBER = 1;
  private int startX_;
  /**
   * <code>required int32 startX = 1;</code>
   */
  public boolean hasStartX() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <code>required int32 startX = 1;</code>
   */
  public int getStartX() {
    return startX_;
  }

  public static final int STARTY_FIELD_NUMBER = 2;
  private int startY_;
  /**
   * <code>required int32 startY = 2;</code>
   */
  public boolean hasStartY() {
    return ((bitField0_ & 0x00000002) == 0x00000002);
  }
  /**
   * <code>required int32 startY = 2;</code>
   */
  public int getStartY() {
    return startY_;
  }

  public static final int GOTOX_FIELD_NUMBER = 3;
  private int gotoX_;
  /**
   * <code>required int32 gotoX = 3;</code>
   */
  public boolean hasGotoX() {
    return ((bitField0_ & 0x00000004) == 0x00000004);
  }
  /**
   * <code>required int32 gotoX = 3;</code>
   */
  public int getGotoX() {
    return gotoX_;
  }

  public static final int GOTOY_FIELD_NUMBER = 4;
  private int gotoY_;
  /**
   * <code>required int32 gotoY = 4;</code>
   */
  public boolean hasGotoY() {
    return ((bitField0_ & 0x00000008) == 0x00000008);
  }
  /**
   * <code>required int32 gotoY = 4;</code>
   */
  public int getGotoY() {
    return gotoY_;
  }

  public static final int PLAYERID_FIELD_NUMBER = 5;
  private long playerId_;
  /**
   * <code>required int64 playerId = 5;</code>
   */
  public boolean hasPlayerId() {
    return ((bitField0_ & 0x00000010) == 0x00000010);
  }
  /**
   * <code>required int64 playerId = 5;</code>
   */
  public long getPlayerId() {
    return playerId_;
  }

  public static final int ALLIANCEID_FIELD_NUMBER = 6;
  private long allianceId_;
  /**
   * <code>required int64 allianceId = 6;</code>
   */
  public boolean hasAllianceId() {
    return ((bitField0_ & 0x00000020) == 0x00000020);
  }
  /**
   * <code>required int64 allianceId = 6;</code>
   */
  public long getAllianceId() {
    return allianceId_;
  }

  public static final int ISGETMAINHERO_FIELD_NUMBER = 8;
  private int isGetMainHero_;
  /**
   * <pre>
   * 是否携带领军领主回来 0-否 1-是
   * </pre>
   *
   * <code>required int32 isGetMainHero = 8;</code>
   */
  public boolean hasIsGetMainHero() {
    return ((bitField0_ & 0x00000040) == 0x00000040);
  }
  /**
   * <pre>
   * 是否携带领军领主回来 0-否 1-是
   * </pre>
   *
   * <code>required int32 isGetMainHero = 8;</code>
   */
  public int getIsGetMainHero() {
    return isGetMainHero_;
  }

  public static final int STARTTIME_FIELD_NUMBER = 9;
  private long startTime_;
  /**
   * <code>required int64 startTime = 9;</code>
   */
  public boolean hasStartTime() {
    return ((bitField0_ & 0x00000080) == 0x00000080);
  }
  /**
   * <code>required int64 startTime = 9;</code>
   */
  public long getStartTime() {
    return startTime_;
  }

  public static final int OVERTIME_FIELD_NUMBER = 10;
  private long overTime_;
  /**
   * <code>required int64 overTime = 10;</code>
   */
  public boolean hasOverTime() {
    return ((bitField0_ & 0x00000100) == 0x00000100);
  }
  /**
   * <code>required int64 overTime = 10;</code>
   */
  public long getOverTime() {
    return overTime_;
  }

  public static final int PLAYERNAME_FIELD_NUMBER = 11;
  private volatile java.lang.Object playerName_;
  /**
   * <code>required string playerName = 11;</code>
   */
  public boolean hasPlayerName() {
    return ((bitField0_ & 0x00000200) == 0x00000200);
  }
  /**
   * <code>required string playerName = 11;</code>
   */
  public java.lang.String getPlayerName() {
    java.lang.Object ref = playerName_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      if (bs.isValidUtf8()) {
        playerName_ = s;
      }
      return s;
    }
  }
  /**
   * <code>required string playerName = 11;</code>
   */
  public com.google.protobuf.ByteString
      getPlayerNameBytes() {
    java.lang.Object ref = playerName_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      playerName_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int ALLIANCESHORTNAME_FIELD_NUMBER = 12;
  private volatile java.lang.Object allianceShortName_;
  /**
   * <code>required string allianceShortName = 12;</code>
   */
  public boolean hasAllianceShortName() {
    return ((bitField0_ & 0x00000400) == 0x00000400);
  }
  /**
   * <code>required string allianceShortName = 12;</code>
   */
  public java.lang.String getAllianceShortName() {
    java.lang.Object ref = allianceShortName_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      if (bs.isValidUtf8()) {
        allianceShortName_ = s;
      }
      return s;
    }
  }
  /**
   * <code>required string allianceShortName = 12;</code>
   */
  public com.google.protobuf.ByteString
      getAllianceShortNameBytes() {
    java.lang.Object ref = allianceShortName_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      allianceShortName_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int WALKONLYID_FIELD_NUMBER = 13;
  private long walkOnlyId_;
  /**
   * <pre>
   * 这条线的唯一ID
   * </pre>
   *
   * <code>required int64 walkOnlyId = 13;</code>
   */
  public boolean hasWalkOnlyId() {
    return ((bitField0_ & 0x00000800) == 0x00000800);
  }
  /**
   * <pre>
   * 这条线的唯一ID
   * </pre>
   *
   * <code>required int64 walkOnlyId = 13;</code>
   */
  public long getWalkOnlyId() {
    return walkOnlyId_;
  }

  public static final int GROUPID_FIELD_NUMBER = 14;
  private long groupId_;
  /**
   * <pre>
   *行军组Id
   * </pre>
   *
   * <code>required int64 groupId = 14;</code>
   */
  public boolean hasGroupId() {
    return ((bitField0_ & 0x00001000) == 0x00001000);
  }
  /**
   * <pre>
   *行军组Id
   * </pre>
   *
   * <code>required int64 groupId = 14;</code>
   */
  public long getGroupId() {
    return groupId_;
  }

  public static final int ISATKMONSTERHOME_FIELD_NUMBER = 15;
  private int isAtkMonsterHome_;
  /**
   * <pre>
   *是否攻击魔物回城 0-否 1-是
   * </pre>
   *
   * <code>required int32 isAtkMonsterHome = 15;</code>
   */
  public boolean hasIsAtkMonsterHome() {
    return ((bitField0_ & 0x00002000) == 0x00002000);
  }
  /**
   * <pre>
   *是否攻击魔物回城 0-否 1-是
   * </pre>
   *
   * <code>required int32 isAtkMonsterHome = 15;</code>
   */
  public int getIsAtkMonsterHome() {
    return isAtkMonsterHome_;
  }

  public static final int TARGETALLIANCEID_FIELD_NUMBER = 16;
  private long targetAllianceId_;
  /**
   * <pre>
   *目标联盟Id
   * </pre>
   *
   * <code>optional int64 targetAllianceId = 16;</code>
   */
  public boolean hasTargetAllianceId() {
    return ((bitField0_ & 0x00004000) == 0x00004000);
  }
  /**
   * <pre>
   *目标联盟Id
   * </pre>
   *
   * <code>optional int64 targetAllianceId = 16;</code>
   */
  public long getTargetAllianceId() {
    return targetAllianceId_;
  }

  public static final int INITIALWALKTIME_FIELD_NUMBER = 17;
  private int initialWalkTime_;
  /**
   * <pre>
   *初始行军时间
   * </pre>
   *
   * <code>required int32 initialWalkTime = 17;</code>
   */
  public boolean hasInitialWalkTime() {
    return ((bitField0_ & 0x00008000) == 0x00008000);
  }
  /**
   * <pre>
   *初始行军时间
   * </pre>
   *
   * <code>required int32 initialWalkTime = 17;</code>
   */
  public int getInitialWalkTime() {
    return initialWalkTime_;
  }

  public static final int KINGHEROPROTOID_FIELD_NUMBER = 18;
  private int kingHeroProtoId_;
  /**
   * <pre>
   *领主英雄配置Id
   * </pre>
   *
   * <code>optional int32 kingHeroProtoId = 18;</code>
   */
  public boolean hasKingHeroProtoId() {
    return ((bitField0_ & 0x00010000) == 0x00010000);
  }
  /**
   * <pre>
   *领主英雄配置Id
   * </pre>
   *
   * <code>optional int32 kingHeroProtoId = 18;</code>
   */
  public int getKingHeroProtoId() {
    return kingHeroProtoId_;
  }

  public static final int RUNTYPE_FIELD_NUMBER = 7;
  private int runType_;
  /**
   * <pre>
   * 行军类型
   * </pre>
   *
   * <code>required int32 runType = 7;</code>
   */
  public boolean hasRunType() {
    return ((bitField0_ & 0x00020000) == 0x00020000);
  }
  /**
   * <pre>
   * 行军类型
   * </pre>
   *
   * <code>required int32 runType = 7;</code>
   */
  public int getRunType() {
    return runType_;
  }

  public static final int GORUNTYPE_FIELD_NUMBER = 20;
  private int goRunType_;
  /**
   * <pre>
   *行军前往时的行军类型
   * </pre>
   *
   * <code>optional int32 goRunType = 20;</code>
   */
  public boolean hasGoRunType() {
    return ((bitField0_ & 0x00040000) == 0x00040000);
  }
  /**
   * <pre>
   *行军前往时的行军类型
   * </pre>
   *
   * <code>optional int32 goRunType = 20;</code>
   */
  public int getGoRunType() {
    return goRunType_;
  }

  public static final int ISGETRESHOME_FIELD_NUMBER = 21;
  private int isGetResHome_;
  /**
   * <pre>
   *是否带资源回城
   * </pre>
   *
   * <code>required int32 isGetResHome = 21;</code>
   */
  public boolean hasIsGetResHome() {
    return ((bitField0_ & 0x00080000) == 0x00080000);
  }
  /**
   * <pre>
   *是否带资源回城
   * </pre>
   *
   * <code>required int32 isGetResHome = 21;</code>
   */
  public int getIsGetResHome() {
    return isGetResHome_;
  }

  public static final int CURRENTSPEED_FIELD_NUMBER = 22;
  private float currentSpeed_;
  /**
   * <pre>
   *当前速度
   * </pre>
   *
   * <code>required float currentSpeed = 22;</code>
   */
  public boolean hasCurrentSpeed() {
    return ((bitField0_ & 0x00100000) == 0x00100000);
  }
  /**
   * <pre>
   *当前速度
   * </pre>
   *
   * <code>required float currentSpeed = 22;</code>
   */
  public float getCurrentSpeed() {
    return currentSpeed_;
  }

  public static final int PHOTOID_FIELD_NUMBER = 23;
  private int photoId_;
  /**
   * <pre>
   *领主头像
   * </pre>
   *
   * <code>required int32 photoId = 23;</code>
   */
  public boolean hasPhotoId() {
    return ((bitField0_ & 0x00200000) == 0x00200000);
  }
  /**
   * <pre>
   *领主头像
   * </pre>
   *
   * <code>required int32 photoId = 23;</code>
   */
  public int getPhotoId() {
    return photoId_;
  }

  public static final int CELLTYPE_FIELD_NUMBER = 24;
  private int cellType_;
  /**
   * <pre>
   * 土地上的元素类型 1-资源点 2-魔物 3-遗迹 4- 玩家城池 5-奇观 6-空地 7-联盟BOSS 8-世界Boss 9-据点 11-召唤魔物 12-尸体资源地
   * </pre>
   *
   * <code>optional int32 cellType = 24;</code>
   */
  public boolean hasCellType() {
    return ((bitField0_ & 0x00400000) == 0x00400000);
  }
  /**
   * <pre>
   * 土地上的元素类型 1-资源点 2-魔物 3-遗迹 4- 玩家城池 5-奇观 6-空地 7-联盟BOSS 8-世界Boss 9-据点 11-召唤魔物 12-尸体资源地
   * </pre>
   *
   * <code>optional int32 cellType = 24;</code>
   */
  public int getCellType() {
    return cellType_;
  }

  public static final int RESLV_FIELD_NUMBER = 25;
  private int reslv_;
  /**
   * <pre>
   * 等级
   * </pre>
   *
   * <code>optional int32 reslv = 25;</code>
   */
  public boolean hasReslv() {
    return ((bitField0_ & 0x00800000) == 0x00800000);
  }
  /**
   * <pre>
   * 等级
   * </pre>
   *
   * <code>optional int32 reslv = 25;</code>
   */
  public int getReslv() {
    return reslv_;
  }

  public static final int RESTYPE_FIELD_NUMBER = 26;
  private int resType_;
  /**
   * <pre>
   * 资源点类型
   * </pre>
   *
   * <code>optional int32 resType = 26;</code>
   */
  public boolean hasResType() {
    return ((bitField0_ & 0x01000000) == 0x01000000);
  }
  /**
   * <pre>
   * 资源点类型
   * </pre>
   *
   * <code>optional int32 resType = 26;</code>
   */
  public int getResType() {
    return resType_;
  }

  public static final int BOSSID_FIELD_NUMBER = 27;
  private int bossId_;
  /**
   * <pre>
   * 如果类型是魔物的话,这个是monster表的id字段,模版与等级都可以取到
   * </pre>
   *
   * <code>optional int32 bossId = 27;</code>
   */
  public boolean hasBossId() {
    return ((bitField0_ & 0x02000000) == 0x02000000);
  }
  /**
   * <pre>
   * 如果类型是魔物的话,这个是monster表的id字段,模版与等级都可以取到
   * </pre>
   *
   * <code>optional int32 bossId = 27;</code>
   */
  public int getBossId() {
    return bossId_;
  }

  public static final int RELICID_FIELD_NUMBER = 28;
  private int relicId_;
  /**
   * <pre>
   * 如果类型是遗迹的话,这个是relic表的id字段,模版与等级都可以取到
   * </pre>
   *
   * <code>optional int32 relicId = 28;</code>
   */
  public boolean hasRelicId() {
    return ((bitField0_ & 0x04000000) == 0x04000000);
  }
  /**
   * <pre>
   * 如果类型是遗迹的话,这个是relic表的id字段,模版与等级都可以取到
   * </pre>
   *
   * <code>optional int32 relicId = 28;</code>
   */
  public int getRelicId() {
    return relicId_;
  }

  public static final int TARGETPLAYERNAME_FIELD_NUMBER = 29;
  private volatile java.lang.Object targetPlayerName_;
  /**
   * <pre>
   *目标玩家的名称
   * </pre>
   *
   * <code>optional string targetPlayerName = 29;</code>
   */
  public boolean hasTargetPlayerName() {
    return ((bitField0_ & 0x08000000) == 0x08000000);
  }
  /**
   * <pre>
   *目标玩家的名称
   * </pre>
   *
   * <code>optional string targetPlayerName = 29;</code>
   */
  public java.lang.String getTargetPlayerName() {
    java.lang.Object ref = targetPlayerName_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      if (bs.isValidUtf8()) {
        targetPlayerName_ = s;
      }
      return s;
    }
  }
  /**
   * <pre>
   *目标玩家的名称
   * </pre>
   *
   * <code>optional string targetPlayerName = 29;</code>
   */
  public com.google.protobuf.ByteString
      getTargetPlayerNameBytes() {
    java.lang.Object ref = targetPlayerName_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      targetPlayerName_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int TARGETPLAYERSHORTNAME_FIELD_NUMBER = 30;
  private volatile java.lang.Object targetPlayerShortName_;
  /**
   * <pre>
   *目标玩家简称
   * </pre>
   *
   * <code>optional string targetPlayerShortName = 30;</code>
   */
  public boolean hasTargetPlayerShortName() {
    return ((bitField0_ & 0x10000000) == 0x10000000);
  }
  /**
   * <pre>
   *目标玩家简称
   * </pre>
   *
   * <code>optional string targetPlayerShortName = 30;</code>
   */
  public java.lang.String getTargetPlayerShortName() {
    java.lang.Object ref = targetPlayerShortName_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      if (bs.isValidUtf8()) {
        targetPlayerShortName_ = s;
      }
      return s;
    }
  }
  /**
   * <pre>
   *目标玩家简称
   * </pre>
   *
   * <code>optional string targetPlayerShortName = 30;</code>
   */
  public com.google.protobuf.ByteString
      getTargetPlayerShortNameBytes() {
    java.lang.Object ref = targetPlayerShortName_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      targetPlayerShortName_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int MASSID_FIELD_NUMBER = 31;
  private long massId_;
  /**
   * <pre>
   *集结Id 标识是否集结队伍
   * </pre>
   *
   * <code>optional int64 massId = 31;</code>
   */
  public boolean hasMassId() {
    return ((bitField0_ & 0x20000000) == 0x20000000);
  }
  /**
   * <pre>
   *集结Id 标识是否集结队伍
   * </pre>
   *
   * <code>optional int64 massId = 31;</code>
   */
  public long getMassId() {
    return massId_;
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    if (!hasStartX()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!hasStartY()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!hasGotoX()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!hasGotoY()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!hasPlayerId()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!hasAllianceId()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!hasIsGetMainHero()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!hasStartTime()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!hasOverTime()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!hasPlayerName()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!hasAllianceShortName()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!hasWalkOnlyId()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!hasGroupId()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!hasIsAtkMonsterHome()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!hasInitialWalkTime()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!hasRunType()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!hasIsGetResHome()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!hasCurrentSpeed()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!hasPhotoId()) {
      memoizedIsInitialized = 0;
      return false;
    }
    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      output.writeInt32(1, startX_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      output.writeInt32(2, startY_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      output.writeInt32(3, gotoX_);
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      output.writeInt32(4, gotoY_);
    }
    if (((bitField0_ & 0x00000010) == 0x00000010)) {
      output.writeInt64(5, playerId_);
    }
    if (((bitField0_ & 0x00000020) == 0x00000020)) {
      output.writeInt64(6, allianceId_);
    }
    if (((bitField0_ & 0x00020000) == 0x00020000)) {
      output.writeInt32(7, runType_);
    }
    if (((bitField0_ & 0x00000040) == 0x00000040)) {
      output.writeInt32(8, isGetMainHero_);
    }
    if (((bitField0_ & 0x00000080) == 0x00000080)) {
      output.writeInt64(9, startTime_);
    }
    if (((bitField0_ & 0x00000100) == 0x00000100)) {
      output.writeInt64(10, overTime_);
    }
    if (((bitField0_ & 0x00000200) == 0x00000200)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 11, playerName_);
    }
    if (((bitField0_ & 0x00000400) == 0x00000400)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 12, allianceShortName_);
    }
    if (((bitField0_ & 0x00000800) == 0x00000800)) {
      output.writeInt64(13, walkOnlyId_);
    }
    if (((bitField0_ & 0x00001000) == 0x00001000)) {
      output.writeInt64(14, groupId_);
    }
    if (((bitField0_ & 0x00002000) == 0x00002000)) {
      output.writeInt32(15, isAtkMonsterHome_);
    }
    if (((bitField0_ & 0x00004000) == 0x00004000)) {
      output.writeInt64(16, targetAllianceId_);
    }
    if (((bitField0_ & 0x00008000) == 0x00008000)) {
      output.writeInt32(17, initialWalkTime_);
    }
    if (((bitField0_ & 0x00010000) == 0x00010000)) {
      output.writeInt32(18, kingHeroProtoId_);
    }
    if (((bitField0_ & 0x00040000) == 0x00040000)) {
      output.writeInt32(20, goRunType_);
    }
    if (((bitField0_ & 0x00080000) == 0x00080000)) {
      output.writeInt32(21, isGetResHome_);
    }
    if (((bitField0_ & 0x00100000) == 0x00100000)) {
      output.writeFloat(22, currentSpeed_);
    }
    if (((bitField0_ & 0x00200000) == 0x00200000)) {
      output.writeInt32(23, photoId_);
    }
    if (((bitField0_ & 0x00400000) == 0x00400000)) {
      output.writeInt32(24, cellType_);
    }
    if (((bitField0_ & 0x00800000) == 0x00800000)) {
      output.writeInt32(25, reslv_);
    }
    if (((bitField0_ & 0x01000000) == 0x01000000)) {
      output.writeInt32(26, resType_);
    }
    if (((bitField0_ & 0x02000000) == 0x02000000)) {
      output.writeInt32(27, bossId_);
    }
    if (((bitField0_ & 0x04000000) == 0x04000000)) {
      output.writeInt32(28, relicId_);
    }
    if (((bitField0_ & 0x08000000) == 0x08000000)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 29, targetPlayerName_);
    }
    if (((bitField0_ & 0x10000000) == 0x10000000)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 30, targetPlayerShortName_);
    }
    if (((bitField0_ & 0x20000000) == 0x20000000)) {
      output.writeInt64(31, massId_);
    }
    unknownFields.writeTo(output);
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(1, startX_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(2, startY_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(3, gotoX_);
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(4, gotoY_);
    }
    if (((bitField0_ & 0x00000010) == 0x00000010)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(5, playerId_);
    }
    if (((bitField0_ & 0x00000020) == 0x00000020)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(6, allianceId_);
    }
    if (((bitField0_ & 0x00020000) == 0x00020000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(7, runType_);
    }
    if (((bitField0_ & 0x00000040) == 0x00000040)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(8, isGetMainHero_);
    }
    if (((bitField0_ & 0x00000080) == 0x00000080)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(9, startTime_);
    }
    if (((bitField0_ & 0x00000100) == 0x00000100)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(10, overTime_);
    }
    if (((bitField0_ & 0x00000200) == 0x00000200)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(11, playerName_);
    }
    if (((bitField0_ & 0x00000400) == 0x00000400)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(12, allianceShortName_);
    }
    if (((bitField0_ & 0x00000800) == 0x00000800)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(13, walkOnlyId_);
    }
    if (((bitField0_ & 0x00001000) == 0x00001000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(14, groupId_);
    }
    if (((bitField0_ & 0x00002000) == 0x00002000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(15, isAtkMonsterHome_);
    }
    if (((bitField0_ & 0x00004000) == 0x00004000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(16, targetAllianceId_);
    }
    if (((bitField0_ & 0x00008000) == 0x00008000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(17, initialWalkTime_);
    }
    if (((bitField0_ & 0x00010000) == 0x00010000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(18, kingHeroProtoId_);
    }
    if (((bitField0_ & 0x00040000) == 0x00040000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(20, goRunType_);
    }
    if (((bitField0_ & 0x00080000) == 0x00080000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(21, isGetResHome_);
    }
    if (((bitField0_ & 0x00100000) == 0x00100000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(22, currentSpeed_);
    }
    if (((bitField0_ & 0x00200000) == 0x00200000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(23, photoId_);
    }
    if (((bitField0_ & 0x00400000) == 0x00400000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(24, cellType_);
    }
    if (((bitField0_ & 0x00800000) == 0x00800000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(25, reslv_);
    }
    if (((bitField0_ & 0x01000000) == 0x01000000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(26, resType_);
    }
    if (((bitField0_ & 0x02000000) == 0x02000000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(27, bossId_);
    }
    if (((bitField0_ & 0x04000000) == 0x04000000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(28, relicId_);
    }
    if (((bitField0_ & 0x08000000) == 0x08000000)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(29, targetPlayerName_);
    }
    if (((bitField0_ & 0x10000000) == 0x10000000)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(30, targetPlayerShortName_);
    }
    if (((bitField0_ & 0x20000000) == 0x20000000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(31, massId_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof pb4client.WalkRobot)) {
      return super.equals(obj);
    }
    pb4client.WalkRobot other = (pb4client.WalkRobot) obj;

    boolean result = true;
    result = result && (hasStartX() == other.hasStartX());
    if (hasStartX()) {
      result = result && (getStartX()
          == other.getStartX());
    }
    result = result && (hasStartY() == other.hasStartY());
    if (hasStartY()) {
      result = result && (getStartY()
          == other.getStartY());
    }
    result = result && (hasGotoX() == other.hasGotoX());
    if (hasGotoX()) {
      result = result && (getGotoX()
          == other.getGotoX());
    }
    result = result && (hasGotoY() == other.hasGotoY());
    if (hasGotoY()) {
      result = result && (getGotoY()
          == other.getGotoY());
    }
    result = result && (hasPlayerId() == other.hasPlayerId());
    if (hasPlayerId()) {
      result = result && (getPlayerId()
          == other.getPlayerId());
    }
    result = result && (hasAllianceId() == other.hasAllianceId());
    if (hasAllianceId()) {
      result = result && (getAllianceId()
          == other.getAllianceId());
    }
    result = result && (hasIsGetMainHero() == other.hasIsGetMainHero());
    if (hasIsGetMainHero()) {
      result = result && (getIsGetMainHero()
          == other.getIsGetMainHero());
    }
    result = result && (hasStartTime() == other.hasStartTime());
    if (hasStartTime()) {
      result = result && (getStartTime()
          == other.getStartTime());
    }
    result = result && (hasOverTime() == other.hasOverTime());
    if (hasOverTime()) {
      result = result && (getOverTime()
          == other.getOverTime());
    }
    result = result && (hasPlayerName() == other.hasPlayerName());
    if (hasPlayerName()) {
      result = result && getPlayerName()
          .equals(other.getPlayerName());
    }
    result = result && (hasAllianceShortName() == other.hasAllianceShortName());
    if (hasAllianceShortName()) {
      result = result && getAllianceShortName()
          .equals(other.getAllianceShortName());
    }
    result = result && (hasWalkOnlyId() == other.hasWalkOnlyId());
    if (hasWalkOnlyId()) {
      result = result && (getWalkOnlyId()
          == other.getWalkOnlyId());
    }
    result = result && (hasGroupId() == other.hasGroupId());
    if (hasGroupId()) {
      result = result && (getGroupId()
          == other.getGroupId());
    }
    result = result && (hasIsAtkMonsterHome() == other.hasIsAtkMonsterHome());
    if (hasIsAtkMonsterHome()) {
      result = result && (getIsAtkMonsterHome()
          == other.getIsAtkMonsterHome());
    }
    result = result && (hasTargetAllianceId() == other.hasTargetAllianceId());
    if (hasTargetAllianceId()) {
      result = result && (getTargetAllianceId()
          == other.getTargetAllianceId());
    }
    result = result && (hasInitialWalkTime() == other.hasInitialWalkTime());
    if (hasInitialWalkTime()) {
      result = result && (getInitialWalkTime()
          == other.getInitialWalkTime());
    }
    result = result && (hasKingHeroProtoId() == other.hasKingHeroProtoId());
    if (hasKingHeroProtoId()) {
      result = result && (getKingHeroProtoId()
          == other.getKingHeroProtoId());
    }
    result = result && (hasRunType() == other.hasRunType());
    if (hasRunType()) {
      result = result && (getRunType()
          == other.getRunType());
    }
    result = result && (hasGoRunType() == other.hasGoRunType());
    if (hasGoRunType()) {
      result = result && (getGoRunType()
          == other.getGoRunType());
    }
    result = result && (hasIsGetResHome() == other.hasIsGetResHome());
    if (hasIsGetResHome()) {
      result = result && (getIsGetResHome()
          == other.getIsGetResHome());
    }
    result = result && (hasCurrentSpeed() == other.hasCurrentSpeed());
    if (hasCurrentSpeed()) {
      result = result && (
          java.lang.Float.floatToIntBits(getCurrentSpeed())
          == java.lang.Float.floatToIntBits(
              other.getCurrentSpeed()));
    }
    result = result && (hasPhotoId() == other.hasPhotoId());
    if (hasPhotoId()) {
      result = result && (getPhotoId()
          == other.getPhotoId());
    }
    result = result && (hasCellType() == other.hasCellType());
    if (hasCellType()) {
      result = result && (getCellType()
          == other.getCellType());
    }
    result = result && (hasReslv() == other.hasReslv());
    if (hasReslv()) {
      result = result && (getReslv()
          == other.getReslv());
    }
    result = result && (hasResType() == other.hasResType());
    if (hasResType()) {
      result = result && (getResType()
          == other.getResType());
    }
    result = result && (hasBossId() == other.hasBossId());
    if (hasBossId()) {
      result = result && (getBossId()
          == other.getBossId());
    }
    result = result && (hasRelicId() == other.hasRelicId());
    if (hasRelicId()) {
      result = result && (getRelicId()
          == other.getRelicId());
    }
    result = result && (hasTargetPlayerName() == other.hasTargetPlayerName());
    if (hasTargetPlayerName()) {
      result = result && getTargetPlayerName()
          .equals(other.getTargetPlayerName());
    }
    result = result && (hasTargetPlayerShortName() == other.hasTargetPlayerShortName());
    if (hasTargetPlayerShortName()) {
      result = result && getTargetPlayerShortName()
          .equals(other.getTargetPlayerShortName());
    }
    result = result && (hasMassId() == other.hasMassId());
    if (hasMassId()) {
      result = result && (getMassId()
          == other.getMassId());
    }
    result = result && unknownFields.equals(other.unknownFields);
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasStartX()) {
      hash = (37 * hash) + STARTX_FIELD_NUMBER;
      hash = (53 * hash) + getStartX();
    }
    if (hasStartY()) {
      hash = (37 * hash) + STARTY_FIELD_NUMBER;
      hash = (53 * hash) + getStartY();
    }
    if (hasGotoX()) {
      hash = (37 * hash) + GOTOX_FIELD_NUMBER;
      hash = (53 * hash) + getGotoX();
    }
    if (hasGotoY()) {
      hash = (37 * hash) + GOTOY_FIELD_NUMBER;
      hash = (53 * hash) + getGotoY();
    }
    if (hasPlayerId()) {
      hash = (37 * hash) + PLAYERID_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getPlayerId());
    }
    if (hasAllianceId()) {
      hash = (37 * hash) + ALLIANCEID_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getAllianceId());
    }
    if (hasIsGetMainHero()) {
      hash = (37 * hash) + ISGETMAINHERO_FIELD_NUMBER;
      hash = (53 * hash) + getIsGetMainHero();
    }
    if (hasStartTime()) {
      hash = (37 * hash) + STARTTIME_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getStartTime());
    }
    if (hasOverTime()) {
      hash = (37 * hash) + OVERTIME_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getOverTime());
    }
    if (hasPlayerName()) {
      hash = (37 * hash) + PLAYERNAME_FIELD_NUMBER;
      hash = (53 * hash) + getPlayerName().hashCode();
    }
    if (hasAllianceShortName()) {
      hash = (37 * hash) + ALLIANCESHORTNAME_FIELD_NUMBER;
      hash = (53 * hash) + getAllianceShortName().hashCode();
    }
    if (hasWalkOnlyId()) {
      hash = (37 * hash) + WALKONLYID_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getWalkOnlyId());
    }
    if (hasGroupId()) {
      hash = (37 * hash) + GROUPID_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getGroupId());
    }
    if (hasIsAtkMonsterHome()) {
      hash = (37 * hash) + ISATKMONSTERHOME_FIELD_NUMBER;
      hash = (53 * hash) + getIsAtkMonsterHome();
    }
    if (hasTargetAllianceId()) {
      hash = (37 * hash) + TARGETALLIANCEID_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getTargetAllianceId());
    }
    if (hasInitialWalkTime()) {
      hash = (37 * hash) + INITIALWALKTIME_FIELD_NUMBER;
      hash = (53 * hash) + getInitialWalkTime();
    }
    if (hasKingHeroProtoId()) {
      hash = (37 * hash) + KINGHEROPROTOID_FIELD_NUMBER;
      hash = (53 * hash) + getKingHeroProtoId();
    }
    if (hasRunType()) {
      hash = (37 * hash) + RUNTYPE_FIELD_NUMBER;
      hash = (53 * hash) + getRunType();
    }
    if (hasGoRunType()) {
      hash = (37 * hash) + GORUNTYPE_FIELD_NUMBER;
      hash = (53 * hash) + getGoRunType();
    }
    if (hasIsGetResHome()) {
      hash = (37 * hash) + ISGETRESHOME_FIELD_NUMBER;
      hash = (53 * hash) + getIsGetResHome();
    }
    if (hasCurrentSpeed()) {
      hash = (37 * hash) + CURRENTSPEED_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getCurrentSpeed());
    }
    if (hasPhotoId()) {
      hash = (37 * hash) + PHOTOID_FIELD_NUMBER;
      hash = (53 * hash) + getPhotoId();
    }
    if (hasCellType()) {
      hash = (37 * hash) + CELLTYPE_FIELD_NUMBER;
      hash = (53 * hash) + getCellType();
    }
    if (hasReslv()) {
      hash = (37 * hash) + RESLV_FIELD_NUMBER;
      hash = (53 * hash) + getReslv();
    }
    if (hasResType()) {
      hash = (37 * hash) + RESTYPE_FIELD_NUMBER;
      hash = (53 * hash) + getResType();
    }
    if (hasBossId()) {
      hash = (37 * hash) + BOSSID_FIELD_NUMBER;
      hash = (53 * hash) + getBossId();
    }
    if (hasRelicId()) {
      hash = (37 * hash) + RELICID_FIELD_NUMBER;
      hash = (53 * hash) + getRelicId();
    }
    if (hasTargetPlayerName()) {
      hash = (37 * hash) + TARGETPLAYERNAME_FIELD_NUMBER;
      hash = (53 * hash) + getTargetPlayerName().hashCode();
    }
    if (hasTargetPlayerShortName()) {
      hash = (37 * hash) + TARGETPLAYERSHORTNAME_FIELD_NUMBER;
      hash = (53 * hash) + getTargetPlayerShortName().hashCode();
    }
    if (hasMassId()) {
      hash = (37 * hash) + MASSID_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getMassId());
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static pb4client.WalkRobot parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static pb4client.WalkRobot parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static pb4client.WalkRobot parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static pb4client.WalkRobot parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static pb4client.WalkRobot parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static pb4client.WalkRobot parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static pb4client.WalkRobot parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static pb4client.WalkRobot parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static pb4client.WalkRobot parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static pb4client.WalkRobot parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static pb4client.WalkRobot parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static pb4client.WalkRobot parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(pb4client.WalkRobot prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code client2server.WalkRobot}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:client2server.WalkRobot)
      pb4client.WalkRobotOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return pb4client.War2GamePkt.internal_static_client2server_WalkRobot_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return pb4client.War2GamePkt.internal_static_client2server_WalkRobot_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              pb4client.WalkRobot.class, pb4client.WalkRobot.Builder.class);
    }

    // Construct using pb4client.WalkRobot.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    public Builder clear() {
      super.clear();
      startX_ = 0;
      bitField0_ = (bitField0_ & ~0x00000001);
      startY_ = 0;
      bitField0_ = (bitField0_ & ~0x00000002);
      gotoX_ = 0;
      bitField0_ = (bitField0_ & ~0x00000004);
      gotoY_ = 0;
      bitField0_ = (bitField0_ & ~0x00000008);
      playerId_ = 0L;
      bitField0_ = (bitField0_ & ~0x00000010);
      allianceId_ = 0L;
      bitField0_ = (bitField0_ & ~0x00000020);
      isGetMainHero_ = 0;
      bitField0_ = (bitField0_ & ~0x00000040);
      startTime_ = 0L;
      bitField0_ = (bitField0_ & ~0x00000080);
      overTime_ = 0L;
      bitField0_ = (bitField0_ & ~0x00000100);
      playerName_ = "";
      bitField0_ = (bitField0_ & ~0x00000200);
      allianceShortName_ = "";
      bitField0_ = (bitField0_ & ~0x00000400);
      walkOnlyId_ = 0L;
      bitField0_ = (bitField0_ & ~0x00000800);
      groupId_ = 0L;
      bitField0_ = (bitField0_ & ~0x00001000);
      isAtkMonsterHome_ = 0;
      bitField0_ = (bitField0_ & ~0x00002000);
      targetAllianceId_ = 0L;
      bitField0_ = (bitField0_ & ~0x00004000);
      initialWalkTime_ = 0;
      bitField0_ = (bitField0_ & ~0x00008000);
      kingHeroProtoId_ = 0;
      bitField0_ = (bitField0_ & ~0x00010000);
      runType_ = 0;
      bitField0_ = (bitField0_ & ~0x00020000);
      goRunType_ = 0;
      bitField0_ = (bitField0_ & ~0x00040000);
      isGetResHome_ = 0;
      bitField0_ = (bitField0_ & ~0x00080000);
      currentSpeed_ = 0F;
      bitField0_ = (bitField0_ & ~0x00100000);
      photoId_ = 0;
      bitField0_ = (bitField0_ & ~0x00200000);
      cellType_ = 0;
      bitField0_ = (bitField0_ & ~0x00400000);
      reslv_ = 0;
      bitField0_ = (bitField0_ & ~0x00800000);
      resType_ = 0;
      bitField0_ = (bitField0_ & ~0x01000000);
      bossId_ = 0;
      bitField0_ = (bitField0_ & ~0x02000000);
      relicId_ = 0;
      bitField0_ = (bitField0_ & ~0x04000000);
      targetPlayerName_ = "";
      bitField0_ = (bitField0_ & ~0x08000000);
      targetPlayerShortName_ = "";
      bitField0_ = (bitField0_ & ~0x10000000);
      massId_ = 0L;
      bitField0_ = (bitField0_ & ~0x20000000);
      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return pb4client.War2GamePkt.internal_static_client2server_WalkRobot_descriptor;
    }

    public pb4client.WalkRobot getDefaultInstanceForType() {
      return pb4client.WalkRobot.getDefaultInstance();
    }

    public pb4client.WalkRobot build() {
      pb4client.WalkRobot result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public pb4client.WalkRobot buildPartial() {
      pb4client.WalkRobot result = new pb4client.WalkRobot(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
        to_bitField0_ |= 0x00000001;
      }
      result.startX_ = startX_;
      if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
        to_bitField0_ |= 0x00000002;
      }
      result.startY_ = startY_;
      if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
        to_bitField0_ |= 0x00000004;
      }
      result.gotoX_ = gotoX_;
      if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
        to_bitField0_ |= 0x00000008;
      }
      result.gotoY_ = gotoY_;
      if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
        to_bitField0_ |= 0x00000010;
      }
      result.playerId_ = playerId_;
      if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
        to_bitField0_ |= 0x00000020;
      }
      result.allianceId_ = allianceId_;
      if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
        to_bitField0_ |= 0x00000040;
      }
      result.isGetMainHero_ = isGetMainHero_;
      if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
        to_bitField0_ |= 0x00000080;
      }
      result.startTime_ = startTime_;
      if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
        to_bitField0_ |= 0x00000100;
      }
      result.overTime_ = overTime_;
      if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
        to_bitField0_ |= 0x00000200;
      }
      result.playerName_ = playerName_;
      if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
        to_bitField0_ |= 0x00000400;
      }
      result.allianceShortName_ = allianceShortName_;
      if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
        to_bitField0_ |= 0x00000800;
      }
      result.walkOnlyId_ = walkOnlyId_;
      if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
        to_bitField0_ |= 0x00001000;
      }
      result.groupId_ = groupId_;
      if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
        to_bitField0_ |= 0x00002000;
      }
      result.isAtkMonsterHome_ = isAtkMonsterHome_;
      if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
        to_bitField0_ |= 0x00004000;
      }
      result.targetAllianceId_ = targetAllianceId_;
      if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
        to_bitField0_ |= 0x00008000;
      }
      result.initialWalkTime_ = initialWalkTime_;
      if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
        to_bitField0_ |= 0x00010000;
      }
      result.kingHeroProtoId_ = kingHeroProtoId_;
      if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
        to_bitField0_ |= 0x00020000;
      }
      result.runType_ = runType_;
      if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
        to_bitField0_ |= 0x00040000;
      }
      result.goRunType_ = goRunType_;
      if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
        to_bitField0_ |= 0x00080000;
      }
      result.isGetResHome_ = isGetResHome_;
      if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
        to_bitField0_ |= 0x00100000;
      }
      result.currentSpeed_ = currentSpeed_;
      if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
        to_bitField0_ |= 0x00200000;
      }
      result.photoId_ = photoId_;
      if (((from_bitField0_ & 0x00400000) == 0x00400000)) {
        to_bitField0_ |= 0x00400000;
      }
      result.cellType_ = cellType_;
      if (((from_bitField0_ & 0x00800000) == 0x00800000)) {
        to_bitField0_ |= 0x00800000;
      }
      result.reslv_ = reslv_;
      if (((from_bitField0_ & 0x01000000) == 0x01000000)) {
        to_bitField0_ |= 0x01000000;
      }
      result.resType_ = resType_;
      if (((from_bitField0_ & 0x02000000) == 0x02000000)) {
        to_bitField0_ |= 0x02000000;
      }
      result.bossId_ = bossId_;
      if (((from_bitField0_ & 0x04000000) == 0x04000000)) {
        to_bitField0_ |= 0x04000000;
      }
      result.relicId_ = relicId_;
      if (((from_bitField0_ & 0x08000000) == 0x08000000)) {
        to_bitField0_ |= 0x08000000;
      }
      result.targetPlayerName_ = targetPlayerName_;
      if (((from_bitField0_ & 0x10000000) == 0x10000000)) {
        to_bitField0_ |= 0x10000000;
      }
      result.targetPlayerShortName_ = targetPlayerShortName_;
      if (((from_bitField0_ & 0x20000000) == 0x20000000)) {
        to_bitField0_ |= 0x20000000;
      }
      result.massId_ = massId_;
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof pb4client.WalkRobot) {
        return mergeFrom((pb4client.WalkRobot)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(pb4client.WalkRobot other) {
      if (other == pb4client.WalkRobot.getDefaultInstance()) return this;
      if (other.hasStartX()) {
        setStartX(other.getStartX());
      }
      if (other.hasStartY()) {
        setStartY(other.getStartY());
      }
      if (other.hasGotoX()) {
        setGotoX(other.getGotoX());
      }
      if (other.hasGotoY()) {
        setGotoY(other.getGotoY());
      }
      if (other.hasPlayerId()) {
        setPlayerId(other.getPlayerId());
      }
      if (other.hasAllianceId()) {
        setAllianceId(other.getAllianceId());
      }
      if (other.hasIsGetMainHero()) {
        setIsGetMainHero(other.getIsGetMainHero());
      }
      if (other.hasStartTime()) {
        setStartTime(other.getStartTime());
      }
      if (other.hasOverTime()) {
        setOverTime(other.getOverTime());
      }
      if (other.hasPlayerName()) {
        bitField0_ |= 0x00000200;
        playerName_ = other.playerName_;
        onChanged();
      }
      if (other.hasAllianceShortName()) {
        bitField0_ |= 0x00000400;
        allianceShortName_ = other.allianceShortName_;
        onChanged();
      }
      if (other.hasWalkOnlyId()) {
        setWalkOnlyId(other.getWalkOnlyId());
      }
      if (other.hasGroupId()) {
        setGroupId(other.getGroupId());
      }
      if (other.hasIsAtkMonsterHome()) {
        setIsAtkMonsterHome(other.getIsAtkMonsterHome());
      }
      if (other.hasTargetAllianceId()) {
        setTargetAllianceId(other.getTargetAllianceId());
      }
      if (other.hasInitialWalkTime()) {
        setInitialWalkTime(other.getInitialWalkTime());
      }
      if (other.hasKingHeroProtoId()) {
        setKingHeroProtoId(other.getKingHeroProtoId());
      }
      if (other.hasRunType()) {
        setRunType(other.getRunType());
      }
      if (other.hasGoRunType()) {
        setGoRunType(other.getGoRunType());
      }
      if (other.hasIsGetResHome()) {
        setIsGetResHome(other.getIsGetResHome());
      }
      if (other.hasCurrentSpeed()) {
        setCurrentSpeed(other.getCurrentSpeed());
      }
      if (other.hasPhotoId()) {
        setPhotoId(other.getPhotoId());
      }
      if (other.hasCellType()) {
        setCellType(other.getCellType());
      }
      if (other.hasReslv()) {
        setReslv(other.getReslv());
      }
      if (other.hasResType()) {
        setResType(other.getResType());
      }
      if (other.hasBossId()) {
        setBossId(other.getBossId());
      }
      if (other.hasRelicId()) {
        setRelicId(other.getRelicId());
      }
      if (other.hasTargetPlayerName()) {
        bitField0_ |= 0x08000000;
        targetPlayerName_ = other.targetPlayerName_;
        onChanged();
      }
      if (other.hasTargetPlayerShortName()) {
        bitField0_ |= 0x10000000;
        targetPlayerShortName_ = other.targetPlayerShortName_;
        onChanged();
      }
      if (other.hasMassId()) {
        setMassId(other.getMassId());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      if (!hasStartX()) {
        return false;
      }
      if (!hasStartY()) {
        return false;
      }
      if (!hasGotoX()) {
        return false;
      }
      if (!hasGotoY()) {
        return false;
      }
      if (!hasPlayerId()) {
        return false;
      }
      if (!hasAllianceId()) {
        return false;
      }
      if (!hasIsGetMainHero()) {
        return false;
      }
      if (!hasStartTime()) {
        return false;
      }
      if (!hasOverTime()) {
        return false;
      }
      if (!hasPlayerName()) {
        return false;
      }
      if (!hasAllianceShortName()) {
        return false;
      }
      if (!hasWalkOnlyId()) {
        return false;
      }
      if (!hasGroupId()) {
        return false;
      }
      if (!hasIsAtkMonsterHome()) {
        return false;
      }
      if (!hasInitialWalkTime()) {
        return false;
      }
      if (!hasRunType()) {
        return false;
      }
      if (!hasIsGetResHome()) {
        return false;
      }
      if (!hasCurrentSpeed()) {
        return false;
      }
      if (!hasPhotoId()) {
        return false;
      }
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      pb4client.WalkRobot parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (pb4client.WalkRobot) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private int startX_ ;
    /**
     * <code>required int32 startX = 1;</code>
     */
    public boolean hasStartX() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 startX = 1;</code>
     */
    public int getStartX() {
      return startX_;
    }
    /**
     * <code>required int32 startX = 1;</code>
     */
    public Builder setStartX(int value) {
      bitField0_ |= 0x00000001;
      startX_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>required int32 startX = 1;</code>
     */
    public Builder clearStartX() {
      bitField0_ = (bitField0_ & ~0x00000001);
      startX_ = 0;
      onChanged();
      return this;
    }

    private int startY_ ;
    /**
     * <code>required int32 startY = 2;</code>
     */
    public boolean hasStartY() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int32 startY = 2;</code>
     */
    public int getStartY() {
      return startY_;
    }
    /**
     * <code>required int32 startY = 2;</code>
     */
    public Builder setStartY(int value) {
      bitField0_ |= 0x00000002;
      startY_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>required int32 startY = 2;</code>
     */
    public Builder clearStartY() {
      bitField0_ = (bitField0_ & ~0x00000002);
      startY_ = 0;
      onChanged();
      return this;
    }

    private int gotoX_ ;
    /**
     * <code>required int32 gotoX = 3;</code>
     */
    public boolean hasGotoX() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required int32 gotoX = 3;</code>
     */
    public int getGotoX() {
      return gotoX_;
    }
    /**
     * <code>required int32 gotoX = 3;</code>
     */
    public Builder setGotoX(int value) {
      bitField0_ |= 0x00000004;
      gotoX_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>required int32 gotoX = 3;</code>
     */
    public Builder clearGotoX() {
      bitField0_ = (bitField0_ & ~0x00000004);
      gotoX_ = 0;
      onChanged();
      return this;
    }

    private int gotoY_ ;
    /**
     * <code>required int32 gotoY = 4;</code>
     */
    public boolean hasGotoY() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required int32 gotoY = 4;</code>
     */
    public int getGotoY() {
      return gotoY_;
    }
    /**
     * <code>required int32 gotoY = 4;</code>
     */
    public Builder setGotoY(int value) {
      bitField0_ |= 0x00000008;
      gotoY_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>required int32 gotoY = 4;</code>
     */
    public Builder clearGotoY() {
      bitField0_ = (bitField0_ & ~0x00000008);
      gotoY_ = 0;
      onChanged();
      return this;
    }

    private long playerId_ ;
    /**
     * <code>required int64 playerId = 5;</code>
     */
    public boolean hasPlayerId() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required int64 playerId = 5;</code>
     */
    public long getPlayerId() {
      return playerId_;
    }
    /**
     * <code>required int64 playerId = 5;</code>
     */
    public Builder setPlayerId(long value) {
      bitField0_ |= 0x00000010;
      playerId_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>required int64 playerId = 5;</code>
     */
    public Builder clearPlayerId() {
      bitField0_ = (bitField0_ & ~0x00000010);
      playerId_ = 0L;
      onChanged();
      return this;
    }

    private long allianceId_ ;
    /**
     * <code>required int64 allianceId = 6;</code>
     */
    public boolean hasAllianceId() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required int64 allianceId = 6;</code>
     */
    public long getAllianceId() {
      return allianceId_;
    }
    /**
     * <code>required int64 allianceId = 6;</code>
     */
    public Builder setAllianceId(long value) {
      bitField0_ |= 0x00000020;
      allianceId_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>required int64 allianceId = 6;</code>
     */
    public Builder clearAllianceId() {
      bitField0_ = (bitField0_ & ~0x00000020);
      allianceId_ = 0L;
      onChanged();
      return this;
    }

    private int isGetMainHero_ ;
    /**
     * <pre>
     * 是否携带领军领主回来 0-否 1-是
     * </pre>
     *
     * <code>required int32 isGetMainHero = 8;</code>
     */
    public boolean hasIsGetMainHero() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <pre>
     * 是否携带领军领主回来 0-否 1-是
     * </pre>
     *
     * <code>required int32 isGetMainHero = 8;</code>
     */
    public int getIsGetMainHero() {
      return isGetMainHero_;
    }
    /**
     * <pre>
     * 是否携带领军领主回来 0-否 1-是
     * </pre>
     *
     * <code>required int32 isGetMainHero = 8;</code>
     */
    public Builder setIsGetMainHero(int value) {
      bitField0_ |= 0x00000040;
      isGetMainHero_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 是否携带领军领主回来 0-否 1-是
     * </pre>
     *
     * <code>required int32 isGetMainHero = 8;</code>
     */
    public Builder clearIsGetMainHero() {
      bitField0_ = (bitField0_ & ~0x00000040);
      isGetMainHero_ = 0;
      onChanged();
      return this;
    }

    private long startTime_ ;
    /**
     * <code>required int64 startTime = 9;</code>
     */
    public boolean hasStartTime() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>required int64 startTime = 9;</code>
     */
    public long getStartTime() {
      return startTime_;
    }
    /**
     * <code>required int64 startTime = 9;</code>
     */
    public Builder setStartTime(long value) {
      bitField0_ |= 0x00000080;
      startTime_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>required int64 startTime = 9;</code>
     */
    public Builder clearStartTime() {
      bitField0_ = (bitField0_ & ~0x00000080);
      startTime_ = 0L;
      onChanged();
      return this;
    }

    private long overTime_ ;
    /**
     * <code>required int64 overTime = 10;</code>
     */
    public boolean hasOverTime() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>required int64 overTime = 10;</code>
     */
    public long getOverTime() {
      return overTime_;
    }
    /**
     * <code>required int64 overTime = 10;</code>
     */
    public Builder setOverTime(long value) {
      bitField0_ |= 0x00000100;
      overTime_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>required int64 overTime = 10;</code>
     */
    public Builder clearOverTime() {
      bitField0_ = (bitField0_ & ~0x00000100);
      overTime_ = 0L;
      onChanged();
      return this;
    }

    private java.lang.Object playerName_ = "";
    /**
     * <code>required string playerName = 11;</code>
     */
    public boolean hasPlayerName() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>required string playerName = 11;</code>
     */
    public java.lang.String getPlayerName() {
      java.lang.Object ref = playerName_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          playerName_ = s;
        }
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <code>required string playerName = 11;</code>
     */
    public com.google.protobuf.ByteString
        getPlayerNameBytes() {
      java.lang.Object ref = playerName_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        playerName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <code>required string playerName = 11;</code>
     */
    public Builder setPlayerName(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000200;
      playerName_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>required string playerName = 11;</code>
     */
    public Builder clearPlayerName() {
      bitField0_ = (bitField0_ & ~0x00000200);
      playerName_ = getDefaultInstance().getPlayerName();
      onChanged();
      return this;
    }
    /**
     * <code>required string playerName = 11;</code>
     */
    public Builder setPlayerNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000200;
      playerName_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object allianceShortName_ = "";
    /**
     * <code>required string allianceShortName = 12;</code>
     */
    public boolean hasAllianceShortName() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>required string allianceShortName = 12;</code>
     */
    public java.lang.String getAllianceShortName() {
      java.lang.Object ref = allianceShortName_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          allianceShortName_ = s;
        }
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <code>required string allianceShortName = 12;</code>
     */
    public com.google.protobuf.ByteString
        getAllianceShortNameBytes() {
      java.lang.Object ref = allianceShortName_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        allianceShortName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <code>required string allianceShortName = 12;</code>
     */
    public Builder setAllianceShortName(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000400;
      allianceShortName_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>required string allianceShortName = 12;</code>
     */
    public Builder clearAllianceShortName() {
      bitField0_ = (bitField0_ & ~0x00000400);
      allianceShortName_ = getDefaultInstance().getAllianceShortName();
      onChanged();
      return this;
    }
    /**
     * <code>required string allianceShortName = 12;</code>
     */
    public Builder setAllianceShortNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000400;
      allianceShortName_ = value;
      onChanged();
      return this;
    }

    private long walkOnlyId_ ;
    /**
     * <pre>
     * 这条线的唯一ID
     * </pre>
     *
     * <code>required int64 walkOnlyId = 13;</code>
     */
    public boolean hasWalkOnlyId() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <pre>
     * 这条线的唯一ID
     * </pre>
     *
     * <code>required int64 walkOnlyId = 13;</code>
     */
    public long getWalkOnlyId() {
      return walkOnlyId_;
    }
    /**
     * <pre>
     * 这条线的唯一ID
     * </pre>
     *
     * <code>required int64 walkOnlyId = 13;</code>
     */
    public Builder setWalkOnlyId(long value) {
      bitField0_ |= 0x00000800;
      walkOnlyId_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 这条线的唯一ID
     * </pre>
     *
     * <code>required int64 walkOnlyId = 13;</code>
     */
    public Builder clearWalkOnlyId() {
      bitField0_ = (bitField0_ & ~0x00000800);
      walkOnlyId_ = 0L;
      onChanged();
      return this;
    }

    private long groupId_ ;
    /**
     * <pre>
     *行军组Id
     * </pre>
     *
     * <code>required int64 groupId = 14;</code>
     */
    public boolean hasGroupId() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <pre>
     *行军组Id
     * </pre>
     *
     * <code>required int64 groupId = 14;</code>
     */
    public long getGroupId() {
      return groupId_;
    }
    /**
     * <pre>
     *行军组Id
     * </pre>
     *
     * <code>required int64 groupId = 14;</code>
     */
    public Builder setGroupId(long value) {
      bitField0_ |= 0x00001000;
      groupId_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *行军组Id
     * </pre>
     *
     * <code>required int64 groupId = 14;</code>
     */
    public Builder clearGroupId() {
      bitField0_ = (bitField0_ & ~0x00001000);
      groupId_ = 0L;
      onChanged();
      return this;
    }

    private int isAtkMonsterHome_ ;
    /**
     * <pre>
     *是否攻击魔物回城 0-否 1-是
     * </pre>
     *
     * <code>required int32 isAtkMonsterHome = 15;</code>
     */
    public boolean hasIsAtkMonsterHome() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <pre>
     *是否攻击魔物回城 0-否 1-是
     * </pre>
     *
     * <code>required int32 isAtkMonsterHome = 15;</code>
     */
    public int getIsAtkMonsterHome() {
      return isAtkMonsterHome_;
    }
    /**
     * <pre>
     *是否攻击魔物回城 0-否 1-是
     * </pre>
     *
     * <code>required int32 isAtkMonsterHome = 15;</code>
     */
    public Builder setIsAtkMonsterHome(int value) {
      bitField0_ |= 0x00002000;
      isAtkMonsterHome_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *是否攻击魔物回城 0-否 1-是
     * </pre>
     *
     * <code>required int32 isAtkMonsterHome = 15;</code>
     */
    public Builder clearIsAtkMonsterHome() {
      bitField0_ = (bitField0_ & ~0x00002000);
      isAtkMonsterHome_ = 0;
      onChanged();
      return this;
    }

    private long targetAllianceId_ ;
    /**
     * <pre>
     *目标联盟Id
     * </pre>
     *
     * <code>optional int64 targetAllianceId = 16;</code>
     */
    public boolean hasTargetAllianceId() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <pre>
     *目标联盟Id
     * </pre>
     *
     * <code>optional int64 targetAllianceId = 16;</code>
     */
    public long getTargetAllianceId() {
      return targetAllianceId_;
    }
    /**
     * <pre>
     *目标联盟Id
     * </pre>
     *
     * <code>optional int64 targetAllianceId = 16;</code>
     */
    public Builder setTargetAllianceId(long value) {
      bitField0_ |= 0x00004000;
      targetAllianceId_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *目标联盟Id
     * </pre>
     *
     * <code>optional int64 targetAllianceId = 16;</code>
     */
    public Builder clearTargetAllianceId() {
      bitField0_ = (bitField0_ & ~0x00004000);
      targetAllianceId_ = 0L;
      onChanged();
      return this;
    }

    private int initialWalkTime_ ;
    /**
     * <pre>
     *初始行军时间
     * </pre>
     *
     * <code>required int32 initialWalkTime = 17;</code>
     */
    public boolean hasInitialWalkTime() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <pre>
     *初始行军时间
     * </pre>
     *
     * <code>required int32 initialWalkTime = 17;</code>
     */
    public int getInitialWalkTime() {
      return initialWalkTime_;
    }
    /**
     * <pre>
     *初始行军时间
     * </pre>
     *
     * <code>required int32 initialWalkTime = 17;</code>
     */
    public Builder setInitialWalkTime(int value) {
      bitField0_ |= 0x00008000;
      initialWalkTime_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *初始行军时间
     * </pre>
     *
     * <code>required int32 initialWalkTime = 17;</code>
     */
    public Builder clearInitialWalkTime() {
      bitField0_ = (bitField0_ & ~0x00008000);
      initialWalkTime_ = 0;
      onChanged();
      return this;
    }

    private int kingHeroProtoId_ ;
    /**
     * <pre>
     *领主英雄配置Id
     * </pre>
     *
     * <code>optional int32 kingHeroProtoId = 18;</code>
     */
    public boolean hasKingHeroProtoId() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <pre>
     *领主英雄配置Id
     * </pre>
     *
     * <code>optional int32 kingHeroProtoId = 18;</code>
     */
    public int getKingHeroProtoId() {
      return kingHeroProtoId_;
    }
    /**
     * <pre>
     *领主英雄配置Id
     * </pre>
     *
     * <code>optional int32 kingHeroProtoId = 18;</code>
     */
    public Builder setKingHeroProtoId(int value) {
      bitField0_ |= 0x00010000;
      kingHeroProtoId_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *领主英雄配置Id
     * </pre>
     *
     * <code>optional int32 kingHeroProtoId = 18;</code>
     */
    public Builder clearKingHeroProtoId() {
      bitField0_ = (bitField0_ & ~0x00010000);
      kingHeroProtoId_ = 0;
      onChanged();
      return this;
    }

    private int runType_ ;
    /**
     * <pre>
     * 行军类型
     * </pre>
     *
     * <code>required int32 runType = 7;</code>
     */
    public boolean hasRunType() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    /**
     * <pre>
     * 行军类型
     * </pre>
     *
     * <code>required int32 runType = 7;</code>
     */
    public int getRunType() {
      return runType_;
    }
    /**
     * <pre>
     * 行军类型
     * </pre>
     *
     * <code>required int32 runType = 7;</code>
     */
    public Builder setRunType(int value) {
      bitField0_ |= 0x00020000;
      runType_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 行军类型
     * </pre>
     *
     * <code>required int32 runType = 7;</code>
     */
    public Builder clearRunType() {
      bitField0_ = (bitField0_ & ~0x00020000);
      runType_ = 0;
      onChanged();
      return this;
    }

    private int goRunType_ ;
    /**
     * <pre>
     *行军前往时的行军类型
     * </pre>
     *
     * <code>optional int32 goRunType = 20;</code>
     */
    public boolean hasGoRunType() {
      return ((bitField0_ & 0x00040000) == 0x00040000);
    }
    /**
     * <pre>
     *行军前往时的行军类型
     * </pre>
     *
     * <code>optional int32 goRunType = 20;</code>
     */
    public int getGoRunType() {
      return goRunType_;
    }
    /**
     * <pre>
     *行军前往时的行军类型
     * </pre>
     *
     * <code>optional int32 goRunType = 20;</code>
     */
    public Builder setGoRunType(int value) {
      bitField0_ |= 0x00040000;
      goRunType_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *行军前往时的行军类型
     * </pre>
     *
     * <code>optional int32 goRunType = 20;</code>
     */
    public Builder clearGoRunType() {
      bitField0_ = (bitField0_ & ~0x00040000);
      goRunType_ = 0;
      onChanged();
      return this;
    }

    private int isGetResHome_ ;
    /**
     * <pre>
     *是否带资源回城
     * </pre>
     *
     * <code>required int32 isGetResHome = 21;</code>
     */
    public boolean hasIsGetResHome() {
      return ((bitField0_ & 0x00080000) == 0x00080000);
    }
    /**
     * <pre>
     *是否带资源回城
     * </pre>
     *
     * <code>required int32 isGetResHome = 21;</code>
     */
    public int getIsGetResHome() {
      return isGetResHome_;
    }
    /**
     * <pre>
     *是否带资源回城
     * </pre>
     *
     * <code>required int32 isGetResHome = 21;</code>
     */
    public Builder setIsGetResHome(int value) {
      bitField0_ |= 0x00080000;
      isGetResHome_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *是否带资源回城
     * </pre>
     *
     * <code>required int32 isGetResHome = 21;</code>
     */
    public Builder clearIsGetResHome() {
      bitField0_ = (bitField0_ & ~0x00080000);
      isGetResHome_ = 0;
      onChanged();
      return this;
    }

    private float currentSpeed_ ;
    /**
     * <pre>
     *当前速度
     * </pre>
     *
     * <code>required float currentSpeed = 22;</code>
     */
    public boolean hasCurrentSpeed() {
      return ((bitField0_ & 0x00100000) == 0x00100000);
    }
    /**
     * <pre>
     *当前速度
     * </pre>
     *
     * <code>required float currentSpeed = 22;</code>
     */
    public float getCurrentSpeed() {
      return currentSpeed_;
    }
    /**
     * <pre>
     *当前速度
     * </pre>
     *
     * <code>required float currentSpeed = 22;</code>
     */
    public Builder setCurrentSpeed(float value) {
      bitField0_ |= 0x00100000;
      currentSpeed_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *当前速度
     * </pre>
     *
     * <code>required float currentSpeed = 22;</code>
     */
    public Builder clearCurrentSpeed() {
      bitField0_ = (bitField0_ & ~0x00100000);
      currentSpeed_ = 0F;
      onChanged();
      return this;
    }

    private int photoId_ ;
    /**
     * <pre>
     *领主头像
     * </pre>
     *
     * <code>required int32 photoId = 23;</code>
     */
    public boolean hasPhotoId() {
      return ((bitField0_ & 0x00200000) == 0x00200000);
    }
    /**
     * <pre>
     *领主头像
     * </pre>
     *
     * <code>required int32 photoId = 23;</code>
     */
    public int getPhotoId() {
      return photoId_;
    }
    /**
     * <pre>
     *领主头像
     * </pre>
     *
     * <code>required int32 photoId = 23;</code>
     */
    public Builder setPhotoId(int value) {
      bitField0_ |= 0x00200000;
      photoId_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *领主头像
     * </pre>
     *
     * <code>required int32 photoId = 23;</code>
     */
    public Builder clearPhotoId() {
      bitField0_ = (bitField0_ & ~0x00200000);
      photoId_ = 0;
      onChanged();
      return this;
    }

    private int cellType_ ;
    /**
     * <pre>
     * 土地上的元素类型 1-资源点 2-魔物 3-遗迹 4- 玩家城池 5-奇观 6-空地 7-联盟BOSS 8-世界Boss 9-据点 11-召唤魔物 12-尸体资源地
     * </pre>
     *
     * <code>optional int32 cellType = 24;</code>
     */
    public boolean hasCellType() {
      return ((bitField0_ & 0x00400000) == 0x00400000);
    }
    /**
     * <pre>
     * 土地上的元素类型 1-资源点 2-魔物 3-遗迹 4- 玩家城池 5-奇观 6-空地 7-联盟BOSS 8-世界Boss 9-据点 11-召唤魔物 12-尸体资源地
     * </pre>
     *
     * <code>optional int32 cellType = 24;</code>
     */
    public int getCellType() {
      return cellType_;
    }
    /**
     * <pre>
     * 土地上的元素类型 1-资源点 2-魔物 3-遗迹 4- 玩家城池 5-奇观 6-空地 7-联盟BOSS 8-世界Boss 9-据点 11-召唤魔物 12-尸体资源地
     * </pre>
     *
     * <code>optional int32 cellType = 24;</code>
     */
    public Builder setCellType(int value) {
      bitField0_ |= 0x00400000;
      cellType_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 土地上的元素类型 1-资源点 2-魔物 3-遗迹 4- 玩家城池 5-奇观 6-空地 7-联盟BOSS 8-世界Boss 9-据点 11-召唤魔物 12-尸体资源地
     * </pre>
     *
     * <code>optional int32 cellType = 24;</code>
     */
    public Builder clearCellType() {
      bitField0_ = (bitField0_ & ~0x00400000);
      cellType_ = 0;
      onChanged();
      return this;
    }

    private int reslv_ ;
    /**
     * <pre>
     * 等级
     * </pre>
     *
     * <code>optional int32 reslv = 25;</code>
     */
    public boolean hasReslv() {
      return ((bitField0_ & 0x00800000) == 0x00800000);
    }
    /**
     * <pre>
     * 等级
     * </pre>
     *
     * <code>optional int32 reslv = 25;</code>
     */
    public int getReslv() {
      return reslv_;
    }
    /**
     * <pre>
     * 等级
     * </pre>
     *
     * <code>optional int32 reslv = 25;</code>
     */
    public Builder setReslv(int value) {
      bitField0_ |= 0x00800000;
      reslv_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 等级
     * </pre>
     *
     * <code>optional int32 reslv = 25;</code>
     */
    public Builder clearReslv() {
      bitField0_ = (bitField0_ & ~0x00800000);
      reslv_ = 0;
      onChanged();
      return this;
    }

    private int resType_ ;
    /**
     * <pre>
     * 资源点类型
     * </pre>
     *
     * <code>optional int32 resType = 26;</code>
     */
    public boolean hasResType() {
      return ((bitField0_ & 0x01000000) == 0x01000000);
    }
    /**
     * <pre>
     * 资源点类型
     * </pre>
     *
     * <code>optional int32 resType = 26;</code>
     */
    public int getResType() {
      return resType_;
    }
    /**
     * <pre>
     * 资源点类型
     * </pre>
     *
     * <code>optional int32 resType = 26;</code>
     */
    public Builder setResType(int value) {
      bitField0_ |= 0x01000000;
      resType_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 资源点类型
     * </pre>
     *
     * <code>optional int32 resType = 26;</code>
     */
    public Builder clearResType() {
      bitField0_ = (bitField0_ & ~0x01000000);
      resType_ = 0;
      onChanged();
      return this;
    }

    private int bossId_ ;
    /**
     * <pre>
     * 如果类型是魔物的话,这个是monster表的id字段,模版与等级都可以取到
     * </pre>
     *
     * <code>optional int32 bossId = 27;</code>
     */
    public boolean hasBossId() {
      return ((bitField0_ & 0x02000000) == 0x02000000);
    }
    /**
     * <pre>
     * 如果类型是魔物的话,这个是monster表的id字段,模版与等级都可以取到
     * </pre>
     *
     * <code>optional int32 bossId = 27;</code>
     */
    public int getBossId() {
      return bossId_;
    }
    /**
     * <pre>
     * 如果类型是魔物的话,这个是monster表的id字段,模版与等级都可以取到
     * </pre>
     *
     * <code>optional int32 bossId = 27;</code>
     */
    public Builder setBossId(int value) {
      bitField0_ |= 0x02000000;
      bossId_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 如果类型是魔物的话,这个是monster表的id字段,模版与等级都可以取到
     * </pre>
     *
     * <code>optional int32 bossId = 27;</code>
     */
    public Builder clearBossId() {
      bitField0_ = (bitField0_ & ~0x02000000);
      bossId_ = 0;
      onChanged();
      return this;
    }

    private int relicId_ ;
    /**
     * <pre>
     * 如果类型是遗迹的话,这个是relic表的id字段,模版与等级都可以取到
     * </pre>
     *
     * <code>optional int32 relicId = 28;</code>
     */
    public boolean hasRelicId() {
      return ((bitField0_ & 0x04000000) == 0x04000000);
    }
    /**
     * <pre>
     * 如果类型是遗迹的话,这个是relic表的id字段,模版与等级都可以取到
     * </pre>
     *
     * <code>optional int32 relicId = 28;</code>
     */
    public int getRelicId() {
      return relicId_;
    }
    /**
     * <pre>
     * 如果类型是遗迹的话,这个是relic表的id字段,模版与等级都可以取到
     * </pre>
     *
     * <code>optional int32 relicId = 28;</code>
     */
    public Builder setRelicId(int value) {
      bitField0_ |= 0x04000000;
      relicId_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 如果类型是遗迹的话,这个是relic表的id字段,模版与等级都可以取到
     * </pre>
     *
     * <code>optional int32 relicId = 28;</code>
     */
    public Builder clearRelicId() {
      bitField0_ = (bitField0_ & ~0x04000000);
      relicId_ = 0;
      onChanged();
      return this;
    }

    private java.lang.Object targetPlayerName_ = "";
    /**
     * <pre>
     *目标玩家的名称
     * </pre>
     *
     * <code>optional string targetPlayerName = 29;</code>
     */
    public boolean hasTargetPlayerName() {
      return ((bitField0_ & 0x08000000) == 0x08000000);
    }
    /**
     * <pre>
     *目标玩家的名称
     * </pre>
     *
     * <code>optional string targetPlayerName = 29;</code>
     */
    public java.lang.String getTargetPlayerName() {
      java.lang.Object ref = targetPlayerName_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          targetPlayerName_ = s;
        }
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     *目标玩家的名称
     * </pre>
     *
     * <code>optional string targetPlayerName = 29;</code>
     */
    public com.google.protobuf.ByteString
        getTargetPlayerNameBytes() {
      java.lang.Object ref = targetPlayerName_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        targetPlayerName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     *目标玩家的名称
     * </pre>
     *
     * <code>optional string targetPlayerName = 29;</code>
     */
    public Builder setTargetPlayerName(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x08000000;
      targetPlayerName_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *目标玩家的名称
     * </pre>
     *
     * <code>optional string targetPlayerName = 29;</code>
     */
    public Builder clearTargetPlayerName() {
      bitField0_ = (bitField0_ & ~0x08000000);
      targetPlayerName_ = getDefaultInstance().getTargetPlayerName();
      onChanged();
      return this;
    }
    /**
     * <pre>
     *目标玩家的名称
     * </pre>
     *
     * <code>optional string targetPlayerName = 29;</code>
     */
    public Builder setTargetPlayerNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x08000000;
      targetPlayerName_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object targetPlayerShortName_ = "";
    /**
     * <pre>
     *目标玩家简称
     * </pre>
     *
     * <code>optional string targetPlayerShortName = 30;</code>
     */
    public boolean hasTargetPlayerShortName() {
      return ((bitField0_ & 0x10000000) == 0x10000000);
    }
    /**
     * <pre>
     *目标玩家简称
     * </pre>
     *
     * <code>optional string targetPlayerShortName = 30;</code>
     */
    public java.lang.String getTargetPlayerShortName() {
      java.lang.Object ref = targetPlayerShortName_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          targetPlayerShortName_ = s;
        }
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     *目标玩家简称
     * </pre>
     *
     * <code>optional string targetPlayerShortName = 30;</code>
     */
    public com.google.protobuf.ByteString
        getTargetPlayerShortNameBytes() {
      java.lang.Object ref = targetPlayerShortName_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        targetPlayerShortName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     *目标玩家简称
     * </pre>
     *
     * <code>optional string targetPlayerShortName = 30;</code>
     */
    public Builder setTargetPlayerShortName(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x10000000;
      targetPlayerShortName_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *目标玩家简称
     * </pre>
     *
     * <code>optional string targetPlayerShortName = 30;</code>
     */
    public Builder clearTargetPlayerShortName() {
      bitField0_ = (bitField0_ & ~0x10000000);
      targetPlayerShortName_ = getDefaultInstance().getTargetPlayerShortName();
      onChanged();
      return this;
    }
    /**
     * <pre>
     *目标玩家简称
     * </pre>
     *
     * <code>optional string targetPlayerShortName = 30;</code>
     */
    public Builder setTargetPlayerShortNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x10000000;
      targetPlayerShortName_ = value;
      onChanged();
      return this;
    }

    private long massId_ ;
    /**
     * <pre>
     *集结Id 标识是否集结队伍
     * </pre>
     *
     * <code>optional int64 massId = 31;</code>
     */
    public boolean hasMassId() {
      return ((bitField0_ & 0x20000000) == 0x20000000);
    }
    /**
     * <pre>
     *集结Id 标识是否集结队伍
     * </pre>
     *
     * <code>optional int64 massId = 31;</code>
     */
    public long getMassId() {
      return massId_;
    }
    /**
     * <pre>
     *集结Id 标识是否集结队伍
     * </pre>
     *
     * <code>optional int64 massId = 31;</code>
     */
    public Builder setMassId(long value) {
      bitField0_ |= 0x20000000;
      massId_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *集结Id 标识是否集结队伍
     * </pre>
     *
     * <code>optional int64 massId = 31;</code>
     */
    public Builder clearMassId() {
      bitField0_ = (bitField0_ & ~0x20000000);
      massId_ = 0L;
      onChanged();
      return this;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:client2server.WalkRobot)
  }

  // @@protoc_insertion_point(class_scope:client2server.WalkRobot)
  private static final pb4client.WalkRobot DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new pb4client.WalkRobot();
  }

  public static pb4client.WalkRobot getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  @java.lang.Deprecated public static final com.google.protobuf.Parser<WalkRobot>
      PARSER = new com.google.protobuf.AbstractParser<WalkRobot>() {
    public WalkRobot parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
        return new WalkRobot(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<WalkRobot> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<WalkRobot> getParserForType() {
    return PARSER;
  }

  public pb4client.WalkRobot getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

