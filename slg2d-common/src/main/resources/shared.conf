include "cluster-common.conf"
include "kryo-serialization.conf"

akka {
  loglevel = "INFO"

  // 临时屏蔽dead-letter的记录，生产环境可能需要打开
  log-dead-letters = off
  log-dead-letters-during-shutdown = off

  extensions = [
    "akka.cluster.pubsub.DistributedPubSub"
    "akka.cluster.client.ClusterClientReceptionist"
    "akka.cluster.ddata.DistributedData"
  ]

  scheduler {
    tick-duration = 100ms
  }

  actor {

    //    enable-additional-serialization-bindings = true
    allow-java-serialization = off

    provider = "cluster"

    blocking-io-dispatcher {
      type = Dispatcher
      executor = "thread-pool-executor"
      thread-pool-executor {
        fixed-pool-size = 50
      }
      throughput = 1
    }

    mailbox {
      // SS：小容量邮箱
      small-bounded {
        mailbox-type = "akka.dispatch.BoundedDequeBasedMailbox"
        mailbox-capacity = 50000
        stash-capacity = 20000
        mailbox-push-timeout-time = 0
      }
      // SS：大容量邮箱
      large-bounded {
        mailbox-type = "akka.dispatch.BoundedDequeBasedMailbox"
        mailbox-capacity = 10000000
        stash-capacity = 100000
        mailbox-push-timeout-time = 0
      }
    }

    serializers {
      duid = "xyz.ariane.util.DUidMessageSerializer"
      dlock = "xyz.ariane.util.DLockMessageSerializer"
      kryo = "xyz.ariane.util.TrackableKryoSerializer"
      myproto = "akka.remote.serialization.ProtobufSerializer"
      scmsg = "com.point18.slg2d.common.msgtrans.InternalSCMessageSerializer"
      protoplayer = "com.point18.slg2d.common.msgtrans.InternalProtoPlayerSerializer"
      protoworld = "com.point18.slg2d.common.msgtrans.InternalProtoWorldSerializer"
    }

    serialization-bindings {
      "com.point18.slg2d.common.msgtrans.InternalMessage" = kryo
      "com.point18.slg2d.common.msgtrans.ScMessageAtSend" = scmsg
      "com.point18.slg2d.common.msgtrans.ProtoPlayer" = protoplayer
      "com.point18.slg2d.common.msgtrans.ProtoWorld" = protoworld
      "pb4server.MulticastEnvelopeMsg" = myproto

      "pb4server.World2PublicAskReq" = myproto
      "pb4server.World2PublicAskResp" = myproto
      "pb4server.World2HomeAskReq" = myproto
      "pb4server.World2HomeAskResp" = myproto
      "pb4server.World2WorldAskReq" = myproto
      "pb4server.World2WorldAskResp" = myproto
      "pb4server.WorldManager2PublicManagerAskReq" = myproto
      "pb4server.WorldManager2PublicManagerAskResp" = myproto
      "pb4server.World2WorldManagerAskReq" = myproto
      "pb4server.World2WorldManagerAskResp" = myproto
      "pb4server.PublicManager2WorldManagerTell" = myproto
      "pb4server.PublicManager2PublicTell" = myproto
      "pb4server.Public2HomeTell" = myproto





      "pb4server.Home2PublicManagerAskReq" = myproto
      "pb4server.Home2PublicManagerAskResp" = myproto
      "pb4server.World2PublicManagerAskReq" = myproto
      "pb4server.World2PublicManagerAskResp" = myproto

      "pb4server.PublicManager2PublicAskReq" = myproto
      "pb4server.PublicManager2PublicAskResp" = myproto
      "pb4server.Public2PublicManagerAskReq" = myproto
      "pb4server.Public2PublicManagerAskResp" = myproto

      "pb4server.Home2PublicAskReq" = myproto
      "pb4server.Home2PublicAskResp" = myproto
      "pb4server.Home2HomeAskReq" = myproto
      "pb4server.Home2HomeAskResp" = myproto
      "pb4server.Home2WorldAskReq" = myproto
      "pb4server.Home2WorldAskResp" = myproto

      "pb4server.World2HomeTell" = myproto
      "pb4server.Home2WorldTell" = myproto
      "pb4server.Home2HomeTell" = myproto
      "pb4server.Public2WorldTell" = myproto
      "pb4server.World2WorldTell" = myproto
      "pb4server.Public2PublicManagerTell" = myproto
      "pb4server.World2WorldManagerTell" = myproto

      "pb4server.HandoffTell" = myproto
      "pb4server.ChannelExpiredTell" = myproto
      "pb4server.PingAskReq" = myproto
      "pb4server.PingAskRt" = myproto
    }
  }

  remote {
    enabled-transports = ["akka.remote.netty.tcp"]
    netty.tcp {
      //hostname = "127.0.0.1"
      //port = 0
      maximum-frame-size = 128000000b # 122m
    }

    # 节点crash后进入unreachable状态，虽然autodown时关闭的，但由于存在这个系统消息超时
    # 在超时后unreachable的节点会被隔离，集群同时也会down掉此节点，最终效果等同于autodown
    # 为了在没有手动down掉crash节点前，不让受影响玩家登录游戏，将此超时时间调大
    initial-system-message-delivery-timeout = 120 m

    log-remote-lifecycle-events = on

    system-message-buffer-size = 100000

    transport-failure-detector {
      heartbeat-interval = 4 s
      acceptable-heartbeat-pause = 16 s
    }

    watch-failure-detector {
      heartbeat-interval = 5 s
      threshold = 15.0
      max-sample-size = 200
      min-std-deviation = 200 ms
      acceptable-heartbeat-pause = 60 s
      unreachable-nodes-reaper-interval = 1s
      expected-response-after = 1 s
    }
  }

  coordinated-shutdown {
    # The timeout that will be used for a phase if not specified with
    # 'timeout' in the phase
    default-phase-timeout = 10 s

    phases {
      before-cluster-sharding-shutdown-region {
        timeout = 60 s
        depends-on = [before-cluster-shutdown]
      }

      # Graceful shutdown of the Cluster Sharding regions.
      cluster-sharding-shutdown-region {
        timeout = 1800 s
        depends-on = [before-cluster-sharding-shutdown-region]
      }
    }
  }
}