buildscript {
    ext {
        akka_version = "2.5.13"
        kotlin_version = "1.2.71"
        kafka_version = "1.1.1"
        frameworklib_version = "0.0.2"
        spring_boot_version = "1.5.4.RELEASE"
        grpc_version = "1.14.0"
        hibernate_version = "3.6.10.Final"
        spring_version = "4.3.9.RELEASE"
        druid_version = "1.0.27"
        mysql_connector_version = "5.1.29"
        apache_curator_version = "2.12.0"
        protobuf_plugin_version = "0.8.0"
        protobuf_java_version = "3.3.1"
        jackson_version = "2.9.2"
        netty_version = "4.1.27.Final"
        logback_version = "1.2.1"
        nexus_host = '172.18.3.201:16000'
    }

    repositories {
        // mavenCentral()
        maven {
            url "http://$nexus_host/repository/maven-public/"
        }
    }

    // 这里算是定义外部依赖
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-noarg:$kotlin_version"
        classpath "com.google.protobuf:protobuf-gradle-plugin:$protobuf_plugin_version"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_version"
    }
}

group "com.point18.slg2d"
version "1.1.0-SNAPSHOT"

apply plugin: 'distribution'

subprojects {

    apply plugin: "java"
    apply plugin: "kotlin"
    apply plugin: 'kotlin-noarg'
    apply plugin: 'idea'

    // 引入java插件后，下面的属性会被mix进Project
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    [compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

    compileJava {
        // 启用在单独的daemon进程中编译
        options.fork = true
    }

    kotlin {
        experimental {
            // 不允许使用kotlin的协程
            coroutines = "error"
        }
    }

    noArg {
        annotation("xyz.ariane.util.annotation.NoArgConstructor")
    }

    configure([compileKotlin, compileTestKotlin]) {
        kotlinOptions {
            // Generate metadata for Java 1.8 reflection on method parameters
            javaParameters = true

            // Target version of the generated JVM bytecode (1.6 or 1.8), default is 1.6
            jvmTarget = "1.8"
        }
    }

    repositories {
        // mavenCentral()
        maven {
            url "http://$nexus_host/repository/maven-public/"
        }
        maven {
            url "http://$nexus_host/repository/topg-releases/"
        }
    }

    dependencies {
        compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version")
        compile("org.jetbrains.kotlin:kotlin-reflect:$kotlin_version")
        compile("com.typesafe.akka:akka-actor_2.12:$akka_version")
        compile("com.typesafe.akka:akka-slf4j_2.12:$akka_version")
        compile("com.typesafe.akka:akka-cluster-sharding_2.12:$akka_version")
        compile("com.typesafe.akka:akka-cluster-metrics_2.12:$akka_version")
        compile("com.typesafe.akka:akka-distributed-data_2.12:$akka_version")

        compile("io.grpc:grpc-netty:$grpc_version")
        compile("io.grpc:grpc-protobuf:$grpc_version")
        compile("io.grpc:grpc-stub:$grpc_version")

        compile("org.apache.kafka:kafka-clients:$kafka_version")

        compile('com.alibaba:fastjson:1.2.29')

        compile('com.esotericsoftware:kryo:4.0.1')

        compile("org.apache.curator:curator-recipes:$apache_curator_version") {
            exclude group: "log4j" // log4j 1.2.16有bug，这里直接排除
            exclude group: "jline"
        }
        compile("org.apache.curator:curator-x-discovery:$apache_curator_version") {
            exclude group: "log4j" // log4j 1.2.16有bug，这里直接排除
            exclude group: "jline"
        }

        compile("com.alibaba:druid:$druid_version")
        compile("mysql:mysql-connector-java:$mysql_connector_version")

        compile("com.fasterxml.jackson.core:jackson-core:$jackson_version")
        compile("com.fasterxml.jackson.core:jackson-databind:$jackson_version")
        compile("com.fasterxml.jackson.core:jackson-annotations:$jackson_version")
        compile("com.fasterxml.jackson.dataformat:jackson-dataformat-xml:$jackson_version")
        compile("com.fasterxml.jackson.module:jackson-module-kotlin:$jackson_version")
        compile("io.netty:netty-handler:$netty_version")
        compile("com.google.protobuf:protobuf-java:$protobuf_java_version")
        compile("ch.qos.logback:logback-classic:$logback_version")

        testCompile("com.typesafe.akka:akka-testkit_2.12:$akka_version")
        testCompile("junit:junit:4.12")
    }

}

def slg2d_projects = ["slg2d-common", "slg2d-gate", "slg2d-home", "slg2d-world", "slg2d-public", "slg2d-mgr"]
def sharedLibsDirName = "shared_libs"
def projectLibsDirName = "project_libs"
def battlePublishDirName = "battle_publish"
def filteredSubProjects = subprojects.findAll { it.name in slg2d_projects }

configure(filteredSubProjects) {
    task releaseSub(dependsOn: jar) {
        doLast {
            def distDir = "${rootDir}/build/dist"
            def sharedLibsDistDir = "$distDir/$sharedLibsDirName"
            def battleLibsDistDir = "$distDir/$battlePublishDirName"
            def battlePublishDir = "${rootDir}/$battlePublishDirName"
            println("${project.name} ${rootDir} ${distDir} $libsDir")

            if (project.name == "slg2d-common") {
                copy {
                    into sharedLibsDistDir
                    from libsDir
                    from configurations.runtime
                }
                copy {
                    into battleLibsDistDir
                    from battlePublishDir
                }
            } else {
                def projectLibsDistDir = "$distDir/$projectLibsDirName/$project.name"
                def sharedLibs = fileTree("${project(':slg2d-common').buildDir}/libs")

                if (project.name == "slg2d-mgr") {
                    copy {
                        // 这里只拷贝此project独有的依赖
                        into distDir
                        from("${projectDir}/application.properties.tpl")
                                .rename("application.properties.tpl", "application.properties")
                        from("${projectDir}/zookeeper.properties.tpl")
                                .rename("zookeeper.properties.tpl", "zookeeper.properties")
                    }
                }

                copy {
                    // 这里只拷贝此project独有的依赖
                    into projectLibsDistDir
                    from libsDir
                    from configurations.runtime - project(':slg2d-common').configurations.runtime - sharedLibs
                }
            }
        }
    }
}

distributions {
    slg2d {
        baseName = project.name
        contents {
            from { 'build/dist' }
        }
    }
}


task releaseRoot() {
    filteredSubProjects.each { dependsOn "${it.name}:releaseSub" }

    println("slg2d releaseRoot first")
    delete "build/dist"

    doLast {
        println("slg2d releaseRoot")

        def distDir = "${rootDir}/build/dist"
        def binDistDir = "${distDir}/bin"
        def cfgDistDir = "${distDir}/cfg"
        def confDistDir = "${distDir}/config_game"
        def dbDistDir = "${distDir}/sql"

        copy {
            into binDistDir
            from "bin/slg2d.sh"
            from "bin/show-error-log.sh"
            from "bin/zk.sh"
        }
        copy {
            into cfgDistDir
            from("cfg/startconfig.json.tpl")
                    .rename("startconfig.json.tpl", "startconfig.json")
            from("cfg/zkconfig.json.tpl")
                    .rename("zkconfig.json.tpl", "zkconfig.json")
        }
        copy {
            into confDistDir
            from "config_game"
        }
        copy {
            into dbDistDir
            from "sql"
        }
        copy {
            into distDir
            from "bin/start_server.bat"
            from "bin/start_server_cleandb.bat"
        }
    }

}

def distDirName = 'distTar'
slg2dDistTar.dependsOn 'releaseRoot'
slg2dDistTar.setArchiveName("${project.name}.tar.gz")
slg2dDistTar.compression = Compression.GZIP
slg2dDistTar.extension = 'tar.gz'
slg2dDistTar.destinationDir = file("build/${distDirName}")

task buildTar(dependsOn: slg2dDistTar) {
    println("删除发布包目录")
    delete "build/${distDirName}"
}